{"tsReport":[{"pos":{"line":-1,"col":-1},"message":"","file":""},{"pos":{"line":45,"col":18},"message":"Argument of type 'number' is not assignable to parameter of type '{ a: number; }'.","file":"effector-react/effectorReact.test.tsx"},{"pos":{"line":47,"col":18},"message":"Argument of type '{}' is not assignable to parameter of type '{ a: number; }'.\n  Property 'a' is missing in type '{}' but required in type '{ a: number; }'.","file":"effector-react/effectorReact.test.tsx"},{"pos":{"line":195,"col":7},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'string' is not assignable to type 'Store<any> | Effect<any, any, any> | EventCallable<any>'.","file":"effector-react/effectorReact.test.tsx"},{"pos":{"line":265,"col":14},"message":"Expected 0 arguments, but got 1.","file":"effector-react/effectorReact.test.tsx"},{"pos":{"line":266,"col":15},"message":"Expected 0 arguments, but got 1.","file":"effector-react/effectorReact.test.tsx"},{"pos":{"line":284,"col":15},"message":"Expected 0 arguments, but got 1.","file":"effector-react/effectorReact.test.tsx"},{"pos":{"line":285,"col":16},"message":"Expected 0 arguments, but got 1.","file":"effector-react/effectorReact.test.tsx"},{"pos":{"line":311,"col":14},"message":"Argument of type 'string' is not assignable to parameter of type 'number'.","file":"effector-react/effectorReact.test.tsx"},{"pos":{"line":312,"col":15},"message":"Argument of type 'number' is not assignable to parameter of type 'string'.","file":"effector-react/effectorReact.test.tsx"},{"pos":{"line":313,"col":15},"message":"Argument of type 'string' is not assignable to parameter of type 'number'.","file":"effector-react/effectorReact.test.tsx"},{"pos":{"line":314,"col":16},"message":"Argument of type 'number' is not assignable to parameter of type 'string'.","file":"effector-react/effectorReact.test.tsx"},{"pos":{"line":315,"col":19},"message":"Argument of type '0' is not assignable to parameter of type '42'.","file":"effector-react/effectorReact.test.tsx"},{"pos":{"line":316,"col":20},"message":"Argument of type '{}' is not assignable to parameter of type '42'.","file":"effector-react/effectorReact.test.tsx"},{"pos":{"line":58,"col":28},"message":"Tuple type 'readonly [number]' of length '1' has no element at index '1'.","file":"effector-react/useStoreMap.test.tsx"},{"pos":{"line":90,"col":11},"message":"No overload matches this call.\n  Overload 1 of 3, '(opts: { readonly store: Store<User[]>; readonly keys: [number, number]; readonly fn: (state: User[], keys: [number, number]) => null | undefined; readonly updateFilter?: ((update: null, current: null) => boolean) | undefined; readonly defaultValue: null; readonly forceScope?: boolean | undefined; }): null', gave the following error.\n    Type '[number, keyof User]' is not assignable to type '[number, number]'.\n      Type at position 1 in source is not compatible with type at position 1 in target.\n        Type 'string' is not assignable to type 'number'.\n          Type 'string' is not assignable to type 'number'.\n  Overload 2 of 3, '(opts: { readonly store: Store<User[]>; readonly keys: [number, number]; readonly fn: (state: User[], keys: [number, number]) => null; readonly updateFilter?: ((update: null, current: null) => boolean) | undefined; readonly forceScope?: boolean | undefined; }): null', gave the following error.\n    Type '[number, keyof User]' is not assignable to type '[number, number]'.","file":"effector-react/useStoreMap.test.tsx"},{"pos":{"line":94,"col":21},"message":"Type 'unknown' is not assignable to type 'ReactNode'.","file":"effector-react/useStoreMap.test.tsx"},{"pos":{"line":38,"col":20},"message":"The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.","file":"effector-vue/effectorVue.test.ts"},{"pos":{"line":78,"col":20},"message":"The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.","file":"effector-vue/effectorVue.test.ts"},{"pos":{"line":124,"col":20},"message":"The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.","file":"effector-vue/effectorVue.test.ts"},{"pos":{"line":164,"col":20},"message":"The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.","file":"effector-vue/effectorVue.test.ts"},{"pos":{"line":206,"col":22},"message":"The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.","file":"effector-vue/effectorVue.test.ts"},{"pos":{"line":92,"col":7},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type '(text: number, source: number) => { foo: number; }' is not assignable to type '(params: any, source: number) => { foo: string; }'.\n      Call signature return types '{ foo: number; }' and '{ foo: string; }' are incompatible.\n        The types of 'foo' are incompatible between these types.\n          Type 'number' is not assignable to type 'string'.","file":"effector/attach.test.ts"},{"pos":{"line":110,"col":11},"message":"Type 'Effect<number, string, { message: string; }>' is not assignable to type 'Effect<string, string, { message: string; }>'.\n  Types of property 'done' are incompatible.\n    Type 'Event<{ params: number; result: string; }>' is not assignable to type 'Event<{ params: string; result: string; }>'.\n      Type '{ params: number; result: string; }' is not assignable to type '{ params: string; result: string; }'.\n        Types of property 'params' are incompatible.\n          Type 'number' is not assignable to type 'string'.","file":"effector/attach.test.ts"},{"pos":{"line":113,"col":7},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type '(text: number) => { foo: number; }' is not assignable to type '(params: any, source: any) => { foo: string; }'.\n      Call signature return types '{ foo: number; }' and '{ foo: string; }' are incompatible.\n        The types of 'foo' are incompatible between these types.\n          Type 'number' is not assignable to type 'string'.","file":"effector/attach.test.ts"},{"pos":{"line":168,"col":38},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'unknown' is not assignable to type 'string'.","file":"effector/attach.test.ts"},{"pos":{"line":200,"col":38},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'unknown' is not assignable to type 'string'.","file":"effector/attach.test.ts"},{"pos":{"line":224,"col":7},"message":"Type '(params: number, data: number) => { wrapped: number; data: number; }' is not assignable to type '(params: number, states: number) => string'.\n  Type '{ wrapped: number; data: number; }' is not assignable to type 'string'.","file":"effector/attach.test.ts"},{"pos":{"line":247,"col":7},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type '(params: unknown, data: number) => { wrapped: unknown; data: number; }' is not assignable to type '(params: any, source: number) => string'.\n      Type '{ wrapped: unknown; data: number; }' is not assignable to type 'string'.","file":"effector/attach.test.ts"},{"pos":{"line":271,"col":9},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'string' is not assignable to type '\"one\" | \"two\" | \"three\"'.","file":"effector/attach.test.ts"},{"pos":{"line":304,"col":9},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'string' is not assignable to type '\"one\" | \"two\" | \"three\"'.","file":"effector/attach.test.ts"},{"pos":{"line":55,"col":15},"message":"Argument of type 'null' is not assignable to parameter of type 'Unit<any> | Node'.","file":"effector/clearNode.test.ts"},{"pos":{"line":185,"col":11},"message":"Type 'Store<{ R: number; G: number; B: number; }>' is not assignable to type 'Store<{ R: string; G: string; B: string; }>'.\n  Type '{ R: number; G: number; B: number; }' is not assignable to type '{ R: string; G: string; B: string; }'.\n    Types of property 'R' are incompatible.\n      Type 'number' is not assignable to type 'string'.","file":"effector/combine.test.ts"},{"pos":{"line":200,"col":11},"message":"Type 'Store<[number, number, number]>' is not assignable to type 'Store<[string, string, string]>'.\n  Type '[number, number, number]' is not assignable to type '[string, string, string]'.\n    Type at position 0 in source is not compatible with type at position 0 in target.\n      Type 'number' is not assignable to type 'string'.","file":"effector/combine.test.ts"},{"pos":{"line":213,"col":11},"message":"Type 'Store<{ Color: string; }>' is not assignable to type 'Store<{ Color: number; }>'.\n  Type '{ Color: string; }' is not assignable to type '{ Color: number; }'.\n    Types of property 'Color' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/combine.test.ts"},{"pos":{"line":226,"col":11},"message":"Type 'Store<[string]>' is not assignable to type 'Store<[number]>'.\n  Type '[string]' is not assignable to type '[number]'.\n    Type 'string' is not assignable to type 'number'.","file":"effector/combine.test.ts"},{"pos":{"line":240,"col":11},"message":"Type 'Store<string>' is not assignable to type 'Store<number>'.\n  Type 'string' is not assignable to type 'number'.","file":"effector/combine.test.ts"},{"pos":{"line":260,"col":11},"message":"Type 'Store<string>' is not assignable to type 'Store<number>'.","file":"effector/combine.test.ts"},{"pos":{"line":277,"col":11},"message":"Type 'Store<string>' is not assignable to type 'Store<number>'.","file":"effector/combine.test.ts"},{"pos":{"line":287,"col":11},"message":"Type 'Store<string>' is not assignable to type 'Store<number>'.","file":"effector/combine.test.ts"},{"pos":{"line":297,"col":11},"message":"Type 'Store<string>' is not assignable to type 'Store<number>'.","file":"effector/combine.test.ts"},{"pos":{"line":309,"col":11},"message":"Type 'Store<string>' is not assignable to type 'Store<number>'.","file":"effector/combine.test.ts"},{"pos":{"line":330,"col":11},"message":"Type 'Store<[number, number, number]>' is not assignable to type 'Store<[string, string, string]>'.","file":"effector/combine.test.ts"},{"pos":{"line":340,"col":11},"message":"Type 'Store<[string]>' is not assignable to type 'Store<number>'.\n  Type '[string]' is not assignable to type 'number'.","file":"effector/combine.test.ts"},{"pos":{"line":435,"col":20},"message":"No overload matches this call.\n  Overload 1 of 18, '(shape: { foo?: string | number | Store<string | number> | undefined; bar: number | Store<number>; }): Store<I>', gave the following error.\n    Argument of type '{ foo: number; bar: StoreWritable<number>; baz: StoreWritable<number>; }' is not assignable to parameter of type '{ foo?: string | number | Store<string | number> | undefined; bar: number | Store<number>; }'.\n      Object literal may only specify known properties, and 'baz' does not exist in type '{ foo?: string | number | Store<string | number> | undefined; bar: number | Store<number>; }'.\n  Overload 2 of 18, '(shape: I): Store<{ foo?: string | number | undefined; bar: number; }>', gave the following error.\n    Type 'StoreWritable<number>' is not assignable to type 'number'.","file":"effector/combine.test.ts"},{"pos":{"line":562,"col":11},"message":"Type 'Store<{ currency: Currency; }>' is not assignable to type 'Store<{ currency: number; }>'.\n  Type '{ currency: Currency; }' is not assignable to type '{ currency: number; }'.\n    Types of property 'currency' are incompatible.\n      Type 'string' is not assignable to type 'number'.\n        Type 'string' is not assignable to type 'number'.","file":"effector/combine.test.ts"},{"pos":{"line":31,"col":9},"message":"Type 'EventCallable<number>' is not assignable to type 'EventCallable<string>'.\n  Types of property 'prepend' are incompatible.\n    Types of parameters 'fn' and 'fn' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/createApi.test.ts"},{"pos":{"line":47,"col":9},"message":"Type 'EventCallable<void>' is not assignable to type 'EventCallable<string>'.\n  Types of property 'map' are incompatible.\n    Type '<T>(fn: (payload: void) => T) => EventAsReturnType<T>' is not assignable to type '<T>(fn: (payload: string) => T) => EventAsReturnType<T>'.\n      Types of parameters 'fn' and 'fn' are incompatible.\n        Types of parameters 'payload' and 'payload' are incompatible.\n          Type 'void' is not assignable to type 'string'.","file":"effector/createApi.test.ts"},{"pos":{"line":143,"col":5},"message":"The 'this' context of type 'void' is not assignable to method's 'this' of type '\"Error: Expected 1 argument, but got 0\"'.","file":"effector/createApi.test.ts"},{"pos":{"line":156,"col":5},"message":"No overload matches this call.\n  Overload 1 of 2, '(payload: number): number', gave the following error.\n    Argument of type 'string' is not assignable to parameter of type 'number'.\n  Overload 2 of 2, '(this: \"Error: Expected 1 argument, but got 0\", payload?: number | undefined): void', gave the following error.\n    The 'this' context of type 'void' is not assignable to method's 'this' of type '\"Error: Expected 1 argument, but got 0\"'.","file":"effector/createApi.test.ts"},{"pos":{"line":201,"col":3},"message":"The 'this' context of type '{ moveRight: EventCallable<number>; }' is not assignable to method's 'this' of type '\"Error: Expected 1 argument, but got 0\"'.","file":"effector/createApi.test.ts"},{"pos":{"line":203,"col":3},"message":"No overload matches this call.\n  Overload 1 of 2, '(payload: number): number', gave the following error.\n    Argument of type 'string' is not assignable to parameter of type 'number'.\n  Overload 2 of 2, '(this: \"Error: Expected 1 argument, but got 0\", payload?: number | undefined): void', gave the following error.\n    The 'this' context of type '{ moveRight: EventCallable<number>; }' is not assignable to method's 'this' of type '\"Error: Expected 1 argument, but got 0\"'.","file":"effector/createApi.test.ts"},{"pos":{"line":10,"col":32},"message":"No overload matches this call.\n  Overload 1 of 2, '(domainName?: string | undefined, config?: { domain?: Domain | undefined; } | undefined): Domain', gave the following error.\n    Argument of type 'number' is not assignable to parameter of type 'string'.\n  Overload 2 of 2, '(config?: { name?: string | undefined; domain?: Domain | undefined; } | undefined): Domain', gave the following error.\n    Type '234' has no properties in common with type '{ name?: string | undefined; domain?: Domain | undefined; }'.","file":"effector/domain.test.ts"},{"pos":{"line":12,"col":19},"message":"No overload matches this call.\n  Overload 1 of 2, '(domainName?: string | undefined, config?: { domain?: Domain | undefined; } | undefined): Domain', gave the following error.\n    Argument of type '{ foo: boolean; }' is not assignable to parameter of type 'string'.\n  Overload 2 of 2, '(config?: { name?: string | undefined; domain?: Domain | undefined; } | undefined): Domain', gave the following error.\n    Argument of type '{ foo: boolean; }' is not assignable to parameter of type '{ name?: string | undefined; domain?: Domain | undefined; }'.\n      Object literal may only specify known properties, and 'foo' does not exist in type '{ name?: string | undefined; domain?: Domain | undefined; }'.","file":"effector/domain.test.ts"},{"pos":{"line":101,"col":13},"message":"Argument of type 'number' is not assignable to parameter of type 'string'.","file":"effector/domain.test.ts"},{"pos":{"line":106,"col":13},"message":"Argument of type 'number' is not assignable to parameter of type 'string'.","file":"effector/domain.test.ts"},{"pos":{"line":169,"col":13},"message":"Argument of type 'number' is not assignable to parameter of type 'string'.","file":"effector/domain.test.ts"},{"pos":{"line":174,"col":13},"message":"Argument of type 'number' is not assignable to parameter of type 'string'.","file":"effector/domain.test.ts"},{"pos":{"line":121,"col":11},"message":"No overload matches this call.\n  Overload 1 of 7, '(handler: SyncFn): Effect<string, number, Error>', gave the following error.\n    Argument of type '{ handler: (_: string) => Promise<number>; }' is not assignable to parameter of type 'SyncFn'.\n      Object literal may only specify known properties, and 'handler' does not exist in type 'SyncFn'.\n  Overload 2 of 7, '(config: { name?: string | undefined; handler: SyncFn; sid?: string | undefined; domain?: Domain | undefined; }): Effect<string, number, Error>', gave the following error.\n    Type '(_: string) => Promise<number>' is not assignable to type 'SyncFn'.\n      Type 'Promise<number>' is not assignable to type 'number'.","file":"effector/effect.test.ts"},{"pos":{"line":137,"col":11},"message":"No overload matches this call.\n  Overload 1 of 7, '(handler: AsyncFn): Effect<string, number, Error>', gave the following error.\n    Argument of type '{ handler: (_: string) => number; }' is not assignable to parameter of type 'AsyncFn'.\n      Object literal may only specify known properties, and 'handler' does not exist in type 'AsyncFn'.\n  Overload 2 of 7, '(config: { name?: string | undefined; handler: AsyncFn; sid?: string | undefined; domain?: Domain | undefined; }): Effect<string, number, Error>', gave the following error.\n    Type '(_: string) => number' is not assignable to type 'AsyncFn'.\n      Type 'number' is not assignable to type 'Promise<number>'.","file":"effector/effect.test.ts"},{"pos":{"line":164,"col":15},"message":"No overload matches this call.\n  Overload 1 of 7, '(handler: SyncFn): Effect<string, number, Error>', gave the following error.\n    Argument of type '{ handler(_: string): Promise<string>; }' is not assignable to parameter of type 'SyncFn'.\n      Object literal may only specify known properties, and 'handler' does not exist in type 'SyncFn'.\n  Overload 2 of 7, '(config: { name?: string | undefined; handler: SyncFn; sid?: string | undefined; domain?: Domain | undefined; }): Effect<string, number, Error>', gave the following error.\n    Type '(_: string) => Promise<string>' is not assignable to type 'SyncFn'.\n      Type 'Promise<string>' is not assignable to type 'number'.","file":"effector/effect.test.ts"},{"pos":{"line":181,"col":56},"message":"Type 'string' does not satisfy the constraint 'Function'.","file":"effector/effect.test.ts"},{"pos":{"line":195,"col":43},"message":"Expected 1-2 arguments, but got 0.","file":"effector/effect.test.ts"},{"pos":{"line":203,"col":19},"message":"Expected 1-2 arguments, but got 0.","file":"effector/effect.test.ts"},{"pos":{"line":236,"col":15},"message":"Argument of type 'Effect<number, string, any>' is not assignable to parameter of type '(params: unknown) => unknown'.\n  Types of parameters 'params' and 'params' are incompatible.\n    Type 'unknown' is not assignable to type 'number'.","file":"effector/effect.test.ts"},{"pos":{"line":267,"col":11},"message":"Type 'Event<number>' is not assignable to type 'Event<boolean>'.\n  Type 'number' is not assignable to type 'boolean'.","file":"effector/effect.test.ts"},{"pos":{"line":344,"col":14},"message":"Argument of type 'number' is not assignable to parameter of type 'void'.","file":"effector/effect.test.ts"},{"pos":{"line":356,"col":14},"message":"Argument of type 'number' is not assignable to parameter of type 'void'.","file":"effector/effect.test.ts"},{"pos":{"line":390,"col":5},"message":"Expected 1 arguments, but got 0.","file":"effector/effect.test.ts"},{"pos":{"line":402,"col":10},"message":"Argument of type 'number' is not assignable to parameter of type 'void'.","file":"effector/effect.test.ts"},{"pos":{"line":426,"col":10},"message":"Argument of type 'number' is not assignable to parameter of type 'void'.","file":"effector/effect.test.ts"},{"pos":{"line":463,"col":13},"message":"Type 'Effect<string, string, Error>' is not assignable to type 'Effect<number, number, Error>'.\n  Types of property 'done' are incompatible.\n    Type 'Event<{ params: string; result: string; }>' is not assignable to type 'Event<{ params: number; result: number; }>'.\n      Type '{ params: string; result: string; }' is not assignable to type '{ params: number; result: number; }'.\n        Types of property 'params' are incompatible.\n          Type 'string' is not assignable to type 'number'.","file":"effector/effect.test.ts"},{"pos":{"line":500,"col":7},"message":"Expected 1 arguments, but got 0.","file":"effector/effect.test.ts"},{"pos":{"line":41,"col":9},"message":"Type 'Event<string>' is not assignable to type 'Event<number>'.\n  Type 'string' is not assignable to type 'number'.","file":"effector/event.test.ts"},{"pos":{"line":80,"col":11},"message":"Type 'Event<string>' is not assignable to type 'Event<number>'.","file":"effector/event.test.ts"},{"pos":{"line":138,"col":5},"message":"No overload matches this call.\n  Overload 1 of 2, '(payload: number): number', gave the following error.\n    Argument of type 'string' is not assignable to parameter of type 'number'.\n  Overload 2 of 2, '(this: \"Error: Expected 1 argument, but got 0\", payload?: number | undefined): void', gave the following error.\n    The 'this' context of type 'void' is not assignable to method's 'this' of type '\"Error: Expected 1 argument, but got 0\"'.","file":"effector/event.test.ts"},{"pos":{"line":153,"col":15},"message":"No overload matches this call.\n  Overload 1 of 2, '(payload: void): void', gave the following error.\n    Argument of type 'string' is not assignable to parameter of type 'void'.\n  Overload 2 of 2, '(this: void, payload?: void | undefined): void', gave the following error.\n    Argument of type 'string' is not assignable to parameter of type 'void'.","file":"effector/event.test.ts"},{"pos":{"line":167,"col":37},"message":"Argument of type '(arg: boolean) => string' is not assignable to parameter of type '(_: boolean) => number'.\n  Type 'string' is not assignable to type 'number'.","file":"effector/event.test.ts"},{"pos":{"line":217,"col":3},"message":"The 'this' context of type 'void' is not assignable to method's 'this' of type '\"Error: Expected 1 argument, but got 0\"'.","file":"effector/event.test.ts"},{"pos":{"line":238,"col":3},"message":"The 'this' context of type 'void' is not assignable to method's 'this' of type 'never'.","file":"effector/event.test.ts"},{"pos":{"line":255,"col":9},"message":"Type 'EventCallable<string>' is not assignable to type '(event: number) => unknown'.\n  Types of parameters 'payload' and 'event' are incompatible.\n    Type 'number' is not assignable to type 'string'.","file":"effector/event.test.ts"},{"pos":{"line":269,"col":8},"message":"Argument of type 'EventCallable<string>' is not assignable to parameter of type '(_: number) => number'.\n  Types of parameters 'payload' and '_' are incompatible.\n    Type 'number' is not assignable to type 'string'.","file":"effector/event.test.ts"},{"pos":{"line":282,"col":13},"message":"No overload matches this call.\n  Overload 1 of 2, '(payload: string): string', gave the following error.\n    Argument of type 'number' is not assignable to parameter of type 'string'.\n  Overload 2 of 2, '(this: \"Error: Expected 1 argument, but got 0\", payload?: string | undefined): void', gave the following error.\n    The 'this' context of type 'void' is not assignable to method's 'this' of type '\"Error: Expected 1 argument, but got 0\"'.","file":"effector/event.test.ts"},{"pos":{"line":53,"col":69},"message":"Type 'EventCallable<void>' is missing the following properties from type 'Store<any>': updates, getState, thru, defaultState","file":"effector/fork.test.ts"},{"pos":{"line":93,"col":9},"message":"Type '(map: Map<number, number>) => Map<number, number>' is not assignable to type '(state: Map<number, number>) => Json'.\n  Type 'Map<number, number>' is not assignable to type 'Json'.\n    Type 'Map<number, number>' is not assignable to type '{ [k: string]: Json; }'.\n      Index signature for type 'string' is missing in type 'Map<number, number>'.","file":"effector/fork.test.ts"},{"pos":{"line":97,"col":9},"message":"Type '(jsonMap: Json) => Map<string | number | boolean | Json[] | { [k: string]: Json; } | null | undefined, string | number | boolean | Json[] | { [k: string]: Json; } | null | undefined>' is not assignable to type '(json: Json) => Map<number, number>'.\n  Type 'Map<string | number | boolean | Json[] | { [k: string]: Json; } | null | undefined, string | number | boolean | Json[] | { [k: string]: Json; } | null | undefined>' is not assignable to type 'Map<number, number>'.\n    Type 'string | number | boolean | Json[] | { [k: string]: Json; } | null | undefined' is not assignable to type 'number'.\n      Type 'undefined' is not assignable to type 'number'.","file":"effector/fork.test.ts"},{"pos":{"line":103,"col":26},"message":"No overload matches this call.\n  Overload 1 of 4, '(iterable?: Iterable<readonly [string | number | boolean | Json[] | { [k: string]: Json; } | null | undefined, string | number | boolean | Json[] | { [k: string]: Json; } | null | undefined]> | null | undefined): Map<...>', gave the following error.\n    Argument of type 'Json' is not assignable to parameter of type 'Iterable<readonly [string | number | boolean | Json[] | { [k: string]: Json; } | null | undefined, string | number | boolean | Json[] | { [k: string]: Json; } | null | undefined]> | null | undefined'.\n      Type 'string' is not assignable to type 'Iterable<readonly [string | number | boolean | Json[] | { [k: string]: Json; } | null | undefined, string | number | boolean | Json[] | { [k: string]: Json; } | null | undefined]>'.\n  Overload 2 of 4, '(entries?: readonly (readonly [string | number | boolean | Json[] | { [k: string]: Json; } | null | undefined, string | number | boolean | Json[] | { [k: string]: Json; } | null | undefined])[] | null | undefined): Map<...>', gave the following error.\n    Argument of type 'Json' is not assignable to parameter of type 'readonly (readonly [string | number | boolean | Json[] | { [k: string]: Json; } | null | undefined, string | number | boolean | Json[] | { [k: string]: Json; } | null | undefined])[] | null | undefined'.\n      Type 'string' is not assignable to type 'readonly (readonly [string | number | boolean | Json[] | { [k: string]: Json; } | null | undefined, string | number | boolean | Json[] | { [k: string]: Json; } | null | undefined])[]'.","file":"effector/fork.test.ts"},{"pos":{"line":140,"col":25},"message":"No overload matches this call.\n  Overload 1 of 4, '(iterable?: Iterable<readonly [StoreWritable<number>, number]> | null | undefined): Map<StoreWritable<number>, number>', gave the following error.\n    Argument of type '([StoreWritable<number>, number] | [StoreWritable<string>, string])[]' is not assignable to parameter of type 'Iterable<readonly [StoreWritable<number>, number]>'.\n      The types returned by '[Symbol.iterator]().next(...)' are incompatible between these types.\n        Type 'IteratorResult<[StoreWritable<number>, number] | [StoreWritable<string>, string], any>' is not assignable to type 'IteratorResult<readonly [StoreWritable<number>, number], any>'.\n          Type 'IteratorYieldResult<[StoreWritable<number>, number] | [StoreWritable<string>, string]>' is not assignable to type 'IteratorResult<readonly [StoreWritable<number>, number], any>'.\n            Type 'IteratorYieldResult<[StoreWritable<number>, number] | [StoreWritable<string>, string]>' is not assignable to type 'IteratorYieldResult<readonly [StoreWritable<number>, number]>'.\n              Type '[StoreWritable<number>, number] | [StoreWritable<string>, string]' is not assignable to type 'readonly [StoreWritable<number>, number]'.\n                Type '[StoreWritable<string>, string]' is not assignable to type 'readonly [StoreWritable<number>, number]'.\n                  Type at position 0 in source is not compatible with type at position 0 in target.\n                    The types of '____._' are incompatible between these types.\n                      Type 'string' is not assignable to type 'number'.","file":"effector/fork.test.ts"},{"pos":{"line":227,"col":11},"message":"No overload matches this call.\n  Overload 1 of 2, '(config?: { values?: SerializedState | LegacyMap | StorePair<any>[] | undefined; handlers?: Handlers | undefined; } | undefined): Scope', gave the following error.\n    Type '([StoreWritable<string>, string] | [Store<number>, number] | [StoreWritable<{ nested: { value: number; }; }>, { nested: { value: number; }; }])[]' is not assignable to type 'SerializedState | LegacyMap | StorePair<any>[] | undefined'.\n      Type '([StoreWritable<string>, string] | [Store<number>, number] | [StoreWritable<{ nested: { value: number; }; }>, { nested: { value: number; }; }])[]' is not assignable to type 'StorePair<any>[]'.\n        Type '[StoreWritable<string>, string] | [Store<number>, number] | [StoreWritable<{ nested: { value: number; }; }>, { nested: { value: number; }; }]' is not assignable to type 'StorePair<any>'.\n          Type '[Store<number>, number]' is not assignable to type '[StoreWritable<any>, any]'.\n            Type at position 0 in source is not compatible with type at position 0 in target.\n              Type 'Store<number>' is missing the following properties from type 'StoreWritable<any>': ____, on, off, reset, and 2 more.\n  Overload 2 of 2, '(domain: Domain, config?: { values?: [StoreWritable<any>, any][] | SerializedState | LegacyMap | undefined; handlers?: Handlers | undefined; } | undefined): Scope', gave the following error.\n    Argument of type '{ values: ((string | StoreWritable<string>)[] | (number | Store<number>)[] | (StoreWritable<{ nested: { value: number; }; }> | { nested: { value: number; }; })[])[]; }' is not assignable to parameter of type 'Domain'.\n      Object literal may only specify known properties, and 'values' does not exist in type 'Domain'.","file":"effector/fork.test.ts"},{"pos":{"line":83,"col":5},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<unknown>' is not assignable to type 'Unit<number>'.\n      Types of property '__' are incompatible.\n        Type 'unknown' is not assignable to type 'number'.","file":"effector/forward.test.ts"},{"pos":{"line":102,"col":14},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<string>' is not assignable to type 'Unit<number>'.\n      Types of property '__' are incompatible.\n        Type 'string' is not assignable to type 'number'.","file":"effector/forward.test.ts"},{"pos":{"line":131,"col":14},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<string | number>' is not assignable to type 'Unit<string>'.\n      Types of property '__' are incompatible.\n        Type 'string | number' is not assignable to type 'string'.\n          Type 'number' is not assignable to type 'string'.","file":"effector/forward.test.ts"},{"pos":{"line":145,"col":13},"message":"No overload expects 1 type arguments, but overloads do exist that expect either 0 or 2 type arguments.","file":"effector/forward.test.ts"},{"pos":{"line":154,"col":13},"message":"No overload expects 1 type arguments, but overloads do exist that expect either 0 or 2 type arguments.","file":"effector/forward.test.ts"},{"pos":{"line":171,"col":21},"message":"Type 'string | number' does not satisfy the constraint 'string'.\n  Type 'number' is not assignable to type 'string'.","file":"effector/forward.test.ts"},{"pos":{"line":223,"col":16},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<string>' is not assignable to type 'Unit<void>'.\n      Types of property '__' are incompatible.\n        Type 'string' is not assignable to type 'void'.\n          Type 'EventCallable<string>' is not assignable to type 'UnitTargetable<void>'.\n            Types of property '__' are incompatible.\n              Type 'string' is not assignable to type 'void'.","file":"effector/forward.test.ts"},{"pos":{"line":223,"col":32},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<string>' is not assignable to type 'Unit<void>'.\n      Types of property '__' are incompatible.\n        Type 'string' is not assignable to type 'void'.\n          Type 'EventCallable<string>' is not assignable to type 'UnitTargetable<void>'.\n            Types of property '__' are incompatible.\n              Type 'string' is not assignable to type 'void'.","file":"effector/forward.test.ts"},{"pos":{"line":301,"col":7},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'Event<{ value: { value: string; }; }>' is not assignable to type 'UnitTargetable<unknown> | readonly UnitTargetable<unknown>[]'.\n      Type 'Event<{ value: { value: string; }; }>' is missing the following properties from type 'readonly UnitTargetable<unknown>[]': length, concat, join, slice, and 24 more.","file":"effector/forward.test.ts"},{"pos":{"line":338,"col":11},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<number>' is not assignable to type 'Unit<string>'.\n      Types of property '__' are incompatible.\n        Type 'number' is not assignable to type 'string'.","file":"effector/forward.test.ts"},{"pos":{"line":356,"col":11},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<string>' is not assignable to type 'Unit<number>'.\n      Type 'EventCallable<string>' is not assignable to type 'UnitTargetable<number>'.\n        Types of property '__' are incompatible.\n          Type 'string' is not assignable to type 'number'.","file":"effector/forward.test.ts"},{"pos":{"line":358,"col":16},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<string>' is not assignable to type 'Unit<number>'.\n      Type 'EventCallable<string>' is not assignable to type 'UnitTargetable<number>'.\n        Types of property '__' are incompatible.\n          Type 'string' is not assignable to type 'number'.","file":"effector/forward.test.ts"},{"pos":{"line":401,"col":11},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<string>[]' is missing the following properties from type 'Unit<number>': kind, __","file":"effector/forward.test.ts"},{"pos":{"line":418,"col":11},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type '(EventCallable<number> | EventCallable<string>)[]' is missing the following properties from type 'Unit<string>': kind, __","file":"effector/forward.test.ts"},{"pos":{"line":66,"col":35},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":68,"col":35},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":70,"col":35},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":72,"col":35},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":74,"col":35},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":116,"col":35},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":118,"col":35},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":120,"col":35},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":122,"col":35},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":187,"col":49},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":189,"col":49},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":191,"col":49},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":193,"col":49},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":195,"col":49},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":197,"col":49},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":199,"col":49},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":201,"col":49},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":203,"col":49},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":205,"col":49},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":268,"col":49},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":270,"col":49},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":272,"col":49},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":274,"col":49},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":276,"col":49},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":278,"col":49},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":280,"col":49},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":282,"col":49},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":349,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":351,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":353,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":355,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":357,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":359,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":361,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":363,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":365,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":367,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":369,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":371,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":373,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":375,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":377,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":379,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":381,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":383,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":385,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":387,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":486,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":488,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":490,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":492,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":494,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":496,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":498,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":500,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":502,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":504,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":506,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":508,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":510,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":512,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":514,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":516,"col":43},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":643,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":645,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":647,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":649,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":651,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":653,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":655,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":657,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":659,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":661,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":663,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":665,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":667,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":669,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":671,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":673,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":675,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":677,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":679,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":681,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":683,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":685,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":687,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":689,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":691,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":693,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":695,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":697,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":699,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":701,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":703,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":705,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":707,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":709,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":711,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":713,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":715,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":717,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":719,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":721,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":904,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":906,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":908,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":910,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":912,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":914,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":916,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":918,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":920,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":922,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":924,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":926,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":928,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":930,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":932,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":934,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":936,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":938,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":940,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":942,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":944,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":946,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":948,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":950,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":952,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":954,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":956,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":958,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":960,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":962,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":964,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":966,"col":57},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1095,"col":38},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1097,"col":38},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1099,"col":38},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1101,"col":38},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1103,"col":38},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1105,"col":38},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1107,"col":38},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1109,"col":38},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1164,"col":38},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1166,"col":38},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1168,"col":38},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1170,"col":38},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1172,"col":38},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1174,"col":38},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1176,"col":38},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1178,"col":38},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1249,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1251,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1253,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1255,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1257,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1259,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1261,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1263,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1265,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1267,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1269,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1271,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1273,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1275,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1277,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1279,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1374,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1376,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1378,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1380,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1382,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1384,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1386,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1388,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1390,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1392,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1394,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1396,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1398,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1400,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1402,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1404,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1483,"col":30},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1485,"col":30},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<AB>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1487,"col":30},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1489,"col":30},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1491,"col":30},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<AB>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1493,"col":30},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1537,"col":35},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1539,"col":35},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: number; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1541,"col":35},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1543,"col":35},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: number; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1602,"col":44},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1604,"col":44},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<AB>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1606,"col":44},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1608,"col":44},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1610,"col":44},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<AB>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1612,"col":44},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1614,"col":44},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1616,"col":44},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<AB>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1618,"col":44},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1620,"col":44},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1622,"col":44},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<AB>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1624,"col":44},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1693,"col":54},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1695,"col":54},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: number; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1697,"col":54},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: number; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1699,"col":54},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1701,"col":54},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: number; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1703,"col":54},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: number; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1705,"col":54},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1707,"col":54},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: number; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1709,"col":54},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1711,"col":54},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: number; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1774,"col":38},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1776,"col":38},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1778,"col":38},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1780,"col":38},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1782,"col":38},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1784,"col":38},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1786,"col":38},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1788,"col":38},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1859,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1861,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1863,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1865,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1867,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1869,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1871,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1873,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1875,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1877,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1879,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1881,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1883,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1885,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1887,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1889,"col":52},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1968,"col":30},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1970,"col":30},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1972,"col":30},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":1974,"col":30},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":2033,"col":44},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":2035,"col":44},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":2037,"col":44},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":2039,"col":44},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":2041,"col":44},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":2043,"col":44},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":2045,"col":44},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":2047,"col":44},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/generated/guard.test.ts"},{"pos":{"line":122,"col":17},"message":"Argument of type '{ source: EventCallable<number>; target: EventCallable<string>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":124,"col":17},"message":"Argument of type '{ source: EventCallable<number>; target: EventCallable<string | boolean>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | boolean; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | boolean; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":130,"col":17},"message":"Argument of type '{ source: EventCallable<number>; target: (EventCallable<void> | EventCallable<string | boolean>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | boolean | void; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | boolean | void; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":132,"col":17},"message":"Argument of type '{ source: EventCallable<number>; target: (EventCallable<void> | EventCallable<string>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | void; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | void; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":142,"col":17},"message":"Argument of type '{ source: EventCallable<string>; target: EventCallable<number>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: string; targetType: number; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: string; targetType: number; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":144,"col":17},"message":"Argument of type '{ source: EventCallable<string>; target: (EventCallable<void> | EventCallable<number>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: string; targetType: number | void; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: string; targetType: number | void; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":154,"col":17},"message":"Argument of type '{ clock: EventCallable<number>; target: EventCallable<string>[]; }' is not assignable to parameter of type '{ error: \"clock should extend target type\"; targets: { clockType: number; targetType: string; }[]; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"clock should extend target type\"; targets: { clockType: number; targetType: string; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":156,"col":17},"message":"Argument of type '{ clock: EventCallable<number>; target: EventCallable<string | boolean>[]; }' is not assignable to parameter of type '{ error: \"clock should extend target type\"; targets: { clockType: number; targetType: string | boolean; }[]; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"clock should extend target type\"; targets: { clockType: number; targetType: string | boolean; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":162,"col":17},"message":"Argument of type '{ clock: EventCallable<number>; target: (EventCallable<void> | EventCallable<string | boolean>)[]; }' is not assignable to parameter of type '{ error: \"clock should extend target type\"; targets: { clockType: number; targetType: string | boolean | void; }[]; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"clock should extend target type\"; targets: { clockType: number; targetType: string | boolean | void; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":164,"col":17},"message":"Argument of type '{ clock: EventCallable<number>; target: (EventCallable<void> | EventCallable<string>)[]; }' is not assignable to parameter of type '{ error: \"clock should extend target type\"; targets: { clockType: number; targetType: string | void; }[]; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"clock should extend target type\"; targets: { clockType: number; targetType: string | void; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":174,"col":17},"message":"Argument of type '{ clock: EventCallable<string>; target: EventCallable<number>[]; }' is not assignable to parameter of type '{ error: \"clock should extend target type\"; targets: { clockType: string; targetType: number; }[]; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"clock should extend target type\"; targets: { clockType: string; targetType: number; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":176,"col":17},"message":"Argument of type '{ clock: EventCallable<string>; target: (EventCallable<void> | EventCallable<number>)[]; }' is not assignable to parameter of type '{ error: \"clock should extend target type\"; targets: { clockType: string; targetType: number | void; }[]; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"clock should extend target type\"; targets: { clockType: string; targetType: number | void; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":186,"col":17},"message":"Argument of type '{ source: EventCallable<number>; clock: EventCallable<number>; target: EventCallable<string>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":188,"col":17},"message":"Argument of type '{ source: EventCallable<number>; clock: EventCallable<number>; target: EventCallable<string | boolean>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | boolean; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | boolean; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":194,"col":17},"message":"Argument of type '{ source: EventCallable<number>; clock: EventCallable<number>; target: (EventCallable<void> | EventCallable<string | boolean>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | boolean | void; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | boolean | void; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":196,"col":17},"message":"Argument of type '{ source: EventCallable<number>; clock: EventCallable<number>; target: (EventCallable<void> | EventCallable<string>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | void; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | void; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":206,"col":17},"message":"Argument of type '{ source: EventCallable<number>; clock: EventCallable<string>; target: EventCallable<string>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":208,"col":17},"message":"Argument of type '{ source: EventCallable<number>; clock: EventCallable<string>; target: EventCallable<string | boolean>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | boolean; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | boolean; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":214,"col":17},"message":"Argument of type '{ source: EventCallable<number>; clock: EventCallable<string>; target: (EventCallable<void> | EventCallable<string | boolean>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | boolean | void; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | boolean | void; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":216,"col":17},"message":"Argument of type '{ source: EventCallable<number>; clock: EventCallable<string>; target: (EventCallable<void> | EventCallable<string>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | void; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | void; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":226,"col":17},"message":"Argument of type '{ source: EventCallable<string>; clock: EventCallable<number>; target: EventCallable<number>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: string; targetType: number; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: string; targetType: number; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":228,"col":17},"message":"Argument of type '{ source: EventCallable<string>; clock: EventCallable<number>; target: (EventCallable<void> | EventCallable<number>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: string; targetType: number | void; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: string; targetType: number | void; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":238,"col":17},"message":"Argument of type '{ source: EventCallable<string>; clock: EventCallable<string>; target: EventCallable<number>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: string; targetType: number; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: string; targetType: number; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":240,"col":17},"message":"Argument of type '{ source: EventCallable<string>; clock: EventCallable<string>; target: (EventCallable<void> | EventCallable<number>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: string; targetType: number | void; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: string; targetType: number | void; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":419,"col":17},"message":"Argument of type '{ source: EventCallable<number>; target: EventCallable<string>[]; fn: (src: number) => number; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":421,"col":17},"message":"Argument of type '{ source: EventCallable<number>; target: EventCallable<string | boolean>[]; fn: (src: number) => number; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | boolean; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | boolean; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":427,"col":17},"message":"Argument of type '{ source: EventCallable<number>; target: (EventCallable<void> | EventCallable<string | boolean>)[]; fn: (src: number) => number; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | boolean | void; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | boolean | void; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":429,"col":17},"message":"Argument of type '{ source: EventCallable<number>; target: (EventCallable<void> | EventCallable<string>)[]; fn: (src: number) => number; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | void; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | void; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":439,"col":17},"message":"Argument of type '{ source: EventCallable<string>; target: EventCallable<number>[]; fn: (src: string) => string; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: number; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: number; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":441,"col":17},"message":"Argument of type '{ source: EventCallable<string>; target: (EventCallable<void> | EventCallable<number>)[]; fn: (src: string) => string; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: number | void; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: number | void; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":451,"col":17},"message":"Argument of type '{ clock: EventCallable<number>; target: EventCallable<string>[]; fn: (clk: number) => number; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string; }[]; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":453,"col":17},"message":"Argument of type '{ clock: EventCallable<number>; target: EventCallable<string | boolean>[]; fn: (clk: number) => number; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | boolean; }[]; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | boolean; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":459,"col":17},"message":"Argument of type '{ clock: EventCallable<number>; target: (EventCallable<void> | EventCallable<string | boolean>)[]; fn: (clk: number) => number; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | boolean | void; }[]; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | boolean | void; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":461,"col":17},"message":"Argument of type '{ clock: EventCallable<number>; target: (EventCallable<void> | EventCallable<string>)[]; fn: (clk: number) => number; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | void; }[]; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | void; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":471,"col":17},"message":"Argument of type '{ clock: EventCallable<string>; target: EventCallable<number>[]; fn: (clk: string) => string; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: number; }[]; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: number; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":473,"col":17},"message":"Argument of type '{ clock: EventCallable<string>; target: (EventCallable<void> | EventCallable<number>)[]; fn: (clk: string) => string; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: number | void; }[]; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: number | void; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":483,"col":17},"message":"Argument of type '{ source: EventCallable<number>; clock: EventCallable<number>; target: EventCallable<string>[]; fn: (src: number, clk: number) => number; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":485,"col":17},"message":"Argument of type '{ source: EventCallable<number>; clock: EventCallable<number>; target: EventCallable<string | boolean>[]; fn: (src: number, clk: number) => number; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | boolean; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | boolean; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":491,"col":17},"message":"Argument of type '{ source: EventCallable<number>; clock: EventCallable<number>; target: (EventCallable<void> | EventCallable<string | boolean>)[]; fn: (src: number, clk: number) => number; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | boolean | void; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | boolean | void; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":493,"col":17},"message":"Argument of type '{ source: EventCallable<number>; clock: EventCallable<number>; target: (EventCallable<void> | EventCallable<string>)[]; fn: (src: number, clk: number) => number; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | void; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | void; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":503,"col":17},"message":"Argument of type '{ source: EventCallable<number>; clock: EventCallable<string>; target: EventCallable<number>[]; fn: (src: number, clk: string) => string; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: number; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: number; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":505,"col":17},"message":"Argument of type '{ source: EventCallable<number>; clock: EventCallable<string>; target: (EventCallable<void> | EventCallable<number>)[]; fn: (src: number, clk: string) => string; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: number | void; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: number | void; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":515,"col":17},"message":"Argument of type '{ source: EventCallable<string>; clock: EventCallable<number>; target: EventCallable<number>[]; fn: (src: string, clk: number) => string; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: number; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: number; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":517,"col":17},"message":"Argument of type '{ source: EventCallable<string>; clock: EventCallable<number>; target: (EventCallable<void> | EventCallable<number>)[]; fn: (src: string, clk: number) => string; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: number | void; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: number | void; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":527,"col":17},"message":"Argument of type '{ source: EventCallable<string>; clock: EventCallable<string>; target: EventCallable<number>[]; fn: (src: string, clk: string) => string; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: number; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: number; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":529,"col":17},"message":"Argument of type '{ source: EventCallable<string>; clock: EventCallable<string>; target: (EventCallable<void> | EventCallable<number>)[]; fn: (src: string, clk: string) => string; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: number | void; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: number | void; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":634,"col":17},"message":"Argument of type '{ source: EventCallable<number>; target: EventCallable<string>[]; fn: (src: number) => number; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":636,"col":17},"message":"Argument of type '{ source: EventCallable<number>; target: EventCallable<string | boolean>[]; fn: (src: number) => number; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | boolean; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | boolean; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":642,"col":17},"message":"Argument of type '{ source: EventCallable<number>; target: (EventCallable<void> | EventCallable<string | boolean>)[]; fn: (src: number) => number; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | boolean | void; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | boolean | void; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":644,"col":17},"message":"Argument of type '{ source: EventCallable<number>; target: (EventCallable<void> | EventCallable<string>)[]; fn: (src: number) => number; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | void; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | void; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":654,"col":17},"message":"Argument of type '{ clock: EventCallable<number>; target: EventCallable<string>[]; fn: (clk: number) => number; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string; }[]; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":656,"col":17},"message":"Argument of type '{ clock: EventCallable<number>; target: EventCallable<string | boolean>[]; fn: (clk: number) => number; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | boolean; }[]; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | boolean; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":662,"col":17},"message":"Argument of type '{ clock: EventCallable<number>; target: (EventCallable<void> | EventCallable<string | boolean>)[]; fn: (clk: number) => number; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | boolean | void; }[]; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | boolean | void; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":664,"col":17},"message":"Argument of type '{ clock: EventCallable<number>; target: (EventCallable<void> | EventCallable<string>)[]; fn: (clk: number) => number; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | void; }[]; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | void; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":674,"col":17},"message":"Argument of type '{ source: EventCallable<number>; clock: EventCallable<number>; target: EventCallable<string>[]; fn: (src: number, clk: number) => number; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":676,"col":17},"message":"Argument of type '{ source: EventCallable<number>; clock: EventCallable<number>; target: EventCallable<string | boolean>[]; fn: (src: number, clk: number) => number; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | boolean; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | boolean; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":682,"col":17},"message":"Argument of type '{ source: EventCallable<number>; clock: EventCallable<number>; target: (EventCallable<void> | EventCallable<string | boolean>)[]; fn: (src: number, clk: number) => number; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | boolean | void; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | boolean | void; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":684,"col":17},"message":"Argument of type '{ source: EventCallable<number>; clock: EventCallable<number>; target: (EventCallable<void> | EventCallable<string>)[]; fn: (src: number, clk: number) => number; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | void; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: number; targetType: string | void; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":694,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: number, clk: string) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: number, clk: string) => any'.\n    Types of parameters 'clk' and 'clk' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":696,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: number, clk: string) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: number, clk: string) => any'.\n    Types of parameters 'clk' and 'clk' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":698,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: number, clk: string) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: number, clk: string) => any'.\n    Types of parameters 'clk' and 'clk' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":700,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: number, clk: string) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: number, clk: string) => any'.\n    Types of parameters 'clk' and 'clk' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":702,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: number, clk: string) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: number, clk: string) => any'.\n    Types of parameters 'clk' and 'clk' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":704,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: number, clk: string) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: number, clk: string) => any'.\n    Types of parameters 'clk' and 'clk' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":706,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: number, clk: string) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: number, clk: string) => any'.\n    Types of parameters 'clk' and 'clk' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":708,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: number, clk: string) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: number, clk: string) => any'.\n    Types of parameters 'clk' and 'clk' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":710,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: number, clk: string) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: number, clk: string) => any'.\n    Types of parameters 'clk' and 'clk' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":712,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: number, clk: string) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: number, clk: string) => any'.\n    Types of parameters 'clk' and 'clk' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":714,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: number, clk: string) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: number, clk: string) => any'.\n    Types of parameters 'clk' and 'clk' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":716,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: number, clk: string) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: number, clk: string) => any'.\n    Types of parameters 'clk' and 'clk' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":718,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: number, clk: string) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: number, clk: string) => any'.\n    Types of parameters 'clk' and 'clk' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":720,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: number, clk: string) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: number, clk: string) => any'.\n    Types of parameters 'clk' and 'clk' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":722,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: number, clk: string) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: number, clk: string) => any'.\n    Types of parameters 'clk' and 'clk' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":724,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: number, clk: string) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: number, clk: string) => any'.\n    Types of parameters 'clk' and 'clk' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":726,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: number, clk: string) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: number, clk: string) => any'.\n    Types of parameters 'clk' and 'clk' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":728,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: number, clk: string) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: number, clk: string) => any'.\n    Types of parameters 'clk' and 'clk' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":730,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: number, clk: string) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: number, clk: string) => any'.\n    Types of parameters 'clk' and 'clk' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":732,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: number, clk: string) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: number, clk: string) => any'.\n    Types of parameters 'clk' and 'clk' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":734,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: string, clk: number) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: string, clk: number) => any'.\n    Types of parameters 'src' and 'src' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":736,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: string, clk: number) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: string, clk: number) => any'.\n    Types of parameters 'src' and 'src' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":738,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: string, clk: number) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: string, clk: number) => any'.\n    Types of parameters 'src' and 'src' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":740,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: string, clk: number) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: string, clk: number) => any'.\n    Types of parameters 'src' and 'src' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":742,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: string, clk: number) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: string, clk: number) => any'.\n    Types of parameters 'src' and 'src' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":744,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: string, clk: number) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: string, clk: number) => any'.\n    Types of parameters 'src' and 'src' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":746,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: string, clk: number) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: string, clk: number) => any'.\n    Types of parameters 'src' and 'src' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":748,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: string, clk: number) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: string, clk: number) => any'.\n    Types of parameters 'src' and 'src' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":750,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: string, clk: number) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: string, clk: number) => any'.\n    Types of parameters 'src' and 'src' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":752,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: string, clk: number) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: string, clk: number) => any'.\n    Types of parameters 'src' and 'src' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":754,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: string, clk: number) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: string, clk: number) => any'.\n    Types of parameters 'src' and 'src' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":756,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: string, clk: number) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: string, clk: number) => any'.\n    Types of parameters 'src' and 'src' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":758,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: string, clk: number) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: string, clk: number) => any'.\n    Types of parameters 'src' and 'src' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":760,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: string, clk: number) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: string, clk: number) => any'.\n    Types of parameters 'src' and 'src' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":762,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: string, clk: number) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: string, clk: number) => any'.\n    Types of parameters 'src' and 'src' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":764,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: string, clk: number) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: string, clk: number) => any'.\n    Types of parameters 'src' and 'src' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":766,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: string, clk: number) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: string, clk: number) => any'.\n    Types of parameters 'src' and 'src' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":768,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: string, clk: number) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: string, clk: number) => any'.\n    Types of parameters 'src' and 'src' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":770,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: string, clk: number) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: string, clk: number) => any'.\n    Types of parameters 'src' and 'src' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":772,"col":65},"message":"Type '(src: number, clk: number) => number' is not assignable to type '((src: string, clk: number) => any) & ((src: number, clk: number) => number)'.\n  Type '(src: number, clk: number) => number' is not assignable to type '(src: string, clk: number) => any'.\n    Types of parameters 'src' and 'src' are incompatible.\n      Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1046,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: EventCallable<[number]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1047,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: EventCallable<[number, string]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1048,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: (EventCallable<[number]> | EventCallable<[number, string]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string] | [number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string] | [number]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1049,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>, StoreWritable<string>]; target: EventCallable<[number]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [number]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1055,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: EventCallable<[number]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1056,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: EventCallable<[number, string]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1057,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: (EventCallable<[number]> | EventCallable<...>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string] | [number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string] | [number]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1058,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>, StoreWritable<string>]; clock: EventCallable<number>; target: EventCallable<[number]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [number]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1087,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; target: EventCallable<AS>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: AS; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: AS; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1089,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; target: EventCallable<ABN>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1097,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; target: (EventCallable<AS> | EventCallable<ABN>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: AS | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: AS | ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1103,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: EventCallable<[string]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1105,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: EventCallable<[number, number]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1107,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: (EventCallable<[number]> | EventCallable<[string]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [string] | [number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [string] | [number]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1109,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: (EventCallable<[number]> | EventCallable<[number, number]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number] | [number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number] | [number]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1111,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: (EventCallable<[string]> | EventCallable<[number, number]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number] | [string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number] | [string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1113,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: (EventCallable<[string]> | EventCallable<[number, string]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [string] | [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [string] | [number, string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1115,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: (EventCallable<[number, string]> | EventCallable<[number, number]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number] | [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number] | [number, string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1117,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: (EventCallable<[string]> | EventCallable<[number, number]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number] | [string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number] | [string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1119,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>, StoreWritable<string>]; target: EventCallable<[string]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1121,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>, StoreWritable<string>]; target: EventCallable<[number, number]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [number, number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [number, number]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1123,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>, StoreWritable<string>]; target: (EventCallable<[number]> | EventCallable<[string]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [string] | [number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [string] | [number]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1125,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>, StoreWritable<string>]; target: (EventCallable<[number]> | EventCallable<[number, number]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [number, number] | [number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [number, number] | [number]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1127,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>, StoreWritable<string>]; target: (EventCallable<[string]> | EventCallable<[number, number]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [number, number] | [string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [number, number] | [string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1133,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>, StoreWritable<string>]; target: (EventCallable<[string]> | EventCallable<[number, number]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [number, number] | [string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [number, number] | [string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1135,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; clock: EventCallable<number>; target: EventCallable<AS>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: AS; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: AS; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1137,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; clock: EventCallable<number>; target: EventCallable<ABN>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1145,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; clock: EventCallable<number>; target: (EventCallable<AS> | EventCallable<...>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: AS | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: AS | ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1151,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: EventCallable<[string]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1153,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: EventCallable<[number, number]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1155,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: (EventCallable<[number]> | EventCallable<...>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [string] | [number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [string] | [number]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1157,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: (EventCallable<[number]> | EventCallable<...>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number] | [number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number] | [number]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1159,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: (EventCallable<[string]> | EventCallable<...>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number] | [string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number] | [string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1161,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: (EventCallable<[string]> | EventCallable<...>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [string] | [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [string] | [number, string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1163,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: (EventCallable<[number, string]> | EventCallable<...>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number] | [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number] | [number, string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1165,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: (EventCallable<[string]> | EventCallable<...>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number] | [string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number] | [string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1167,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>, StoreWritable<string>]; clock: EventCallable<number>; target: EventCallable<[string]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1169,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>, StoreWritable<string>]; clock: EventCallable<number>; target: EventCallable<[number, number]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [number, number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [number, number]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1171,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>, StoreWritable<string>]; clock: EventCallable<number>; target: (EventCallable<[number]> | EventCallable<...>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [string] | [number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [string] | [number]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1173,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>, StoreWritable<string>]; clock: EventCallable<number>; target: (EventCallable<[number]> | EventCallable<...>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [number, number] | [number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [number, number] | [number]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1175,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>, StoreWritable<string>]; clock: EventCallable<number>; target: (EventCallable<[string]> | EventCallable<...>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [number, number] | [string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [number, number] | [string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1181,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>, StoreWritable<string>]; clock: EventCallable<number>; target: (EventCallable<[string]> | EventCallable<...>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [number, number] | [string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [number, number] | [string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1264,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: EventCallable<AN>[]; fn: ([a, b]: (string | number)[]) => { a: string | number; b: string | number; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1265,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: EventCallable<AB>[]; fn: ([a, b]: (string | number)[]) => { a: string | number; b: string | number; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AB; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AB; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1266,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: (EventCallable<AN> | EventCallable<AB>)[]; fn: ([a, b]: (string | number)[]) => { ...; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1273,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: EventCallable<AN>[]; fn: ([a, b]: (string | number)[]) => { ...; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1274,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: EventCallable<AB>[]; fn: ([a, b]: (string | number)[]) => { ...; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AB; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AB; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1275,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: (EventCallable<AN> | EventCallable<...>)[]; fn: ([a, b]: (string | number)[]) => { ...; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1301,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; target: EventCallable<AS>[]; fn: ({ a, b }: { a: number; b: string; }) => { a: number; b: string; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1303,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; target: EventCallable<ABN>[]; fn: ({ a, b }: { a: number; b: string; }) => { a: number; b: string; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1311,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; target: (EventCallable<AS> | EventCallable<ABN>)[]; fn: ({ a, b }: { ...; }) => { ...; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS | ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1317,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: EventCallable<AS>[]; fn: ([a, b]: (string | number)[]) => { a: string | number; b: string | number; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AS; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AS; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1319,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: EventCallable<ABN>[]; fn: ([a, b]: (string | number)[]) => { a: string | number; b: string | number; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1321,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: (EventCallable<AN> | EventCallable<AS>)[]; fn: ([a, b]: (string | number)[]) => { ...; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AN | AS; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AN | AS; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1323,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: (EventCallable<AN> | EventCallable<ABN>)[]; fn: ([a, b]: (string | number)[]) => { ...; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1325,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: (EventCallable<AS> | EventCallable<AB>)[]; fn: ([a, b]: (string | number)[]) => { ...; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AS | AB; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AS | AB; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1327,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: (EventCallable<AS> | EventCallable<ABN>)[]; fn: ([a, b]: (string | number)[]) => { ...; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AS | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AS | ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1329,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: (EventCallable<AB> | EventCallable<ABN>)[]; fn: ([a, b]: (string | number)[]) => { ...; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AB | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AB | ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1331,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: (EventCallable<AS> | EventCallable<AB>)[]; fn: ([a, b]: (string | number)[]) => { ...; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AS | AB; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AS | AB; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1333,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>, StoreWritable<string>]; target: EventCallable<AS>[]; fn: ([a, b]: readonly [number, string]) => { a: number; b: string; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1335,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>, StoreWritable<string>]; target: EventCallable<ABN>[]; fn: ([a, b]: readonly [number, string]) => { a: number; b: string; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1343,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>, StoreWritable<string>]; target: (EventCallable<AS> | EventCallable<ABN>)[]; fn: ([a, b]: readonly [...]) => { ...; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS | ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1349,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; clock: EventCallable<number>; target: EventCallable<AS>[]; fn: ({ a, b }: { ...; }) => { ...; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1351,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; clock: EventCallable<number>; target: EventCallable<ABN>[]; fn: ({ a, b }: { ...; }) => { ...; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1359,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; clock: EventCallable<number>; target: (EventCallable<AS> | EventCallable<...>)[]; fn: ({ a, b }: { ...; }) => { ...; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS | ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1365,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: EventCallable<AS>[]; fn: ([a, b]: (string | number)[]) => { ...; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AS; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AS; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1367,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: EventCallable<ABN>[]; fn: ([a, b]: (string | number)[]) => { ...; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1369,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: (EventCallable<AN> | EventCallable<...>)[]; fn: ([a, b]: (string | number)[]) => { ...; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AN | AS; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AN | AS; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1371,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: (EventCallable<AN> | EventCallable<...>)[]; fn: ([a, b]: (string | number)[]) => { ...; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1373,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: (EventCallable<AS> | EventCallable<...>)[]; fn: ([a, b]: (string | number)[]) => { ...; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AS | AB; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AS | AB; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1375,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: (EventCallable<AS> | EventCallable<...>)[]; fn: ([a, b]: (string | number)[]) => { ...; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AS | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AS | ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1377,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: (EventCallable<AB> | EventCallable<...>)[]; fn: ([a, b]: (string | number)[]) => { ...; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AB | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AB | ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1379,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: (EventCallable<AS> | EventCallable<...>)[]; fn: ([a, b]: (string | number)[]) => { ...; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AS | AB; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string | number; b: string | number; }; targetType: AS | AB; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1381,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>, StoreWritable<string>]; clock: EventCallable<number>; target: EventCallable<AS>[]; fn: ([a, b]: readonly [...]) => { ...; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1383,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>, StoreWritable<string>]; clock: EventCallable<number>; target: EventCallable<ABN>[]; fn: ([a, b]: readonly [...]) => { ...; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1391,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>, StoreWritable<string>]; clock: EventCallable<number>; target: (EventCallable<AS> | EventCallable<...>)[]; fn: ([a, b]: readonly [...]) => { ...; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS | ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1464,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; target: EventCallable<[number]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1467,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; clock: EventCallable<number>; target: EventCallable<[number]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1483,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; target: EventCallable<AS>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AS; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AS; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1485,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; target: EventCallable<ABN>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1487,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; target: EventCallable<AB>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AB; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AB; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1495,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; target: (EventCallable<AS> | EventCallable<AB>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AS | AB; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AS | AB; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1497,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; target: (EventCallable<AS> | EventCallable<ABN>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AS | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AS | ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1499,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; target: (EventCallable<AB> | EventCallable<ABN>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AB | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AB | ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1501,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; target: (EventCallable<AS> | EventCallable<AB>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AS | AB; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AS | AB; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1503,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; target: EventCallable<[string]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1505,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; target: EventCallable<[number, string]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1507,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; target: EventCallable<[number, number]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1509,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; target: (EventCallable<[number]> | EventCallable<[string]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [string] | [number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [string] | [number]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1511,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; target: (EventCallable<[number]> | EventCallable<[number, string]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, string] | [number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, string] | [number]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1513,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; target: (EventCallable<[number]> | EventCallable<[number, number]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number] | [number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number] | [number]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1515,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; target: (EventCallable<[string]> | EventCallable<[number, number]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number] | [string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number] | [string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1517,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; target: (EventCallable<[string]> | EventCallable<[number, string]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [string] | [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [string] | [number, string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1519,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; target: (EventCallable<[number, string]> | EventCallable<[number, number]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number] | [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number] | [number, string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1521,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; target: (EventCallable<[string]> | EventCallable<[number, number]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number] | [string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number] | [string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1523,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>]; target: EventCallable<[string]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1525,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>]; target: EventCallable<[number, string]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [number, string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1527,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>]; target: EventCallable<[number, number]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [number, number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [number, number]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1535,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>]; target: (EventCallable<[string]> | EventCallable<[number, number]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [number, number] | [string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [number, number] | [string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1537,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>]; target: (EventCallable<[string]> | EventCallable<[number, string]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [string] | [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [string] | [number, string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1539,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>]; target: (EventCallable<[number, string]> | EventCallable<[number, number]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [number, number] | [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [number, number] | [number, string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1541,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>]; target: (EventCallable<[string]> | EventCallable<[number, number]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [number, number] | [string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [number, number] | [string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1543,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; clock: EventCallable<number>; target: EventCallable<AS>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AS; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AS; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1545,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; clock: EventCallable<number>; target: EventCallable<ABN>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1547,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; clock: EventCallable<number>; target: EventCallable<AB>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AB; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AB; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1555,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; clock: EventCallable<number>; target: (EventCallable<AS> | EventCallable<AB>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AS | AB; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AS | AB; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1557,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; clock: EventCallable<number>; target: (EventCallable<AS> | EventCallable<ABN>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AS | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AS | ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1559,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; clock: EventCallable<number>; target: (EventCallable<AB> | EventCallable<ABN>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AB | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AB | ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1561,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; clock: EventCallable<number>; target: (EventCallable<AS> | EventCallable<AB>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AS | AB; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AS | AB; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1563,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; clock: EventCallable<number>; target: EventCallable<[string]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1565,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; clock: EventCallable<number>; target: EventCallable<[number, string]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1567,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; clock: EventCallable<number>; target: EventCallable<[number, number]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1569,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; clock: EventCallable<number>; target: (EventCallable<[number]> | EventCallable<[string]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [string] | [number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [string] | [number]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1571,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; clock: EventCallable<number>; target: (EventCallable<[number]> | EventCallable<[number, string]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, string] | [number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, string] | [number]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1573,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; clock: EventCallable<number>; target: (EventCallable<[number]> | EventCallable<[number, number]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number] | [number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number] | [number]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1575,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; clock: EventCallable<number>; target: (EventCallable<[string]> | EventCallable<[number, number]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number] | [string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number] | [string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1577,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; clock: EventCallable<number>; target: (EventCallable<[string]> | EventCallable<[number, string]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [string] | [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [string] | [number, string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1579,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; clock: EventCallable<number>; target: (EventCallable<[number, string]> | EventCallable<[number, number]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number] | [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number] | [number, string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1581,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; clock: EventCallable<number>; target: (EventCallable<[string]> | EventCallable<[number, number]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number] | [string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number] | [string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1583,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>]; clock: EventCallable<number>; target: EventCallable<[string]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1585,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>]; clock: EventCallable<number>; target: EventCallable<[number, string]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [number, string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1587,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>]; clock: EventCallable<number>; target: EventCallable<[number, number]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [number, number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [number, number]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1595,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>]; clock: EventCallable<number>; target: (EventCallable<[string]> | EventCallable<[number, number]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [number, number] | [string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [number, number] | [string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1597,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>]; clock: EventCallable<number>; target: (EventCallable<[string]> | EventCallable<[number, string]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [string] | [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [string] | [number, string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1599,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>]; clock: EventCallable<number>; target: (EventCallable<[number, string]> | EventCallable<[number, number]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [number, number] | [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [number, number] | [number, string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1601,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>]; clock: EventCallable<number>; target: (EventCallable<[string]> | EventCallable<[number, number]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [number, number] | [string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [number, number] | [string]; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1738,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; target: EventCallable<AS>[]; fn: ({ a }: { a: number; }) => { a: number; b: string; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1740,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; target: EventCallable<ABN>[]; fn: ({ a }: { a: number; }) => { a: number; b: string; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1748,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; target: (EventCallable<AS> | EventCallable<ABN>)[]; fn: ({ a }: { a: number; }) => { a: number; b: string; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS | ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1754,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; target: EventCallable<AS>[]; fn: ([a]: number[]) => { a: number; b: string; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1756,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; target: EventCallable<ABN>[]; fn: ([a]: number[]) => { a: number; b: string; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1764,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; target: (EventCallable<AS> | EventCallable<ABN>)[]; fn: ([a]: number[]) => { a: number; b: string; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS | ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1770,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>]; target: EventCallable<AS>[]; fn: ([a]: readonly [number]) => { a: number; b: string; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1772,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>]; target: EventCallable<ABN>[]; fn: ([a]: readonly [number]) => { a: number; b: string; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1780,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>]; target: (EventCallable<AS> | EventCallable<ABN>)[]; fn: ([a]: readonly [number]) => { a: number; b: string; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS | ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1786,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; clock: EventCallable<number>; target: EventCallable<AS>[]; fn: ({ a }: { a: number; }) => { a: number; b: string; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1788,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; clock: EventCallable<number>; target: EventCallable<ABN>[]; fn: ({ a }: { a: number; }) => { a: number; b: string; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1796,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; clock: EventCallable<number>; target: (EventCallable<AS> | EventCallable<ABN>)[]; fn: ({ a }: { ...; }) => { ...; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS | ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1802,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; clock: EventCallable<number>; target: EventCallable<AS>[]; fn: ([a]: number[]) => { a: number; b: string; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1804,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; clock: EventCallable<number>; target: EventCallable<ABN>[]; fn: ([a]: number[]) => { a: number; b: string; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1812,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; clock: EventCallable<number>; target: (EventCallable<AS> | EventCallable<ABN>)[]; fn: ([a]: number[]) => { ...; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS | ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1818,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>]; clock: EventCallable<number>; target: EventCallable<AS>[]; fn: ([a]: readonly [number]) => { a: number; b: string; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1820,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>]; clock: EventCallable<number>; target: EventCallable<ABN>[]; fn: ([a]: readonly [number]) => { a: number; b: string; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":1828,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>]; clock: EventCallable<number>; target: (EventCallable<AS> | EventCallable<ABN>)[]; fn: ([a]: readonly [...]) => { ...; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: string; }; targetType: AS | ABN; }[]; }'.","file":"effector/generated/sampleArrayTarget.test.ts"},{"pos":{"line":36,"col":45},"message":"Type '(a: string, clock: string) => { a: string; clock: string; }' is not assignable to type '((src: string, clk: void) => any) & ((a: string, clock: string) => { a: string; clock: string; })'.\n  Type '(a: string, clock: string) => { a: string; clock: string; }' is not assignable to type '(src: string, clk: void) => any'.\n    Types of parameters 'clock' and 'clk' are incompatible.\n      Type 'void' is not assignable to type 'string'.","file":"effector/generated/sampleClockArray.test.ts"},{"pos":{"line":38,"col":45},"message":"Type '(a: string, clock: string) => { a: string; clock: string; }' is not assignable to type '((src: string, clk: number) => any) & ((a: string, clock: string) => { a: string; clock: string; })'.\n  Type '(a: string, clock: string) => { a: string; clock: string; }' is not assignable to type '(src: string, clk: number) => any'.\n    Types of parameters 'clock' and 'clk' are incompatible.\n      Type 'number' is not assignable to type 'string'.","file":"effector/generated/sampleClockArray.test.ts"},{"pos":{"line":40,"col":45},"message":"Type '(a: string, clock: string) => { a: string; clock: string; }' is not assignable to type '((src: string, clk: number | void) => any) & ((a: string, clock: string) => { a: string; clock: string; })'.\n  Type '(a: string, clock: string) => { a: string; clock: string; }' is not assignable to type '(src: string, clk: number | void) => any'.\n    Types of parameters 'clock' and 'clk' are incompatible.\n      Type 'number | void' is not assignable to type 'string'.\n        Type 'number' is not assignable to type 'string'.","file":"effector/generated/sampleClockArray.test.ts"},{"pos":{"line":42,"col":45},"message":"Type '(a: string, clock: string) => { a: string; clock: string; }' is not assignable to type '((src: string, clk: unknown) => any) & ((a: string, clock: string) => { a: string; clock: string; })'.\n  Type '(a: string, clock: string) => { a: string; clock: string; }' is not assignable to type '(src: string, clk: unknown) => any'.\n    Types of parameters 'clock' and 'clk' are incompatible.\n      Type 'unknown' is not assignable to type 'string'.","file":"effector/generated/sampleClockArray.test.ts"},{"pos":{"line":52,"col":45},"message":"Type '(a: string, clock: string) => { a: string; clock: string; }' is not assignable to type '((src: string, clk: number | void) => any) & ((a: string, clock: string) => { a: string; clock: string; })'.","file":"effector/generated/sampleClockArray.test.ts"},{"pos":{"line":90,"col":60},"message":"Type '(a: string, clock: string) => { a: string; clock: string; }' is not assignable to type '((src: string, clk: void) => any) & ((a: string, clock: string) => { a: string; clock: string; })'.","file":"effector/generated/sampleClockArray.test.ts"},{"pos":{"line":92,"col":60},"message":"Type '(a: string, clock: string) => { a: string; clock: string; }' is not assignable to type '((src: string, clk: number) => any) & ((a: string, clock: string) => { a: string; clock: string; })'.","file":"effector/generated/sampleClockArray.test.ts"},{"pos":{"line":94,"col":60},"message":"Type '(a: string, clock: string) => { a: string; clock: string; }' is not assignable to type '((src: string, clk: number | void) => any) & ((a: string, clock: string) => { a: string; clock: string; })'.","file":"effector/generated/sampleClockArray.test.ts"},{"pos":{"line":96,"col":60},"message":"Type '(a: string, clock: string) => { a: string; clock: string; }' is not assignable to type '((src: string, clk: unknown) => any) & ((a: string, clock: string) => { a: string; clock: string; })'.","file":"effector/generated/sampleClockArray.test.ts"},{"pos":{"line":106,"col":60},"message":"Type '(a: string, clock: string) => { a: string; clock: string; }' is not assignable to type '((src: string, clk: number | void) => any) & ((a: string, clock: string) => { a: string; clock: string; })'.","file":"effector/generated/sampleClockArray.test.ts"},{"pos":{"line":131,"col":49},"message":"Type '({ a, b }: AB, clock: string) => { a: string; b: number; clock: string; }' is not assignable to type '((src: { a: string; b: number; }, clk: void) => any) & (({ a, b }: AB, clock: string) => { a: string; b: number; clock: string; })'.\n  Type '({ a, b }: AB, clock: string) => { a: string; b: number; clock: string; }' is not assignable to type '(src: { a: string; b: number; }, clk: void) => any'.\n    Types of parameters 'clock' and 'clk' are incompatible.\n      Type 'void' is not assignable to type 'string'.","file":"effector/generated/sampleClockArray.test.ts"},{"pos":{"line":133,"col":49},"message":"Type '({ a, b }: AB, clock: string) => { a: string; b: number; clock: string; }' is not assignable to type '((src: { a: string; b: number; }, clk: number) => any) & (({ a, b }: AB, clock: string) => { a: string; b: number; clock: string; })'.\n  Type '({ a, b }: AB, clock: string) => { a: string; b: number; clock: string; }' is not assignable to type '(src: { a: string; b: number; }, clk: number) => any'.\n    Types of parameters 'clock' and 'clk' are incompatible.\n      Type 'number' is not assignable to type 'string'.","file":"effector/generated/sampleClockArray.test.ts"},{"pos":{"line":135,"col":49},"message":"Type '({ a, b }: AB, clock: string) => { a: string; b: number; clock: string; }' is not assignable to type '((src: { a: string; b: number; }, clk: number | void) => any) & (({ a, b }: AB, clock: string) => { a: string; b: number; clock: string; })'.\n  Type '({ a, b }: AB, clock: string) => { a: string; b: number; clock: string; }' is not assignable to type '(src: { a: string; b: number; }, clk: number | void) => any'.\n    Types of parameters 'clock' and 'clk' are incompatible.\n      Type 'number | void' is not assignable to type 'string'.\n        Type 'number' is not assignable to type 'string'.","file":"effector/generated/sampleClockArray.test.ts"},{"pos":{"line":137,"col":49},"message":"Type '({ a, b }: AB, clock: string) => { a: string; b: number; clock: string; }' is not assignable to type '((src: { a: string; b: number; }, clk: unknown) => any) & (({ a, b }: AB, clock: string) => { a: string; b: number; clock: string; })'.\n  Type '({ a, b }: AB, clock: string) => { a: string; b: number; clock: string; }' is not assignable to type '(src: { a: string; b: number; }, clk: unknown) => any'.\n    Types of parameters 'clock' and 'clk' are incompatible.\n      Type 'unknown' is not assignable to type 'string'.","file":"effector/generated/sampleClockArray.test.ts"},{"pos":{"line":147,"col":49},"message":"Type '({ a, b }: AB, clock: string) => { a: string; b: number; clock: string; }' is not assignable to type '((src: { a: string; b: number; }, clk: number | void) => any) & (({ a, b }: AB, clock: string) => { a: string; b: number; clock: string; })'.\n  Type '({ a, b }: AB, clock: string) => { a: string; b: number; clock: string; }' is not assignable to type '(src: { a: string; b: number; }, clk: number | void) => any'.\n    Types of parameters 'clock' and 'clk' are incompatible.\n      Type 'number | void' is not assignable to type 'string'.\n        Type 'number' is not assignable to type 'string'.","file":"effector/generated/sampleClockArray.test.ts"},{"pos":{"line":189,"col":65},"message":"Type '({ a, b }: AB, clock: string) => { a: string; b: number; clock: string; }' is not assignable to type '((src: { a: string; b: number; }, clk: void) => any) & (({ a, b }: AB, clock: string) => { a: string; b: number; clock: string; })'.\n  Type '({ a, b }: AB, clock: string) => { a: string; b: number; clock: string; }' is not assignable to type '(src: { a: string; b: number; }, clk: void) => any'.\n    Types of parameters 'clock' and 'clk' are incompatible.\n      Type 'void' is not assignable to type 'string'.","file":"effector/generated/sampleClockArray.test.ts"},{"pos":{"line":191,"col":65},"message":"Type '({ a, b }: AB, clock: string) => { a: string; b: number; clock: string; }' is not assignable to type '((src: { a: string; b: number; }, clk: number) => any) & (({ a, b }: AB, clock: string) => { a: string; b: number; clock: string; })'.\n  Type '({ a, b }: AB, clock: string) => { a: string; b: number; clock: string; }' is not assignable to type '(src: { a: string; b: number; }, clk: number) => any'.\n    Types of parameters 'clock' and 'clk' are incompatible.\n      Type 'number' is not assignable to type 'string'.","file":"effector/generated/sampleClockArray.test.ts"},{"pos":{"line":193,"col":65},"message":"Type '({ a, b }: AB, clock: string) => { a: string; b: number; clock: string; }' is not assignable to type '((src: { a: string; b: number; }, clk: number | void) => any) & (({ a, b }: AB, clock: string) => { a: string; b: number; clock: string; })'.\n  Type '({ a, b }: AB, clock: string) => { a: string; b: number; clock: string; }' is not assignable to type '(src: { a: string; b: number; }, clk: number | void) => any'.\n    Types of parameters 'clock' and 'clk' are incompatible.\n      Type 'number | void' is not assignable to type 'string'.\n        Type 'number' is not assignable to type 'string'.","file":"effector/generated/sampleClockArray.test.ts"},{"pos":{"line":195,"col":65},"message":"Type '({ a, b }: AB, clock: string) => { a: string; b: number; clock: string; }' is not assignable to type '((src: { a: string; b: number; }, clk: unknown) => any) & (({ a, b }: AB, clock: string) => { a: string; b: number; clock: string; })'.\n  Type '({ a, b }: AB, clock: string) => { a: string; b: number; clock: string; }' is not assignable to type '(src: { a: string; b: number; }, clk: unknown) => any'.\n    Types of parameters 'clock' and 'clk' are incompatible.\n      Type 'unknown' is not assignable to type 'string'.","file":"effector/generated/sampleClockArray.test.ts"},{"pos":{"line":205,"col":65},"message":"Type '({ a, b }: AB, clock: string) => { a: string; b: number; clock: string; }' is not assignable to type '((src: { a: string; b: number; }, clk: number | void) => any) & (({ a, b }: AB, clock: string) => { a: string; b: number; clock: string; })'.\n  Type '({ a, b }: AB, clock: string) => { a: string; b: number; clock: string; }' is not assignable to type '(src: { a: string; b: number; }, clk: number | void) => any'.\n    Types of parameters 'clock' and 'clk' are incompatible.\n      Type 'number | void' is not assignable to type 'string'.\n        Type 'number' is not assignable to type 'string'.","file":"effector/generated/sampleClockArray.test.ts"},{"pos":{"line":55,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; target: EventCallable<ABN>; filter: (val: AB) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":57,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; target: EventCallable<ABN>; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":59,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; target: EventCallable<ABN>; filter: BooleanConstructor; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":61,"col":17},"message":"Argument of type '{ source: EventCallable<{ a: number | null; b: string; }>; target: EventCallable<ABN>; filter: (val: { a: number | null; b: string; }) => val is AB; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":63,"col":17},"message":"Argument of type '{ source: EventCallable<AB | null>; target: EventCallable<ABN>; filter: BooleanConstructor; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":100,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; target: EventCallable<{ a: string; }>; filter: (val: AB) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: { a: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: { a: string; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":102,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; target: EventCallable<{ a: string; }>; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: { a: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: { a: string; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":104,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; target: EventCallable<{ a: string; }>; filter: BooleanConstructor; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: { a: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: { a: string; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":106,"col":17},"message":"Argument of type '{ source: EventCallable<AB | null>; target: EventCallable<{ a: string; }>; filter: BooleanConstructor; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: { a: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: { a: string; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":152,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; clock: EventCallable<any>; target: EventCallable<ABN>; filter: (val: AB) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":154,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; clock: EventCallable<any>; target: EventCallable<ABN>; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":156,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; clock: EventCallable<any>; target: EventCallable<ABN>; filter: BooleanConstructor; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":158,"col":17},"message":"Argument of type '{ source: EventCallable<{ a: number | null; b: string; }>; clock: EventCallable<any>; target: EventCallable<ABN>; filter: (val: { a: number | null; b: string; }) => val is AB; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":160,"col":17},"message":"Argument of type '{ source: EventCallable<AB | null>; clock: EventCallable<any>; target: EventCallable<ABN>; filter: BooleanConstructor; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":198,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; clock: EventCallable<any>; target: EventCallable<{ a: string; }>; filter: (val: AB) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: { a: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: { a: string; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":200,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; clock: EventCallable<any>; target: EventCallable<{ a: string; }>; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: { a: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: { a: string; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":202,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; clock: EventCallable<any>; target: EventCallable<{ a: string; }>; filter: BooleanConstructor; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: { a: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: { a: string; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":204,"col":17},"message":"Argument of type '{ source: EventCallable<AB | null>; clock: EventCallable<any>; target: EventCallable<{ a: string; }>; filter: BooleanConstructor; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: { a: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: { a: string; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":250,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; clock: EventCallable<any>[]; target: EventCallable<ABN>; filter: (val: AB) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":252,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; clock: EventCallable<any>[]; target: EventCallable<ABN>; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":254,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; clock: EventCallable<any>[]; target: EventCallable<ABN>; filter: BooleanConstructor; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":256,"col":17},"message":"Argument of type '{ source: EventCallable<{ a: number | null; b: string; }>; clock: EventCallable<any>[]; target: EventCallable<ABN>; filter: (val: { a: number | null; b: string; }) => val is AB; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":258,"col":17},"message":"Argument of type '{ source: EventCallable<AB | null>; clock: EventCallable<any>[]; target: EventCallable<ABN>; filter: BooleanConstructor; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":296,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; clock: EventCallable<any>[]; target: EventCallable<{ a: string; }>; filter: (val: AB) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: { a: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: { a: string; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":298,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; clock: EventCallable<any>[]; target: EventCallable<{ a: string; }>; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: { a: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: { a: string; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":300,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; clock: EventCallable<any>[]; target: EventCallable<{ a: string; }>; filter: BooleanConstructor; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: { a: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: { a: string; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":302,"col":17},"message":"Argument of type '{ source: EventCallable<AB | null>; clock: EventCallable<any>[]; target: EventCallable<{ a: string; }>; filter: BooleanConstructor; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: { a: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: { a: string; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":353,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; target: EventCallable<ABN>[]; filter: (val: AB) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":357,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; target: (EventCallable<void> | EventCallable<ABN>)[]; filter: (val: AB) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":361,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; target: EventCallable<ABN>[]; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":365,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; target: (EventCallable<void> | EventCallable<ABN>)[]; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":369,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; target: EventCallable<ABN>[]; filter: BooleanConstructor; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":373,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; target: (EventCallable<void> | EventCallable<ABN>)[]; filter: BooleanConstructor; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":377,"col":17},"message":"Argument of type '{ source: EventCallable<{ a: number | null; b: string; }>; target: EventCallable<ABN>[]; filter: (val: { a: number | null; b: string; }) => val is AB; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":381,"col":17},"message":"Argument of type '{ source: EventCallable<{ a: number | null; b: string; }>; target: (EventCallable<void> | EventCallable<ABN>)[]; filter: (val: { a: number | null; b: string; }) => val is AB; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":385,"col":17},"message":"Argument of type '{ source: EventCallable<AB | null>; target: EventCallable<ABN>[]; filter: BooleanConstructor; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":389,"col":17},"message":"Argument of type '{ source: EventCallable<AB | null>; target: (EventCallable<void> | EventCallable<ABN>)[]; filter: BooleanConstructor; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":454,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; target: (EventCallable<void> | EventCallable<{ a: string; }>)[]; filter: (val: AB) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | { a: string; }; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | { a: string; }; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":462,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; target: (EventCallable<void> | EventCallable<{ a: string; }>)[]; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | { a: string; }; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | { a: string; }; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":470,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; target: (EventCallable<void> | EventCallable<{ a: string; }>)[]; filter: BooleanConstructor; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | { a: string; }; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | { a: string; }; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":478,"col":17},"message":"Argument of type '{ source: EventCallable<AB | null>; target: (EventCallable<void> | EventCallable<{ a: string; }>)[]; filter: BooleanConstructor; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | { a: string; }; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | { a: string; }; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":539,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; clock: EventCallable<any>; target: EventCallable<ABN>[]; filter: (val: AB) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":543,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; clock: EventCallable<any>; target: (EventCallable<void> | EventCallable<ABN>)[]; filter: (val: AB) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":547,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; clock: EventCallable<any>; target: EventCallable<ABN>[]; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":551,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; clock: EventCallable<any>; target: (EventCallable<void> | EventCallable<ABN>)[]; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":555,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; clock: EventCallable<any>; target: EventCallable<ABN>[]; filter: BooleanConstructor; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":559,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; clock: EventCallable<any>; target: (EventCallable<void> | EventCallable<ABN>)[]; filter: BooleanConstructor; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":563,"col":17},"message":"Argument of type '{ source: EventCallable<{ a: number | null; b: string; }>; clock: EventCallable<any>; target: EventCallable<ABN>[]; filter: (val: { a: number | null; b: string; }) => val is AB; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":567,"col":17},"message":"Argument of type '{ source: EventCallable<{ a: number | null; b: string; }>; clock: EventCallable<any>; target: (EventCallable<void> | EventCallable<ABN>)[]; filter: (val: { ...; }) => val is AB; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":571,"col":17},"message":"Argument of type '{ source: EventCallable<AB | null>; clock: EventCallable<any>; target: EventCallable<ABN>[]; filter: BooleanConstructor; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":575,"col":17},"message":"Argument of type '{ source: EventCallable<AB | null>; clock: EventCallable<any>; target: (EventCallable<void> | EventCallable<ABN>)[]; filter: BooleanConstructor; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":644,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; clock: EventCallable<any>; target: (EventCallable<void> | EventCallable<{ a: string; }>)[]; filter: (val: AB) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | { a: string; }; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | { a: string; }; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":652,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; clock: EventCallable<any>; target: (EventCallable<void> | EventCallable<{ a: string; }>)[]; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | { a: string; }; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | { a: string; }; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":660,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; clock: EventCallable<any>; target: (EventCallable<void> | EventCallable<{ a: string; }>)[]; filter: BooleanConstructor; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | { a: string; }; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | { a: string; }; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":668,"col":17},"message":"Argument of type '{ source: EventCallable<AB | null>; clock: EventCallable<any>; target: (EventCallable<void> | EventCallable<{ a: string; }>)[]; filter: BooleanConstructor; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | { a: string; }; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | { a: string; }; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":729,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; clock: EventCallable<any>[]; target: EventCallable<ABN>[]; filter: (val: AB) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":733,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; clock: EventCallable<any>[]; target: (EventCallable<void> | EventCallable<ABN>)[]; filter: (val: AB) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":737,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; clock: EventCallable<any>[]; target: EventCallable<ABN>[]; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":741,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; clock: EventCallable<any>[]; target: (EventCallable<void> | EventCallable<ABN>)[]; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":745,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; clock: EventCallable<any>[]; target: EventCallable<ABN>[]; filter: BooleanConstructor; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":749,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; clock: EventCallable<any>[]; target: (EventCallable<void> | EventCallable<ABN>)[]; filter: BooleanConstructor; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":753,"col":17},"message":"Argument of type '{ source: EventCallable<{ a: number | null; b: string; }>; clock: EventCallable<any>[]; target: EventCallable<ABN>[]; filter: (val: { a: number | null; b: string; }) => val is AB; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":757,"col":17},"message":"Argument of type '{ source: EventCallable<{ a: number | null; b: string; }>; clock: EventCallable<any>[]; target: (EventCallable<void> | EventCallable<ABN>)[]; filter: (val: { ...; }) => val is AB; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":761,"col":17},"message":"Argument of type '{ source: EventCallable<AB | null>; clock: EventCallable<any>[]; target: EventCallable<ABN>[]; filter: BooleanConstructor; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":765,"col":17},"message":"Argument of type '{ source: EventCallable<AB | null>; clock: EventCallable<any>[]; target: (EventCallable<void> | EventCallable<ABN>)[]; filter: BooleanConstructor; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":834,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; clock: EventCallable<any>[]; target: (EventCallable<void> | EventCallable<{ a: string; }>)[]; filter: (val: AB) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | { a: string; }; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | { a: string; }; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":842,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; clock: EventCallable<any>[]; target: (EventCallable<void> | EventCallable<{ a: string; }>)[]; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | { a: string; }; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | { a: string; }; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":850,"col":17},"message":"Argument of type '{ source: EventCallable<AB>; clock: EventCallable<any>[]; target: (EventCallable<void> | EventCallable<{ a: string; }>)[]; filter: BooleanConstructor; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | { a: string; }; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | { a: string; }; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":858,"col":17},"message":"Argument of type '{ source: EventCallable<AB | null>; clock: EventCallable<any>[]; target: (EventCallable<void> | EventCallable<{ a: string; }>)[]; filter: BooleanConstructor; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | { a: string; }; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: AB; targetType: void | { a: string; }; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":901,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; target: EventCallable<ABN>[]; filter: (val: { a: number; b: string; }) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":905,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; target: (EventCallable<void> | EventCallable<ABN>)[]; filter: (val: { ...; }) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: void | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: void | ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":909,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; target: EventCallable<ABN>[]; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":913,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; target: (EventCallable<void> | EventCallable<ABN>)[]; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: void | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: void | ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":958,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; target: (EventCallable<void> | EventCallable<{ a: string; }>)[]; filter: (val: { ...; }) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: void | { a: string; }; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: void | { a: string; }; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":966,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; target: (EventCallable<void> | EventCallable<{ a: string; }>)[]; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: void | { a: string; }; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: void | { a: string; }; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1007,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; clock: EventCallable<any>; target: EventCallable<ABN>[]; filter: (val: { ...; }) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1011,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; clock: EventCallable<any>; target: (EventCallable<void> | EventCallable<...>)[]; filter: (val: { ...; }) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: void | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: void | ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1015,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; clock: EventCallable<any>; target: EventCallable<ABN>[]; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1019,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; clock: EventCallable<any>; target: (EventCallable<void> | EventCallable<...>)[]; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: void | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: void | ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1068,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; clock: EventCallable<any>; target: (EventCallable<void> | EventCallable<...>)[]; filter: (val: { ...; }) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: void | { a: string; }; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: void | { a: string; }; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1076,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; clock: EventCallable<any>; target: (EventCallable<void> | EventCallable<...>)[]; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: void | { a: string; }; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: void | { a: string; }; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1117,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; clock: EventCallable<any>[]; target: EventCallable<ABN>[]; filter: (val: { ...; }) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1121,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; clock: EventCallable<any>[]; target: (EventCallable<void> | EventCallable<...>)[]; filter: (val: { ...; }) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: void | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: void | ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1125,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; clock: EventCallable<any>[]; target: EventCallable<ABN>[]; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1129,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; clock: EventCallable<any>[]; target: (EventCallable<void> | EventCallable<...>)[]; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: void | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: void | ABN; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1178,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; clock: EventCallable<any>[]; target: (EventCallable<void> | EventCallable<...>)[]; filter: (val: { ...; }) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: void | { a: string; }; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: void | { a: string; }; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1186,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; clock: EventCallable<any>[]; target: (EventCallable<void> | EventCallable<...>)[]; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: void | { a: string; }; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: void | { a: string; }; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1223,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; target: EventCallable<ABN>; filter: (val: { a: number; b: string; }) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: ABN; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: ABN; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1225,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; target: EventCallable<ABN>; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: ABN; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: ABN; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1227,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; target: EventCallable<AB>; filter: (val: { a: number; }) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AB; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AB; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1229,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; target: EventCallable<{ a: string; }>; filter: (val: { a: number; }) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: { a: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: { a: string; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1231,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; target: EventCallable<AB>; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AB; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AB; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1233,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; target: EventCallable<{ a: string; }>; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: { a: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: { a: string; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1271,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; target: EventCallable<{ a: string; }>; filter: (val: { a: number; b: string; }) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: { a: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: { a: string; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1273,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; target: EventCallable<{ a: string; }>; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: { a: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: { a: string; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1275,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; target: EventCallable<{ a: number; }>; filter: (val: { a: number | null; b: string; }) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number | null; b: string; }; targetType: { a: number; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number | null; b: string; }; targetType: { a: number; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1277,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; target: EventCallable<{ a: number; }>; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number | null; b: string; }; targetType: { a: number; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number | null; b: string; }; targetType: { a: number; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1320,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; clock: EventCallable<any>; target: EventCallable<ABN>; filter: (val: { ...; }) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: ABN; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: ABN; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1322,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; clock: EventCallable<any>; target: EventCallable<ABN>; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: ABN; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: ABN; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1324,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; clock: EventCallable<any>; target: EventCallable<AB>; filter: (val: { a: number; }) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AB; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AB; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1326,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; clock: EventCallable<any>; target: EventCallable<{ a: string; }>; filter: (val: { a: number; }) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: { a: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: { a: string; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1328,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; clock: EventCallable<any>; target: EventCallable<AB>; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AB; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AB; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1330,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; clock: EventCallable<any>; target: EventCallable<{ a: string; }>; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: { a: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: { a: string; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1370,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; clock: EventCallable<any>; target: EventCallable<{ a: string; }>; filter: (val: { ...; }) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: { a: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: { a: string; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1372,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; clock: EventCallable<any>; target: EventCallable<{ a: string; }>; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: { a: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: { a: string; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1374,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; clock: EventCallable<any>; target: EventCallable<{ a: number; }>; filter: (val: { ...; }) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number | null; b: string; }; targetType: { a: number; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number | null; b: string; }; targetType: { a: number; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1376,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; clock: EventCallable<number>; target: EventCallable<{ a: number; }>; filter: (val: { ...; }, n: number) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number | null; b: string; }; targetType: { a: number; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number | null; b: string; }; targetType: { a: number; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1378,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; clock: EventCallable<any>; target: EventCallable<{ a: number; }>; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number | null; b: string; }; targetType: { a: number; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number | null; b: string; }; targetType: { a: number; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1423,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; clock: EventCallable<any>[]; target: EventCallable<ABN>; filter: (val: { ...; }) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: ABN; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: ABN; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1425,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; clock: EventCallable<any>[]; target: EventCallable<ABN>; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: ABN; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: ABN; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1427,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; clock: EventCallable<any>[]; target: EventCallable<AB>; filter: (val: { a: number; }) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AB; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AB; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1429,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; clock: EventCallable<any>[]; target: EventCallable<{ a: string; }>; filter: (val: { a: number; }) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: { a: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: { a: string; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1431,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; clock: EventCallable<any>[]; target: EventCallable<AB>; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AB; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AB; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1433,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; clock: EventCallable<any>[]; target: EventCallable<{ a: string; }>; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: { a: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: { a: string; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1473,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; clock: EventCallable<any>[]; target: EventCallable<{ a: string; }>; filter: (val: { ...; }) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: { a: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: { a: string; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1475,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number>; b: StoreWritable<string>; }; clock: EventCallable<any>[]; target: EventCallable<{ a: string; }>; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: { a: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: { a: string; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1477,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; clock: EventCallable<any>[]; target: EventCallable<{ a: number; }>; filter: (val: { ...; }) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number | null; b: string; }; targetType: { a: number; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number | null; b: string; }; targetType: { a: number; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1479,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; clock: (StoreWritable<number> | EventCallable<number>)[]; target: EventCallable<...>; filter: (val: { ...; }, n: number) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number | null; b: string; }; targetType: { a: number; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number | null; b: string; }; targetType: { a: number; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1481,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; clock: EventCallable<any>[]; target: EventCallable<{ a: number; }>; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number | null; b: string; }; targetType: { a: number; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number | null; b: string; }; targetType: { a: number; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1507,"col":133},"message":"'val.a' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1520,"col":133},"message":"'val.a' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1522,"col":116},"message":"Type '(val: AB) => { a: number; b: string; }' is not assignable to type '((src: { a: number | null; b: string; }) => any) & ((val: AB) => { a: number; b: string; })'.\n  Type '(val: AB) => { a: number; b: string; }' is not assignable to type '(src: { a: number | null; b: string; }) => any'.\n    Types of parameters 'val' and 'src' are incompatible.\n      Type '{ a: number | null; b: string; }' is not assignable to type 'AB'.\n        Types of property 'a' are incompatible.\n          Type 'number | null' is not assignable to type 'number'.\n            Type 'null' is not assignable to type 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1524,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; target: EventCallable<{ a: number; }>; filter: (val: any) => boolean; fn: () => string; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: { a: number; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: { a: number; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1524,"col":57},"message":"Parameter 'val' implicitly has an 'any' type.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1526,"col":133},"message":"'val.a' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1528,"col":116},"message":"Type '(val: AB) => { a: number; b: string; }' is not assignable to type '((src: { a: number | null; b: string; }) => any) & ((val: AB) => { a: number; b: string; })'.\n  Type '(val: AB) => { a: number; b: string; }' is not assignable to type '(src: { a: number | null; b: string; }) => any'.\n    Types of parameters 'val' and 'src' are incompatible.\n      Type '{ a: number | null; b: string; }' is not assignable to type 'AB'.\n        Types of property 'a' are incompatible.\n          Type 'number | null' is not assignable to type 'number'.\n            Type 'null' is not assignable to type 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1530,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; target: EventCallable<{ a: number; }>; filter: StoreWritable<boolean>; fn: () => string; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: { a: number; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: { a: number; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1532,"col":141},"message":"Property 'c' does not exist on type '{ a: number | null; b: string; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1534,"col":16},"message":"Argument of type '[{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; target: EventCallable<{ a: number; }>; filter: (val: { a: number | null; b: string; }) => val is AB; fn: (val: ABN) => { ...; }; }]' is not assignable to parameter of type '[config: { source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; clock?: undefined; filter?: (((src: { a: number | null; b: string; }) => src is { a: number | null; b: string; }) & ((src: { ...; }) => src is { ...; })) | undefined; fn?: (((src: { ...; }) => any) & ((src: { ...; }) => any)) | undefi...'.\n  Type '[{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; target: EventCallable<{ a: number; }>; filter: (val: { a: number | null; b: string; }) => val is AB; fn: (val: ABN) => { ...; }; }]' is not assignable to type '[config: { source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; clock?: undefined; filter?: ((src: { a: number | null; b: string; }) => boolean) | undefined; fn?: ((src: { ...; }) => any) | undefined; target: EventCallable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }]'.\n    Type '{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; target: EventCallable<{ a: number; }>; filter: (val: { a: number | null; b: string; }) => val is AB; fn: (val: ABN) => { ...; }; }' is not assignable to type '{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; clock?: undefined; filter?: ((src: { a: number | null; b: string; }) => boolean) | undefined; fn?: ((src: { ...; }) => any) | undefined; target: EventCallable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }'.\n      Types of property 'fn' are incompatible.\n        Type '(val: ABN) => { a: number; b: string; }' is not assignable to type '(src: { a: number | null; b: string; }) => any'.\n          Types of parameters 'val' and 'src' are incompatible.\n            Type '{ a: number | null; b: string; }' is not assignable to type 'ABN'.\n              Types of property 'a' are incompatible.\n                Type 'number | null' is not assignable to type 'number'.\n                  Type 'null' is not assignable to type 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1536,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; target: EventCallable<{ a: number; }>; filter: (val: any) => val is AB; fn: () => string; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: { a: number; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: { a: number; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1536,"col":57},"message":"Parameter 'val' implicitly has an 'any' type.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1589,"col":147},"message":"'val.a' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1590,"col":147},"message":"'val.a' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1605,"col":147},"message":"'val.a' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1607,"col":147},"message":"'val.a' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1609,"col":130},"message":"Type '(val: AB) => { a: number; b: string; }' is not assignable to type '((src: { a: number | null; b: string; }, clk: any) => any) & ((val: AB) => { a: number; b: string; })'.\n  Type '(val: AB) => { a: number; b: string; }' is not assignable to type '(src: { a: number | null; b: string; }, clk: any) => any'.\n    Types of parameters 'val' and 'src' are incompatible.\n      Type '{ a: number | null; b: string; }' is not assignable to type 'AB'.\n        Types of property 'a' are incompatible.\n          Type 'number | null' is not assignable to type 'number'.\n            Type 'null' is not assignable to type 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1611,"col":130},"message":"Type '(val: AB) => { a: number; b: string; }' is not assignable to type '((src: { a: number | null; b: string; }, clk: number) => any) & ((val: AB) => { a: number; b: string; })'.\n  Type '(val: AB) => { a: number; b: string; }' is not assignable to type '(src: { a: number | null; b: string; }, clk: number) => any'.\n    Types of parameters 'val' and 'src' are incompatible.\n      Type '{ a: number | null; b: string; }' is not assignable to type 'AB'.\n        Types of property 'a' are incompatible.\n          Type 'number | null' is not assignable to type 'number'.\n            Type 'null' is not assignable to type 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1613,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; clock: EventCallable<any>; target: EventCallable<{ a: number; }>; filter: (val: any) => boolean; fn: () => string; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: { a: number; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: { a: number; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1613,"col":69},"message":"Parameter 'val' implicitly has an 'any' type.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1615,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; clock: EventCallable<number>; target: EventCallable<{ a: number; }>; filter: (val: any, n: any) => boolean; fn: () => string; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: { a: number; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: { a: number; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1615,"col":69},"message":"Parameter 'val' implicitly has an 'any' type.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1615,"col":73},"message":"Parameter 'n' implicitly has an 'any' type.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1617,"col":147},"message":"'val.a' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1619,"col":130},"message":"Type '(val: AB) => { a: number; b: string; }' is not assignable to type '((src: { a: number | null; b: string; }, clk: any) => any) & ((val: AB) => { a: number; b: string; })'.\n  Type '(val: AB) => { a: number; b: string; }' is not assignable to type '(src: { a: number | null; b: string; }, clk: any) => any'.\n    Types of parameters 'val' and 'src' are incompatible.\n      Type '{ a: number | null; b: string; }' is not assignable to type 'AB'.\n        Types of property 'a' are incompatible.\n          Type 'number | null' is not assignable to type 'number'.\n            Type 'null' is not assignable to type 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1621,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; clock: EventCallable<any>; target: EventCallable<{ a: number; }>; filter: StoreWritable<...>; fn: () => string; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: { a: number; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: { a: number; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1623,"col":155},"message":"Property 'c' does not exist on type '{ a: number | null; b: string; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1625,"col":155},"message":"Property 'c' does not exist on type '{ a: number | null; b: string; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1627,"col":16},"message":"Argument of type '[{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; clock: EventCallable<any>; target: EventCallable<{ a: number; }>; filter: (val: { ...; }) => val is AB; fn: (val: ABN) => { ...; }; }]' is not assignable to parameter of type '[config: { clock: EventCallable<any>; source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; filter?: (((src: { a: number | null; b: string; }, clk: any) => src is { ...; }) & ((src: { ...; }, clk: any) => src is { ...; })) | undefined; fn?: (((src: { ...; }, clk: any) => any) & ((src: { ...; }, clk...'.\n  Type '[{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; clock: EventCallable<any>; target: EventCallable<{ a: number; }>; filter: (val: { ...; }) => val is AB; fn: (val: ABN) => { ...; }; }]' is not assignable to type '[config: { clock: EventCallable<any>; source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; filter?: ((src: { a: number | null; b: string; }, clk: any) => boolean) | undefined; fn?: ((src: { ...; }, clk: any) => any) | undefined; target: EventCallable<...>; greedy?: boolean | undefined; batch?: boo...'.\n    Type '{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; clock: EventCallable<any>; target: EventCallable<{ a: number; }>; filter: (val: { ...; }) => val is AB; fn: (val: ABN) => { ...; }; }' is not assignable to type '{ clock: EventCallable<any>; source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; filter?: ((src: { a: number | null; b: string; }, clk: any) => boolean) | undefined; fn?: ((src: { ...; }, clk: any) => any) | undefined; target: EventCallable<...>; greedy?: boolean | undefined; batch?: boolean | un...'.\n      Types of property 'fn' are incompatible.\n        Type '(val: ABN) => { a: number; b: string; }' is not assignable to type '(src: { a: number | null; b: string; }, clk: any) => any'.\n          Types of parameters 'val' and 'src' are incompatible.\n            Type '{ a: number | null; b: string; }' is not assignable to type 'ABN'.\n              Types of property 'a' are incompatible.\n                Type 'number | null' is not assignable to type 'number'.\n                  Type 'null' is not assignable to type 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1629,"col":16},"message":"Argument of type '[{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; clock: EventCallable<number>; target: EventCallable<{ a: number; }>; filter: (val: { ...; }, n: number) => val is AB; fn: (val: ABN) => { ...; }; }]' is not assignable to parameter of type '[config: { clock: EventCallable<number>; source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; filter?: (((src: { a: number | null; b: string; }, clk: number) => src is { ...; }) & ((src: { ...; }, clk: number) => src is { ...; })) | undefined; fn?: (((src: { ...; }, clk: number) => any) & ((src: {...'.\n  Type '[{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; clock: EventCallable<number>; target: EventCallable<{ a: number; }>; filter: (val: { ...; }, n: number) => val is AB; fn: (val: ABN) => { ...; }; }]' is not assignable to type '[config: { clock: EventCallable<number>; source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; filter?: ((src: { a: number | null; b: string; }, clk: number) => boolean) | undefined; fn?: ((src: { ...; }, clk: number) => any) | undefined; target: EventCallable<...>; greedy?: boolean | undefined; ba...'.\n    Type '{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; clock: EventCallable<number>; target: EventCallable<{ a: number; }>; filter: (val: { ...; }, n: number) => val is AB; fn: (val: ABN) => { ...; }; }' is not assignable to type '{ clock: EventCallable<number>; source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; filter?: ((src: { a: number | null; b: string; }, clk: number) => boolean) | undefined; fn?: ((src: { ...; }, clk: number) => any) | undefined; target: EventCallable<...>; greedy?: boolean | undefined; batch?: boo...'.\n      Types of property 'fn' are incompatible.\n        Type '(val: ABN) => { a: number; b: string; }' is not assignable to type '(src: { a: number | null; b: string; }, clk: number) => any'.\n          Types of parameters 'val' and 'src' are incompatible.\n            Type '{ a: number | null; b: string; }' is not assignable to type 'ABN'.\n              Types of property 'a' are incompatible.\n                Type 'number | null' is not assignable to type 'number'.\n                  Type 'null' is not assignable to type 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1631,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; clock: EventCallable<any>; target: EventCallable<{ a: number; }>; filter: (val: any) => val is AB; fn: () => string; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: { a: number; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: { a: number; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1631,"col":69},"message":"Parameter 'val' implicitly has an 'any' type.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1633,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; clock: EventCallable<number>; target: EventCallable<{ a: number; }>; filter: (val: any, n: any) => val is AB; fn: () => string; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: { a: number; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: { a: number; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1633,"col":69},"message":"Parameter 'val' implicitly has an 'any' type.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1633,"col":73},"message":"Parameter 'n' implicitly has an 'any' type.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1713,"col":154},"message":"'val.a' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1714,"col":154},"message":"'val.a' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1729,"col":154},"message":"'val.a' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1731,"col":154},"message":"'val.a' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1733,"col":137},"message":"Type '(val: AB) => { a: number; b: string; }' is not assignable to type '((src: { a: number | null; b: string; }, clk: any) => any) & ((val: AB) => { a: number; b: string; })'.\n  Type '(val: AB) => { a: number; b: string; }' is not assignable to type '(src: { a: number | null; b: string; }, clk: any) => any'.\n    Types of parameters 'val' and 'src' are incompatible.\n      Type '{ a: number | null; b: string; }' is not assignable to type 'AB'.\n        Types of property 'a' are incompatible.\n          Type 'number | null' is not assignable to type 'number'.\n            Type 'null' is not assignable to type 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1735,"col":137},"message":"Type '(val: AB) => { a: number; b: string; }' is not assignable to type '((src: { a: number | null; b: string; }, clk: number) => any) & ((val: AB) => { a: number; b: string; })'.\n  Type '(val: AB) => { a: number; b: string; }' is not assignable to type '(src: { a: number | null; b: string; }, clk: number) => any'.\n    Types of parameters 'val' and 'src' are incompatible.\n      Type '{ a: number | null; b: string; }' is not assignable to type 'AB'.\n        Types of property 'a' are incompatible.\n          Type 'number | null' is not assignable to type 'number'.\n            Type 'null' is not assignable to type 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1737,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; clock: EventCallable<any>[]; target: EventCallable<{ a: number; }>; filter: (val: any) => boolean; fn: () => string; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: { a: number; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: { a: number; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1737,"col":76},"message":"Parameter 'val' implicitly has an 'any' type.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1739,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; clock: (StoreWritable<number> | EventCallable<number>)[]; target: EventCallable<...>; filter: (val: any, n: any) => boolean; fn: () => string; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: { a: number; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: { a: number; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1739,"col":76},"message":"Parameter 'val' implicitly has an 'any' type.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1739,"col":80},"message":"Parameter 'n' implicitly has an 'any' type.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1741,"col":154},"message":"'val.a' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1743,"col":137},"message":"Type '(val: AB) => { a: number; b: string; }' is not assignable to type '((src: { a: number | null; b: string; }, clk: any) => any) & ((val: AB) => { a: number; b: string; })'.\n  Type '(val: AB) => { a: number; b: string; }' is not assignable to type '(src: { a: number | null; b: string; }, clk: any) => any'.\n    Types of parameters 'val' and 'src' are incompatible.\n      Type '{ a: number | null; b: string; }' is not assignable to type 'AB'.\n        Types of property 'a' are incompatible.\n          Type 'number | null' is not assignable to type 'number'.\n            Type 'null' is not assignable to type 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1745,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; clock: EventCallable<any>[]; target: EventCallable<{ a: number; }>; filter: StoreWritable<...>; fn: () => string; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: { a: number; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: { a: number; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1747,"col":162},"message":"Property 'c' does not exist on type '{ a: number | null; b: string; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1749,"col":162},"message":"Property 'c' does not exist on type '{ a: number | null; b: string; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1751,"col":16},"message":"Argument of type '[{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; clock: EventCallable<any>[]; target: EventCallable<{ a: number; }>; filter: (val: { ...; }) => val is AB; fn: (val: ABN) => { ...; }; }]' is not assignable to parameter of type '[config: { clock: EventCallable<any>[]; source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; filter?: (((src: { a: number | null; b: string; }, clk: any) => src is { ...; }) & ((src: { ...; }, clk: any) => src is { ...; })) | undefined; fn?: (((src: { ...; }, clk: any) => any) & ((src: { ...; }, c...'.\n  Type '[{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; clock: EventCallable<any>[]; target: EventCallable<{ a: number; }>; filter: (val: { ...; }) => val is AB; fn: (val: ABN) => { ...; }; }]' is not assignable to type '[config: { clock: EventCallable<any>[]; source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; filter?: ((src: { a: number | null; b: string; }, clk: any) => boolean) | undefined; fn?: ((src: { ...; }, clk: any) => any) | undefined; target: EventCallable<...>; greedy?: boolean | undefined; batch?: b...'.\n    Type '{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; clock: EventCallable<any>[]; target: EventCallable<{ a: number; }>; filter: (val: { ...; }) => val is AB; fn: (val: ABN) => { ...; }; }' is not assignable to type '{ clock: EventCallable<any>[]; source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; filter?: ((src: { a: number | null; b: string; }, clk: any) => boolean) | undefined; fn?: ((src: { ...; }, clk: any) => any) | undefined; target: EventCallable<...>; greedy?: boolean | undefined; batch?: boolean | ...'.\n      Types of property 'fn' are incompatible.\n        Type '(val: ABN) => { a: number; b: string; }' is not assignable to type '(src: { a: number | null; b: string; }, clk: any) => any'.\n          Types of parameters 'val' and 'src' are incompatible.\n            Type '{ a: number | null; b: string; }' is not assignable to type 'ABN'.\n              Types of property 'a' are incompatible.\n                Type 'number | null' is not assignable to type 'number'.\n                  Type 'null' is not assignable to type 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1753,"col":16},"message":"Argument of type '[{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; clock: (StoreWritable<number> | EventCallable<number>)[]; target: EventCallable<...>; filter: (val: { ...; }, n: number) => val is AB; fn: (val: ABN) => { ...; }; }]' is not assignable to parameter of type '[config: { clock: (StoreWritable<number> | EventCallable<number>)[]; source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; ... 4 more ...; batch?: boolean | undefined; }] | [config: ...]'.\n  Type '[{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; clock: (StoreWritable<number> | EventCallable<number>)[]; target: EventCallable<...>; filter: (val: { ...; }, n: number) => val is AB; fn: (val: ABN) => { ...; }; }]' is not assignable to type '[config: { clock: (StoreWritable<number> | EventCallable<number>)[]; source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; ... 4 more ...; batch?: boolean | undefined; }]'.\n    Type '{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; clock: (StoreWritable<number> | EventCallable<number>)[]; target: EventCallable<...>; filter: (val: { ...; }, n: number) => val is AB; fn: (val: ABN) => { ...; }; }' is not assignable to type '{ clock: (StoreWritable<number> | EventCallable<number>)[]; source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; ... 4 more ...; batch?: boolean | undefined; }'.\n      Types of property 'fn' are incompatible.\n        Type '(val: ABN) => { a: number; b: string; }' is not assignable to type '(src: { a: number | null; b: string; }, clk: number) => any'.\n          Types of parameters 'val' and 'src' are incompatible.\n            Type '{ a: number | null; b: string; }' is not assignable to type 'ABN'.\n              Types of property 'a' are incompatible.\n                Type 'number | null' is not assignable to type 'number'.\n                  Type 'null' is not assignable to type 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1755,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; clock: EventCallable<any>[]; target: EventCallable<{ a: number; }>; filter: (val: any) => val is AB; fn: () => string; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: { a: number; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: { a: number; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1755,"col":76},"message":"Parameter 'val' implicitly has an 'any' type.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1757,"col":17},"message":"Argument of type '{ source: { a: StoreWritable<number | null>; b: StoreWritable<string>; }; clock: (StoreWritable<number> | EventCallable<number>)[]; target: EventCallable<...>; filter: (val: any, n: any) => val is AB; fn: () => string; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: { a: number; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: { a: number; }; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1757,"col":76},"message":"Parameter 'val' implicitly has an 'any' type.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1757,"col":80},"message":"Parameter 'n' implicitly has an 'any' type.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1833,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: EventCallable<[number, string]>[]; filter: (val: (string | number)[]) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1833,"col":76},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1834,"col":76},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1835,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: (EventCallable<void> | EventCallable<[number, string]>)[]; filter: (val: (string | number)[]) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: void | [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: void | [number, string]; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1835,"col":76},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1836,"col":76},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1837,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: EventCallable<[number, string]>[]; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1839,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: (EventCallable<void> | EventCallable<[number, string]>)[]; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: void | [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: void | [number, string]; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1863,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: EventCallable<[number, number]>[]; filter: (val: (string | number)[]) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number]; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1863,"col":76},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1865,"col":76},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1867,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: (EventCallable<void> | EventCallable<[number, number]>)[]; filter: (val: (string | number)[]) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: void | [number, number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: void | [number, number]; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1867,"col":76},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1869,"col":76},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1871,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: EventCallable<[number, number]>[]; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number]; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1875,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: (EventCallable<void> | EventCallable<[number, number]>)[]; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: void | [number, number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: void | [number, number]; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1901,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<any>; target: EventCallable<[number, string]>[]; filter: (val: (string | number)[]) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1901,"col":88},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1902,"col":88},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1903,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<any>; target: (EventCallable<void> | EventCallable<...>)[]; filter: (val: (string | number)[]) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: void | [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: void | [number, string]; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1903,"col":88},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1904,"col":88},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1905,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: EventCallable<[number, string]>[]; filter: (val: (string | number)[], n: number) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1905,"col":91},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1906,"col":91},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1907,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: (EventCallable<void> | EventCallable<...>)[]; filter: (val: (string | number)[], n: number) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: void | [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: void | [number, string]; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1907,"col":91},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1908,"col":91},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1909,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<any>; target: EventCallable<[number, string]>[]; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1911,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<any>; target: (EventCallable<void> | EventCallable<...>)[]; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: void | [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: void | [number, string]; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1943,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<any>; target: EventCallable<[number, number]>[]; filter: (val: (string | number)[]) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number]; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1943,"col":88},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1945,"col":88},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1947,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<any>; target: (EventCallable<void> | EventCallable<...>)[]; filter: (val: (string | number)[]) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: void | [number, number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: void | [number, number]; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1947,"col":88},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1949,"col":88},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1951,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<any>; target: EventCallable<[number, number]>[]; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number]; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1955,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<any>; target: (EventCallable<void> | EventCallable<...>)[]; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: void | [number, number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: void | [number, number]; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1981,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<any>[]; target: EventCallable<[number, string]>[]; filter: (val: (string | number)[]) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1981,"col":95},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1982,"col":95},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1983,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<any>[]; target: (EventCallable<void> | EventCallable<...>)[]; filter: (val: (string | number)[]) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: void | [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: void | [number, string]; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1983,"col":95},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1984,"col":95},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1985,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: (StoreWritable<number> | EventCallable<number>)[]; target: EventCallable<...>[]; filter: (val: (string | number)[], n: number) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1985,"col":98},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1986,"col":98},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1987,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: (StoreWritable<number> | EventCallable<number>)[]; target: (EventCallable<...> | EventCallable<...>)[]; filter: (val: (string | number)[], n: number) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: void | [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: void | [number, string]; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1987,"col":98},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1988,"col":98},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1989,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<any>[]; target: EventCallable<[number, string]>[]; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":1991,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<any>[]; target: (EventCallable<void> | EventCallable<...>)[]; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: void | [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: void | [number, string]; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2023,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<any>[]; target: EventCallable<[number, number]>[]; filter: (val: (string | number)[]) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number]; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2023,"col":90},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2025,"col":90},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2027,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<any>[]; target: (EventCallable<void> | EventCallable<...>)[]; filter: (val: (string | number)[]) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: void | [number, number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: void | [number, number]; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2027,"col":90},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2029,"col":90},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2031,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<any>[]; target: EventCallable<[number, number]>[]; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number]; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2035,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<any>[]; target: (EventCallable<void> | EventCallable<...>)[]; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: void | [number, number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: void | [number, number]; }[]; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2061,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: EventCallable<[number, string]>; filter: (val: (string | number)[]) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2061,"col":72},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2062,"col":72},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2063,"col":72},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2067,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: EventCallable<[number, string]>; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2073,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; target: EventCallable<[number]>; filter: (val: number[]) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2075,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; target: EventCallable<[number]>; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2098,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: EventCallable<[number, number]>; filter: (val: (string | number)[]) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2098,"col":72},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2100,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>, StoreWritable<string>]; target: EventCallable<[number, number]>; filter: (val: readonly [number, string]) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [number, number]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [number, number]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2102,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; target: EventCallable<[number, number]>; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2104,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>, StoreWritable<string>]; target: EventCallable<[number, number]>; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [number, number]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [number, number]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2106,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; target: EventCallable<[number, number]>; filter: (val: number[]) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2108,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>]; target: EventCallable<[number, number]>; filter: (val: readonly [number]) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [number, number]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [number, number]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2110,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; target: EventCallable<[number, number]>; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2112,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>]; target: EventCallable<[number, number]>; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [number, number]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [number, number]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2141,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<any>; target: EventCallable<[number, string]>; filter: (val: (string | number)[]) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2141,"col":84},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2142,"col":84},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2143,"col":84},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2144,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: EventCallable<[number, string]>; filter: (val: (string | number)[], n: number) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2144,"col":87},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2145,"col":87},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2146,"col":87},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2153,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<any>; target: EventCallable<[number, string]>; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2159,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; clock: EventCallable<any>; target: EventCallable<[number]>; filter: (val: number[]) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2160,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; clock: EventCallable<number>; target: EventCallable<[number]>; filter: (val: number[], n: number) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2163,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; clock: EventCallable<any>; target: EventCallable<[number]>; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2193,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<any>; target: EventCallable<[number, number]>; filter: (val: (string | number)[]) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2193,"col":84},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2195,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>, StoreWritable<string>]; clock: EventCallable<any>; target: EventCallable<[number, number]>; filter: (val: readonly [...]) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [number, number]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [number, number]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2197,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<any>; target: EventCallable<[number, number]>; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2199,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>, StoreWritable<string>]; clock: EventCallable<any>; target: EventCallable<[number, number]>; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [number, number]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [number, number]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2201,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; clock: EventCallable<any>; target: EventCallable<[number, number]>; filter: (val: number[]) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2203,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>]; clock: EventCallable<any>; target: EventCallable<[number, number]>; filter: (val: readonly [number]) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [number, number]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [number, number]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2205,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; clock: EventCallable<any>; target: EventCallable<[number, number]>; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2207,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>]; clock: EventCallable<any>; target: EventCallable<[number, number]>; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [number, number]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [number, number]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2236,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<any>[]; target: EventCallable<[number, string]>; filter: (val: (string | number)[]) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2236,"col":91},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2237,"col":91},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2238,"col":91},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2239,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: (StoreWritable<number> | EventCallable<number>)[]; target: EventCallable<...>; filter: (val: (string | number)[], n: number) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2239,"col":94},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2240,"col":94},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2241,"col":94},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2248,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<any>[]; target: EventCallable<[number, string]>; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2254,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; clock: EventCallable<any>[]; target: EventCallable<[number]>; filter: (val: number[]) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2255,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; clock: (StoreWritable<number> | EventCallable<number>)[]; target: EventCallable<[number]>; filter: (val: number[], n: number) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2258,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; clock: EventCallable<any>[]; target: EventCallable<[number]>; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2288,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<any>[]; target: EventCallable<[number, number]>; filter: (val: (string | number)[]) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2288,"col":86},"message":"Operator '>' cannot be applied to types 'string | number' and 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2290,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>, StoreWritable<string>]; clock: EventCallable<any>[]; target: EventCallable<[number, number]>; filter: (val: readonly [...]) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [number, number]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [number, number]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2292,"col":17},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<any>[]; target: EventCallable<[number, number]>; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2294,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>, StoreWritable<string>]; clock: EventCallable<any>[]; target: EventCallable<[number, number]>; filter: StoreWritable<...>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [number, number]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number, string]; targetType: [number, number]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2296,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; clock: EventCallable<any>[]; target: EventCallable<[number, number]>; filter: (val: number[]) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2298,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>]; clock: EventCallable<any>[]; target: EventCallable<[number, number]>; filter: (val: readonly [number]) => boolean; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [number, number]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [number, number]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2300,"col":17},"message":"Argument of type '{ source: StoreWritable<number>[]; clock: EventCallable<any>[]; target: EventCallable<[number, number]>; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2302,"col":17},"message":"Argument of type '{ source: readonly [StoreWritable<number>]; clock: EventCallable<any>[]; target: EventCallable<[number, number]>; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [number, number]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: readonly [number]; targetType: [number, number]; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2346,"col":17},"message":"Argument of type '{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: (clk: AB | null) => boolean; }' is not assignable to parameter of type '{ error: \"clock should extend target type\"; targets: { clockType: AB | null; targetType: AB; }; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"clock should extend target type\"; targets: { clockType: AB | null; targetType: AB; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2348,"col":17},"message":"Argument of type '{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: (clk: AB | null) => boolean; }' is not assignable to parameter of type '{ error: \"clock should extend target type\"; targets: { clockType: AB | null; targetType: AB; }; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"clock should extend target type\"; targets: { clockType: AB | null; targetType: AB; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2350,"col":17},"message":"Argument of type '{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: (clk: AB | null) => boolean; }' is not assignable to parameter of type '{ error: \"clock should extend target type\"; targets: { clockType: AB | null; targetType: AB; }; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"clock should extend target type\"; targets: { clockType: AB | null; targetType: AB; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2350,"col":63},"message":"'clk' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2352,"col":17},"message":"Argument of type '{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: (clk: AB) => boolean; }' is not assignable to parameter of type '{ error: \"clock should extend target type\"; targets: { clockType: AB | null; targetType: AB; }; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"clock should extend target type\"; targets: { clockType: AB | null; targetType: AB; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2354,"col":17},"message":"Argument of type '{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: () => number; }' is not assignable to parameter of type '{ error: \"clock should extend target type\"; targets: { clockType: AB | null; targetType: AB; }; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"clock should extend target type\"; targets: { clockType: AB | null; targetType: AB; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2356,"col":17},"message":"Argument of type '{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"clock should extend target type\"; targets: { clockType: AB | null; targetType: AB; }; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"clock should extend target type\"; targets: { clockType: AB | null; targetType: AB; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2389,"col":104},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2389,"col":113},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2403,"col":63},"message":"'clk' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2405,"col":16},"message":"Argument of type '[{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: (clk: AB) => boolean; fn: (val: AB | null) => { a: number; b: string; }; }]' is not assignable to parameter of type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: (((clk: AB | null) => clk is AB | null) & ((clk: AB | null) => clk is AB | null)) | undefined; fn?: (((clk: AB | null) => any) & ((clk: AB | null) => any)) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean |...'.\n  Type '[{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: (clk: AB) => boolean; fn: (val: AB | null) => { a: number; b: string; }; }]' is not assignable to type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }]'.\n    Type '{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: (clk: AB) => boolean; fn: (val: AB | null) => { a: number; b: string; }; }' is not assignable to type '{ clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }'.\n      Types of property 'filter' are incompatible.\n        Type '(clk: AB) => boolean' is not assignable to type '(clk: AB | null) => boolean'.\n          Types of parameters 'clk' and 'clk' are incompatible.\n            Type 'AB | null' is not assignable to type 'AB'.\n              Type 'null' is not assignable to type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2407,"col":16},"message":"Argument of type '[{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: () => number; fn: (val: AB | null) => { a: number; b: string; }; }]' is not assignable to parameter of type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: (((clk: AB | null) => clk is AB | null) & ((clk: AB | null) => clk is AB | null)) | undefined; fn?: (((clk: AB | null) => any) & ((clk: AB | null) => any)) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean |...'.\n  Type '[{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: () => number; fn: (val: AB | null) => { a: number; b: string; }; }]' is not assignable to type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }]'.\n    Type '{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: () => number; fn: (val: AB | null) => { a: number; b: string; }; }' is not assignable to type '{ clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }'.\n      The types returned by 'filter(...)' are incompatible between these types.\n        Type 'number' is not assignable to type 'boolean'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2409,"col":63},"message":"'clk' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2411,"col":16},"message":"Argument of type '[{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: (clk: AB) => boolean; fn: (val: AB | null) => { a: number; b: string; }; }]' is not assignable to parameter of type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: (((clk: AB | null) => clk is AB | null) & ((clk: AB | null) => clk is AB | null)) | undefined; fn?: (((val: AB | null) => { ...; }) & ((clk: AB | null) => any)) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: bool...'.\n  Type '[{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: (clk: AB) => boolean; fn: (val: AB | null) => { a: number; b: string; }; }]' is not assignable to type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((val: AB | null) => { a: number; b: string; }) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; } & { ...; }]'.\n    Type '{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: (clk: AB) => boolean; fn: (val: AB | null) => { a: number; b: string; }; }' is not assignable to type '{ clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((val: AB | null) => { a: number; b: string; }) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; } & { ...; }'.\n      Type '{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: (clk: AB) => boolean; fn: (val: AB | null) => { a: number; b: string; }; }' is not assignable to type '{ clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((val: AB | null) => { a: number; b: string; }) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }'.\n        Types of property 'filter' are incompatible.\n          Type '(clk: AB) => boolean' is not assignable to type '(clk: AB | null) => boolean'.\n            Types of parameters 'clk' and 'clk' are incompatible.\n              Type 'AB | null' is not assignable to type 'AB'.\n                Type 'null' is not assignable to type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2413,"col":16},"message":"Argument of type '[{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: () => number; fn: (val: AB | null) => { a: number; b: string; }; }]' is not assignable to parameter of type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: (((clk: AB | null) => clk is AB | null) & ((clk: AB | null) => clk is AB | null)) | undefined; fn?: (((val: AB | null) => { ...; }) & ((clk: AB | null) => any)) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: bool...'.\n  Type '[{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: () => number; fn: (val: AB | null) => { a: number; b: string; }; }]' is not assignable to type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((val: AB | null) => { a: number; b: string; }) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; } & { ...; }]'.\n    Type '{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: () => number; fn: (val: AB | null) => { a: number; b: string; }; }' is not assignable to type '{ clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((val: AB | null) => { a: number; b: string; }) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; } & { ...; }'.\n      Type '{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: () => number; fn: (val: AB | null) => { a: number; b: string; }; }' is not assignable to type '{ clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((val: AB | null) => { a: number; b: string; }) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }'.\n        The types returned by 'filter(...)' are incompatible between these types.\n          Type 'number' is not assignable to type 'boolean'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2415,"col":104},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2415,"col":108},"message":"Property 'c' does not exist on type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2415,"col":113},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2417,"col":104},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2417,"col":108},"message":"Property 'c' does not exist on type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2417,"col":113},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2419,"col":63},"message":"'clk' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2419,"col":104},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2419,"col":108},"message":"Property 'c' does not exist on type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2419,"col":113},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2421,"col":16},"message":"Argument of type '[{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: (clk: AB) => boolean; fn: (val: AB | null) => { a: any; b: string; }; }]' is not assignable to parameter of type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: (((clk: AB | null) => clk is AB | null) & ((clk: AB | null) => clk is AB | null)) | undefined; fn?: (((clk: AB | null) => any) & ((clk: AB | null) => any)) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean |...'.\n  Type '[{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: (clk: AB) => boolean; fn: (val: AB | null) => { a: any; b: string; }; }]' is not assignable to type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }]'.\n    Type '{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: (clk: AB) => boolean; fn: (val: AB | null) => { a: any; b: string; }; }' is not assignable to type '{ clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }'.\n      Types of property 'filter' are incompatible.\n        Type '(clk: AB) => boolean' is not assignable to type '(clk: AB | null) => boolean'.\n          Types of parameters 'clk' and 'clk' are incompatible.\n            Type 'AB | null' is not assignable to type 'AB'.\n              Type 'null' is not assignable to type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2421,"col":104},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2421,"col":108},"message":"Property 'c' does not exist on type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2421,"col":113},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2423,"col":16},"message":"Argument of type '[{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: () => number; fn: (val: AB | null) => { a: any; b: string; }; }]' is not assignable to parameter of type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: (((clk: AB | null) => clk is AB | null) & ((clk: AB | null) => clk is AB | null)) | undefined; fn?: (((clk: AB | null) => any) & ((clk: AB | null) => any)) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean |...'.\n  Type '[{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: () => number; fn: (val: AB | null) => { a: any; b: string; }; }]' is not assignable to type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }]'.\n    Type '{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: () => number; fn: (val: AB | null) => { a: any; b: string; }; }' is not assignable to type '{ clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }'.\n      The types returned by 'filter(...)' are incompatible between these types.\n        Type 'number' is not assignable to type 'boolean'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2423,"col":104},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2423,"col":108},"message":"Property 'c' does not exist on type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2423,"col":113},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2425,"col":16},"message":"Argument of type '[{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: (clk: AB | null) => boolean; fn: (val: ABN) => { a: any; b: string; }; }]' is not assignable to parameter of type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: (((clk: AB | null) => clk is AB | null) & ((clk: AB | null) => clk is AB | null)) | undefined; fn?: (((clk: AB | null) => any) & ((clk: AB | null) => any)) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean |...'.\n  Type '[{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: (clk: AB | null) => boolean; fn: (val: ABN) => { a: any; b: string; }; }]' is not assignable to type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }]'.\n    Type '{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: (clk: AB | null) => boolean; fn: (val: ABN) => { a: any; b: string; }; }' is not assignable to type '{ clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }'.\n      Types of property 'fn' are incompatible.\n        Type '(val: ABN) => { a: any; b: string; }' is not assignable to type '(clk: AB | null) => any'.\n          Types of parameters 'val' and 'clk' are incompatible.\n            Type 'AB | null' is not assignable to type 'ABN'.\n              Type 'null' is not assignable to type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2425,"col":113},"message":"Property 'c' does not exist on type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2427,"col":88},"message":"Type '(val: ABN) => { a: any; b: string; }' is not assignable to type '((clk: AB | null) => any) & ((val: ABN) => { a: any; b: string; })'.\n  Type '(val: ABN) => { a: any; b: string; }' is not assignable to type '(clk: AB | null) => any'.\n    Types of parameters 'val' and 'clk' are incompatible.\n      Type 'AB | null' is not assignable to type 'ABN'.\n        Type 'null' is not assignable to type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2427,"col":113},"message":"Property 'c' does not exist on type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2429,"col":16},"message":"Argument of type '[{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: (clk: AB | null) => boolean; fn: (val: ABN) => { a: any; b: string; }; }]' is not assignable to parameter of type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: (((clk: AB | null) => clk is AB | null) & ((clk: AB | null) => clk is AB | null)) | undefined; fn?: (((clk: AB | null) => any) & ((clk: AB | null) => any)) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean |...'.\n  Type '[{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: (clk: AB | null) => boolean; fn: (val: ABN) => { a: any; b: string; }; }]' is not assignable to type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }]'.\n    Type '{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: (clk: AB | null) => boolean; fn: (val: ABN) => { a: any; b: string; }; }' is not assignable to type '{ clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }'.\n      Types of property 'fn' are incompatible.\n        Type '(val: ABN) => { a: any; b: string; }' is not assignable to type '(clk: AB | null) => any'.\n          Types of parameters 'val' and 'clk' are incompatible.\n            Type 'AB | null' is not assignable to type 'ABN'.\n              Type 'null' is not assignable to type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2429,"col":63},"message":"'clk' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2429,"col":113},"message":"Property 'c' does not exist on type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2431,"col":16},"message":"Argument of type '[{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: (clk: AB) => boolean; fn: (val: ABN) => { a: any; b: string; }; }]' is not assignable to parameter of type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: (((clk: AB | null) => clk is AB | null) & ((clk: AB | null) => clk is AB | null)) | undefined; fn?: (((clk: AB | null) => any) & ((clk: AB | null) => any)) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean |...'.\n  Type '[{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: (clk: AB) => boolean; fn: (val: ABN) => { a: any; b: string; }; }]' is not assignable to type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; } & { ...; }]'.\n    Type '{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: (clk: AB) => boolean; fn: (val: ABN) => { a: any; b: string; }; }' is not assignable to type '{ clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; } & { ...; }'.\n      Type '{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: (clk: AB) => boolean; fn: (val: ABN) => { a: any; b: string; }; }' is not assignable to type '{ clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }'.\n        Types of property 'filter' are incompatible.\n          Type '(clk: AB) => boolean' is not assignable to type '(clk: AB | null) => boolean'.\n            Types of parameters 'clk' and 'clk' are incompatible.\n              Type 'AB | null' is not assignable to type 'AB'.\n                Type 'null' is not assignable to type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2431,"col":113},"message":"Property 'c' does not exist on type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2433,"col":16},"message":"Argument of type '[{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: () => number; fn: (val: ABN) => { a: any; b: string; }; }]' is not assignable to parameter of type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: (((clk: AB | null) => clk is AB | null) & ((clk: AB | null) => clk is AB | null)) | undefined; fn?: (((clk: AB | null) => any) & ((clk: AB | null) => any)) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean |...'.\n  Type '[{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: () => number; fn: (val: ABN) => { a: any; b: string; }; }]' is not assignable to type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; } & { ...; }]'.\n    Type '{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: () => number; fn: (val: ABN) => { a: any; b: string; }; }' is not assignable to type '{ clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; } & { ...; }'.\n      Type '{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: () => number; fn: (val: ABN) => { a: any; b: string; }; }' is not assignable to type '{ clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }'.\n        The types returned by 'filter(...)' are incompatible between these types.\n          Type 'number' is not assignable to type 'boolean'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2433,"col":113},"message":"Property 'c' does not exist on type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2435,"col":104},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2435,"col":108},"message":"Property 'c' does not exist on type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2435,"col":113},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2437,"col":88},"message":"Type '(val: ABN) => { a: any; b: string; }' is not assignable to type '((clk: AB | null) => any) & ((val: ABN) => { a: any; b: string; })'.\n  Type '(val: ABN) => { a: any; b: string; }' is not assignable to type '(clk: AB | null) => any'.\n    Types of parameters 'val' and 'clk' are incompatible.\n      Type 'AB | null' is not assignable to type 'ABN'.\n        Type 'null' is not assignable to type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2437,"col":113},"message":"Property 'c' does not exist on type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2439,"col":108},"message":"Property 'c' does not exist on type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2441,"col":88},"message":"Type '(val: ABN) => { a: any; b: string; }' is not assignable to type '((clk: AB) => any) & ((val: ABN) => { a: any; b: string; })'.\n  Type '(val: ABN) => { a: any; b: string; }' is not assignable to type '(clk: AB) => any'.\n    Types of parameters 'val' and 'clk' are incompatible.\n      Type 'AB' is not assignable to type 'ABN'.\n        Types of property 'b' are incompatible.\n          Type 'string' is not assignable to type 'number'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2441,"col":113},"message":"Property 'c' does not exist on type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2443,"col":104},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2443,"col":108},"message":"Property 'c' does not exist on type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2443,"col":113},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2445,"col":16},"message":"Argument of type '[{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: (clk: AB | null) => clk is AB; fn: (val: ABN) => { a: number; b: number; }; }]' is not assignable to parameter of type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: (((clk: AB | null) => clk is AB | null) & ((clk: AB | null) => clk is AB | null)) | undefined; fn?: (((clk: AB | null) => any) & ((clk: AB | null) => any)) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean |...'.\n  Type '[{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: (clk: AB | null) => clk is AB; fn: (val: ABN) => { a: number; b: number; }; }]' is not assignable to type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }]'.\n    Type '{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: (clk: AB | null) => clk is AB; fn: (val: ABN) => { a: number; b: number; }; }' is not assignable to type '{ clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }'.\n      Types of property 'fn' are incompatible.\n        Type '(val: ABN) => { a: number; b: number; }' is not assignable to type '(clk: AB | null) => any'.\n          Types of parameters 'val' and 'clk' are incompatible.\n            Type 'AB | null' is not assignable to type 'ABN'.\n              Type 'null' is not assignable to type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2447,"col":17},"message":"Argument of type '{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: (clk: any) => clk is AB; fn: () => { a: number; b: number; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: number; }; targetType: AB; }; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: number; }; targetType: AB; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2447,"col":55},"message":"Parameter 'clk' implicitly has an 'any' type.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2449,"col":88},"message":"Type '(val: ABN) => { a: number; b: number; }' is not assignable to type '((clk: AB) => any) & ((val: ABN) => { a: number; b: number; })'.\n  Type '(val: ABN) => { a: number; b: number; }' is not assignable to type '(clk: AB) => any'.\n    Types of parameters 'val' and 'clk' are incompatible.\n      Type 'AB' is not assignable to type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2451,"col":17},"message":"Argument of type '{ clock: EventCallable<AB | null>; target: StoreWritable<AB>; filter: BooleanConstructor; fn: () => { a: number; b: number; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: number; }; targetType: AB; }; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: number; }; targetType: AB; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2614,"col":17},"message":"Argument of type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: (clk: AB | null) => boolean; }' is not assignable to parameter of type '{ error: \"clock should extend target type\"; targets: { clockType: AB | null; targetType: AB; }; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"clock should extend target type\"; targets: { clockType: AB | null; targetType: AB; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2616,"col":17},"message":"Argument of type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: (clk: AB | null) => boolean; }' is not assignable to parameter of type '{ error: \"clock should extend target type\"; targets: { clockType: AB | null; targetType: AB; }; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"clock should extend target type\"; targets: { clockType: AB | null; targetType: AB; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2618,"col":17},"message":"Argument of type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: (clk: AB | null) => boolean; }' is not assignable to parameter of type '{ error: \"clock should extend target type\"; targets: { clockType: AB | null; targetType: AB; }; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"clock should extend target type\"; targets: { clockType: AB | null; targetType: AB; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2618,"col":68},"message":"'clk' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2620,"col":17},"message":"Argument of type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: (clk: AB) => boolean; }' is not assignable to parameter of type '{ error: \"clock should extend target type\"; targets: { clockType: AB | null; targetType: AB; }; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"clock should extend target type\"; targets: { clockType: AB | null; targetType: AB; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2622,"col":17},"message":"Argument of type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: () => number; }' is not assignable to parameter of type '{ error: \"clock should extend target type\"; targets: { clockType: AB | null; targetType: AB; }; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"clock should extend target type\"; targets: { clockType: AB | null; targetType: AB; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2624,"col":17},"message":"Argument of type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: StoreWritable<boolean>; }' is not assignable to parameter of type '{ error: \"clock should extend target type\"; targets: { clockType: AB | null; targetType: AB; }; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"clock should extend target type\"; targets: { clockType: AB | null; targetType: AB; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2657,"col":109},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2657,"col":118},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2671,"col":68},"message":"'clk' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2673,"col":16},"message":"Argument of type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: (clk: AB) => boolean; fn: (val: AB | null) => { ...; }; }]' is not assignable to parameter of type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: (((clk: AB | null) => clk is AB | null) & ((clk: AB | null) => clk is AB | null)) | undefined; fn?: (((clk: AB | null) => any) & ((clk: AB | null) => any)) | undefined; target: StoreWritable<...>; greedy?: boolean | unde...'.\n  Type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: (clk: AB) => boolean; fn: (val: AB | null) => { ...; }; }]' is not assignable to type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }]'.\n    Type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: (clk: AB) => boolean; fn: (val: AB | null) => { ...; }; }' is not assignable to type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }'.\n      Types of property 'filter' are incompatible.\n        Type '(clk: AB) => boolean' is not assignable to type '(clk: AB | null) => boolean'.\n          Types of parameters 'clk' and 'clk' are incompatible.\n            Type 'AB | null' is not assignable to type 'AB'.\n              Type 'null' is not assignable to type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2675,"col":16},"message":"Argument of type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: () => number; fn: (val: AB | null) => { ...; }; }]' is not assignable to parameter of type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: (((clk: AB | null) => clk is AB | null) & ((clk: AB | null) => clk is AB | null)) | undefined; fn?: (((clk: AB | null) => any) & ((clk: AB | null) => any)) | undefined; target: StoreWritable<...>; greedy?: boolean | unde...'.\n  Type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: () => number; fn: (val: AB | null) => { ...; }; }]' is not assignable to type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }]'.\n    Type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: () => number; fn: (val: AB | null) => { ...; }; }' is not assignable to type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }'.\n      The types returned by 'filter(...)' are incompatible between these types.\n        Type 'number' is not assignable to type 'boolean'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2677,"col":68},"message":"'clk' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2679,"col":16},"message":"Argument of type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: (clk: AB) => boolean; fn: (val: AB | null) => { ...; }; }]' is not assignable to parameter of type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: (((clk: AB | null) => clk is AB | null) & ((clk: AB | null) => clk is AB | null)) | undefined; fn?: (((val: AB | null) => { ...; }) & ((clk: AB | null) => any)) | undefined; target: StoreWritable<...>; greedy?: boolean |...'.\n  Type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: (clk: AB) => boolean; fn: (val: AB | null) => { ...; }; }]' is not assignable to type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((val: AB | null) => { ...; }) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; } & { ...; }]'.\n    Type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: (clk: AB) => boolean; fn: (val: AB | null) => { ...; }; }' is not assignable to type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((val: AB | null) => { ...; }) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; } & { ...; }'.\n      Type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: (clk: AB) => boolean; fn: (val: AB | null) => { ...; }; }' is not assignable to type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((val: AB | null) => { ...; }) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }'.\n        Types of property 'filter' are incompatible.\n          Type '(clk: AB) => boolean' is not assignable to type '(clk: AB | null) => boolean'.\n            Types of parameters 'clk' and 'clk' are incompatible.\n              Type 'AB | null' is not assignable to type 'AB'.\n                Type 'null' is not assignable to type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2681,"col":16},"message":"Argument of type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: () => number; fn: (val: AB | null) => { ...; }; }]' is not assignable to parameter of type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: (((clk: AB | null) => clk is AB | null) & ((clk: AB | null) => clk is AB | null)) | undefined; fn?: (((val: AB | null) => { ...; }) & ((clk: AB | null) => any)) | undefined; target: StoreWritable<...>; greedy?: boolean |...'.\n  Type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: () => number; fn: (val: AB | null) => { ...; }; }]' is not assignable to type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((val: AB | null) => { ...; }) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; } & { ...; }]'.\n    Type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: () => number; fn: (val: AB | null) => { ...; }; }' is not assignable to type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((val: AB | null) => { ...; }) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; } & { ...; }'.\n      Type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: () => number; fn: (val: AB | null) => { ...; }; }' is not assignable to type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((val: AB | null) => { ...; }) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }'.\n        The types returned by 'filter(...)' are incompatible between these types.\n          Type 'number' is not assignable to type 'boolean'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2683,"col":109},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2683,"col":113},"message":"Property 'c' does not exist on type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2683,"col":118},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2685,"col":109},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2685,"col":113},"message":"Property 'c' does not exist on type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2685,"col":118},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2687,"col":68},"message":"'clk' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2687,"col":109},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2687,"col":113},"message":"Property 'c' does not exist on type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2687,"col":118},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2689,"col":16},"message":"Argument of type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: (clk: AB) => boolean; fn: (val: AB | null) => { ...; }; }]' is not assignable to parameter of type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: (((clk: AB | null) => clk is AB | null) & ((clk: AB | null) => clk is AB | null)) | undefined; fn?: (((clk: AB | null) => any) & ((clk: AB | null) => any)) | undefined; target: StoreWritable<...>; greedy?: boolean | unde...'.\n  Type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: (clk: AB) => boolean; fn: (val: AB | null) => { ...; }; }]' is not assignable to type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }]'.\n    Type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: (clk: AB) => boolean; fn: (val: AB | null) => { ...; }; }' is not assignable to type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }'.\n      Types of property 'filter' are incompatible.\n        Type '(clk: AB) => boolean' is not assignable to type '(clk: AB | null) => boolean'.\n          Types of parameters 'clk' and 'clk' are incompatible.\n            Type 'AB | null' is not assignable to type 'AB'.\n              Type 'null' is not assignable to type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2689,"col":109},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2689,"col":113},"message":"Property 'c' does not exist on type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2689,"col":118},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2691,"col":16},"message":"Argument of type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: () => number; fn: (val: AB | null) => { ...; }; }]' is not assignable to parameter of type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: (((clk: AB | null) => clk is AB | null) & ((clk: AB | null) => clk is AB | null)) | undefined; fn?: (((clk: AB | null) => any) & ((clk: AB | null) => any)) | undefined; target: StoreWritable<...>; greedy?: boolean | unde...'.\n  Type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: () => number; fn: (val: AB | null) => { ...; }; }]' is not assignable to type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }]'.\n    Type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: () => number; fn: (val: AB | null) => { ...; }; }' is not assignable to type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }'.\n      The types returned by 'filter(...)' are incompatible between these types.\n        Type 'number' is not assignable to type 'boolean'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2691,"col":109},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2691,"col":113},"message":"Property 'c' does not exist on type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2691,"col":118},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2693,"col":16},"message":"Argument of type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: (clk: AB | null) => boolean; fn: (val: ABN) => { ...; }; }]' is not assignable to parameter of type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: (((clk: AB | null) => clk is AB | null) & ((clk: AB | null) => clk is AB | null)) | undefined; fn?: (((clk: AB | null) => any) & ((clk: AB | null) => any)) | undefined; target: StoreWritable<...>; greedy?: boolean | unde...'.\n  Type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: (clk: AB | null) => boolean; fn: (val: ABN) => { ...; }; }]' is not assignable to type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }]'.\n    Type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: (clk: AB | null) => boolean; fn: (val: ABN) => { ...; }; }' is not assignable to type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }'.\n      Types of property 'fn' are incompatible.\n        Type '(val: ABN) => { a: any; b: string; }' is not assignable to type '(clk: AB | null) => any'.\n          Types of parameters 'val' and 'clk' are incompatible.\n            Type 'AB | null' is not assignable to type 'ABN'.\n              Type 'null' is not assignable to type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2693,"col":118},"message":"Property 'c' does not exist on type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2695,"col":93},"message":"Type '(val: ABN) => { a: any; b: string; }' is not assignable to type '((clk: AB | null) => any) & ((val: ABN) => { a: any; b: string; })'.\n  Type '(val: ABN) => { a: any; b: string; }' is not assignable to type '(clk: AB | null) => any'.\n    Types of parameters 'val' and 'clk' are incompatible.\n      Type 'AB | null' is not assignable to type 'ABN'.\n        Type 'null' is not assignable to type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2695,"col":118},"message":"Property 'c' does not exist on type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2697,"col":16},"message":"Argument of type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: (clk: AB | null) => boolean; fn: (val: ABN) => { ...; }; }]' is not assignable to parameter of type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: (((clk: AB | null) => clk is AB | null) & ((clk: AB | null) => clk is AB | null)) | undefined; fn?: (((clk: AB | null) => any) & ((clk: AB | null) => any)) | undefined; target: StoreWritable<...>; greedy?: boolean | unde...'.\n  Type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: (clk: AB | null) => boolean; fn: (val: ABN) => { ...; }; }]' is not assignable to type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }]'.\n    Type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: (clk: AB | null) => boolean; fn: (val: ABN) => { ...; }; }' is not assignable to type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }'.\n      Types of property 'fn' are incompatible.\n        Type '(val: ABN) => { a: any; b: string; }' is not assignable to type '(clk: AB | null) => any'.\n          Types of parameters 'val' and 'clk' are incompatible.\n            Type 'AB | null' is not assignable to type 'ABN'.\n              Type 'null' is not assignable to type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2697,"col":68},"message":"'clk' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2697,"col":118},"message":"Property 'c' does not exist on type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2699,"col":16},"message":"Argument of type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: (clk: AB) => boolean; fn: (val: ABN) => { ...; }; }]' is not assignable to parameter of type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: (((clk: AB | null) => clk is AB | null) & ((clk: AB | null) => clk is AB | null)) | undefined; fn?: (((clk: AB | null) => any) & ((clk: AB | null) => any)) | undefined; target: StoreWritable<...>; greedy?: boolean | unde...'.\n  Type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: (clk: AB) => boolean; fn: (val: ABN) => { ...; }; }]' is not assignable to type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; } & { ...; }]'.\n    Type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: (clk: AB) => boolean; fn: (val: ABN) => { ...; }; }' is not assignable to type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; } & { ...; }'.\n      Type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: (clk: AB) => boolean; fn: (val: ABN) => { ...; }; }' is not assignable to type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }'.\n        Types of property 'filter' are incompatible.\n          Type '(clk: AB) => boolean' is not assignable to type '(clk: AB | null) => boolean'.\n            Types of parameters 'clk' and 'clk' are incompatible.\n              Type 'AB | null' is not assignable to type 'AB'.\n                Type 'null' is not assignable to type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2699,"col":118},"message":"Property 'c' does not exist on type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2701,"col":16},"message":"Argument of type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: () => number; fn: (val: ABN) => { ...; }; }]' is not assignable to parameter of type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: (((clk: AB | null) => clk is AB | null) & ((clk: AB | null) => clk is AB | null)) | undefined; fn?: (((clk: AB | null) => any) & ((clk: AB | null) => any)) | undefined; target: StoreWritable<...>; greedy?: boolean | unde...'.\n  Type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: () => number; fn: (val: ABN) => { ...; }; }]' is not assignable to type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; } & { ...; }]'.\n    Type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: () => number; fn: (val: ABN) => { ...; }; }' is not assignable to type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; } & { ...; }'.\n      Type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: () => number; fn: (val: ABN) => { ...; }; }' is not assignable to type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }'.\n        The types returned by 'filter(...)' are incompatible between these types.\n          Type 'number' is not assignable to type 'boolean'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2701,"col":118},"message":"Property 'c' does not exist on type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2703,"col":109},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2703,"col":113},"message":"Property 'c' does not exist on type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2703,"col":118},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2705,"col":93},"message":"Type '(val: ABN) => { a: any; b: string; }' is not assignable to type '((clk: AB | null) => any) & ((val: ABN) => { a: any; b: string; })'.\n  Type '(val: ABN) => { a: any; b: string; }' is not assignable to type '(clk: AB | null) => any'.\n    Types of parameters 'val' and 'clk' are incompatible.\n      Type 'AB | null' is not assignable to type 'ABN'.\n        Type 'null' is not assignable to type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2705,"col":118},"message":"Property 'c' does not exist on type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2707,"col":113},"message":"Property 'c' does not exist on type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2709,"col":93},"message":"Type '(val: ABN) => { a: any; b: string; }' is not assignable to type '((clk: AB) => any) & ((val: ABN) => { a: any; b: string; })'.\n  Type '(val: ABN) => { a: any; b: string; }' is not assignable to type '(clk: AB) => any'.\n    Types of parameters 'val' and 'clk' are incompatible.\n      Type 'AB' is not assignable to type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2709,"col":118},"message":"Property 'c' does not exist on type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2711,"col":109},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2711,"col":113},"message":"Property 'c' does not exist on type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2711,"col":118},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2713,"col":16},"message":"Argument of type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: (clk: AB | null) => clk is AB; fn: (val: ABN) => { ...; }; }]' is not assignable to parameter of type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: (((clk: AB | null) => clk is AB | null) & ((clk: AB | null) => clk is AB | null)) | undefined; fn?: (((clk: AB | null) => any) & ((clk: AB | null) => any)) | undefined; target: StoreWritable<...>; greedy?: boolean | unde...'.\n  Type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: (clk: AB | null) => clk is AB; fn: (val: ABN) => { ...; }; }]' is not assignable to type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }]'.\n    Type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: (clk: AB | null) => clk is AB; fn: (val: ABN) => { ...; }; }' is not assignable to type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; }'.\n      Types of property 'fn' are incompatible.\n        Type '(val: ABN) => { a: number; b: number; }' is not assignable to type '(clk: AB | null) => any'.\n          Types of parameters 'val' and 'clk' are incompatible.\n            Type 'AB | null' is not assignable to type 'ABN'.\n              Type 'null' is not assignable to type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2715,"col":17},"message":"Argument of type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: (clk: any) => clk is AB; fn: () => { ...; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: number; }; targetType: AB; }; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: number; }; targetType: AB; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2715,"col":60},"message":"Parameter 'clk' implicitly has an 'any' type.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2717,"col":93},"message":"Type '(val: ABN) => { a: number; b: number; }' is not assignable to type '((clk: AB) => any) & ((val: ABN) => { a: number; b: number; })'.\n  Type '(val: ABN) => { a: number; b: number; }' is not assignable to type '(clk: AB) => any'.\n    Types of parameters 'val' and 'clk' are incompatible.\n      Type 'AB' is not assignable to type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2719,"col":17},"message":"Argument of type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; target: StoreWritable<AB>; filter: BooleanConstructor; fn: () => { ...; }; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: number; }; targetType: AB; }; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: number; b: number; }; targetType: AB; }; }'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2883,"col":51},"message":"'clk' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2885,"col":16},"message":"Argument of type '[{ clock: EventCallable<AB | null>; filter: (clk: AB) => boolean; }]' is not assignable to parameter of type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter: (clk: AB | null) => clk is AB | null; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }] | [config: ...]'.\n  Type '[{ clock: EventCallable<AB | null>; filter: (clk: AB) => boolean; }]' is not assignable to type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter: (clk: AB | null) => boolean; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }]'.\n    Type '{ clock: EventCallable<AB | null>; filter: (clk: AB) => boolean; }' is not assignable to type '{ clock: EventCallable<AB | null>; source?: undefined; filter: (clk: AB | null) => boolean; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }'.\n      Type '{ clock: EventCallable<AB | null>; filter: (clk: AB) => boolean; }' is not assignable to type '{ clock: EventCallable<AB | null>; source?: undefined; filter: (clk: AB | null) => boolean; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }'.\n        Types of property 'filter' are incompatible.\n          Type '(clk: AB) => boolean' is not assignable to type '(clk: AB | null) => boolean'.\n            Types of parameters 'clk' and 'clk' are incompatible.\n              Type 'AB | null' is not assignable to type 'AB'.\n                Type 'null' is not assignable to type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2887,"col":16},"message":"Argument of type '[{ clock: EventCallable<AB | null>; filter: () => number; }]' is not assignable to parameter of type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter: (clk: AB | null) => clk is AB | null; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }] | [config: ...]'.\n  Type '[{ clock: EventCallable<AB | null>; filter: () => number; }]' is not assignable to type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter: (clk: AB | null) => boolean; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }]'.\n    Type '{ clock: EventCallable<AB | null>; filter: () => number; }' is not assignable to type '{ clock: EventCallable<AB | null>; source?: undefined; filter: (clk: AB | null) => boolean; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }'.\n      Type '{ clock: EventCallable<AB | null>; filter: () => number; }' is not assignable to type '{ clock: EventCallable<AB | null>; source?: undefined; filter: (clk: AB | null) => boolean; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }'.\n        The types returned by 'filter(...)' are incompatible between these types.\n          Type 'number' is not assignable to type 'boolean'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2934,"col":51},"message":"'clk' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2936,"col":16},"message":"Argument of type '[{ clock: EventCallable<AB | null>; filter: (clk: AB) => boolean; fn: (val: AB | null) => { a: number; b: string; }; }]' is not assignable to parameter of type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => clk is AB | null) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }] | [config: ...]'.\n  Type '[{ clock: EventCallable<AB | null>; filter: (clk: AB) => boolean; fn: (val: AB | null) => { a: number; b: string; }; }]' is not assignable to type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }]'.\n    Type '{ clock: EventCallable<AB | null>; filter: (clk: AB) => boolean; fn: (val: AB | null) => { a: number; b: string; }; }' is not assignable to type '{ clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }'.\n      Types of property 'filter' are incompatible.\n        Type '(clk: AB) => boolean' is not assignable to type '(clk: AB | null) => boolean'.\n          Types of parameters 'clk' and 'clk' are incompatible.\n            Type 'AB | null' is not assignable to type 'AB'.\n              Type 'null' is not assignable to type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2938,"col":16},"message":"Argument of type '[{ clock: EventCallable<AB | null>; filter: () => number; fn: (val: AB | null) => { a: number; b: string; }; }]' is not assignable to parameter of type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => clk is AB | null) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }] | [config: ...]'.\n  Type '[{ clock: EventCallable<AB | null>; filter: () => number; fn: (val: AB | null) => { a: number; b: string; }; }]' is not assignable to type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }]'.\n    Type '{ clock: EventCallable<AB | null>; filter: () => number; fn: (val: AB | null) => { a: number; b: string; }; }' is not assignable to type '{ clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }'.\n      The types returned by 'filter(...)' are incompatible between these types.\n        Type 'number' is not assignable to type 'boolean'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2940,"col":51},"message":"'clk' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2942,"col":16},"message":"Argument of type '[{ clock: EventCallable<AB | null>; filter: (clk: AB) => boolean; fn: (val: AB | null) => { a: number; b: string; }; }]' is not assignable to parameter of type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => clk is AB | null) | undefined; fn?: ((val: AB | null) => { a: number; b: string; }) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }] | [con...'.\n  Type '[{ clock: EventCallable<AB | null>; filter: (clk: AB) => boolean; fn: (val: AB | null) => { a: number; b: string; }; }]' is not assignable to type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((val: AB | null) => { a: number; b: string; }) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }]'.\n    Type '{ clock: EventCallable<AB | null>; filter: (clk: AB) => boolean; fn: (val: AB | null) => { a: number; b: string; }; }' is not assignable to type '{ clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((val: AB | null) => { a: number; b: string; }) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }'.\n      Type '{ clock: EventCallable<AB | null>; filter: (clk: AB) => boolean; fn: (val: AB | null) => { a: number; b: string; }; }' is not assignable to type '{ clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((val: AB | null) => { a: number; b: string; }) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }'.\n        Types of property 'filter' are incompatible.\n          Type '(clk: AB) => boolean' is not assignable to type '(clk: AB | null) => boolean'.\n            Types of parameters 'clk' and 'clk' are incompatible.\n              Type 'AB | null' is not assignable to type 'AB'.\n                Type 'null' is not assignable to type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2944,"col":16},"message":"Argument of type '[{ clock: EventCallable<AB | null>; filter: () => number; fn: (val: AB | null) => { a: number; b: string; }; }]' is not assignable to parameter of type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => clk is AB | null) | undefined; fn?: ((val: AB | null) => { a: number; b: string; }) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }] | [con...'.\n  Type '[{ clock: EventCallable<AB | null>; filter: () => number; fn: (val: AB | null) => { a: number; b: string; }; }]' is not assignable to type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((val: AB | null) => { a: number; b: string; }) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }]'.\n    Type '{ clock: EventCallable<AB | null>; filter: () => number; fn: (val: AB | null) => { a: number; b: string; }; }' is not assignable to type '{ clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((val: AB | null) => { a: number; b: string; }) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }'.\n      Type '{ clock: EventCallable<AB | null>; filter: () => number; fn: (val: AB | null) => { a: number; b: string; }; }' is not assignable to type '{ clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((val: AB | null) => { a: number; b: string; }) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }'.\n        The types returned by 'filter(...)' are incompatible between these types.\n          Type 'number' is not assignable to type 'boolean'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2946,"col":92},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2946,"col":96},"message":"Property 'c' does not exist on type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2946,"col":101},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2948,"col":92},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2948,"col":96},"message":"Property 'c' does not exist on type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2948,"col":101},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2950,"col":51},"message":"'clk' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2950,"col":92},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2950,"col":96},"message":"Property 'c' does not exist on type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2950,"col":101},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2952,"col":16},"message":"Argument of type '[{ clock: EventCallable<AB | null>; filter: (clk: AB) => boolean; fn: (val: AB | null) => { a: any; b: string; }; }]' is not assignable to parameter of type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => clk is AB | null) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }] | [config: ...]'.\n  Type '[{ clock: EventCallable<AB | null>; filter: (clk: AB) => boolean; fn: (val: AB | null) => { a: any; b: string; }; }]' is not assignable to type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }]'.\n    Type '{ clock: EventCallable<AB | null>; filter: (clk: AB) => boolean; fn: (val: AB | null) => { a: any; b: string; }; }' is not assignable to type '{ clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }'.\n      Types of property 'filter' are incompatible.\n        Type '(clk: AB) => boolean' is not assignable to type '(clk: AB | null) => boolean'.\n          Types of parameters 'clk' and 'clk' are incompatible.\n            Type 'AB | null' is not assignable to type 'AB'.\n              Type 'null' is not assignable to type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2952,"col":92},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2952,"col":96},"message":"Property 'c' does not exist on type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2952,"col":101},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2954,"col":16},"message":"Argument of type '[{ clock: EventCallable<AB | null>; filter: () => number; fn: (val: AB | null) => { a: any; b: string; }; }]' is not assignable to parameter of type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => clk is AB | null) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }] | [config: ...]'.\n  Type '[{ clock: EventCallable<AB | null>; filter: () => number; fn: (val: AB | null) => { a: any; b: string; }; }]' is not assignable to type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }]'.\n    Type '{ clock: EventCallable<AB | null>; filter: () => number; fn: (val: AB | null) => { a: any; b: string; }; }' is not assignable to type '{ clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }'.\n      The types returned by 'filter(...)' are incompatible between these types.\n        Type 'number' is not assignable to type 'boolean'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2954,"col":92},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2954,"col":96},"message":"Property 'c' does not exist on type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2954,"col":101},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2956,"col":16},"message":"Argument of type '[{ clock: EventCallable<AB | null>; filter: (clk: AB | null) => boolean; fn: (val: ABN) => { a: any; b: string; }; }]' is not assignable to parameter of type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => clk is AB | null) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }] | [config: ...]'.\n  Type '[{ clock: EventCallable<AB | null>; filter: (clk: AB | null) => boolean; fn: (val: ABN) => { a: any; b: string; }; }]' is not assignable to type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }]'.\n    Type '{ clock: EventCallable<AB | null>; filter: (clk: AB | null) => boolean; fn: (val: ABN) => { a: any; b: string; }; }' is not assignable to type '{ clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }'.\n      Types of property 'fn' are incompatible.\n        Type '(val: ABN) => { a: any; b: string; }' is not assignable to type '(clk: AB | null) => any'.\n          Types of parameters 'val' and 'clk' are incompatible.\n            Type 'AB | null' is not assignable to type 'ABN'.\n              Type 'null' is not assignable to type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2956,"col":101},"message":"Property 'c' does not exist on type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2958,"col":76},"message":"Type '(val: ABN) => { a: any; b: string; }' is not assignable to type '((clk: AB | null) => any) & ((val: ABN) => { a: any; b: string; })'.\n  Type '(val: ABN) => { a: any; b: string; }' is not assignable to type '(clk: AB | null) => any'.\n    Types of parameters 'val' and 'clk' are incompatible.\n      Type 'AB | null' is not assignable to type 'ABN'.\n        Type 'null' is not assignable to type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2958,"col":101},"message":"Property 'c' does not exist on type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2960,"col":16},"message":"Argument of type '[{ clock: EventCallable<AB | null>; filter: (clk: AB | null) => boolean; fn: (val: ABN) => { a: any; b: string; }; }]' is not assignable to parameter of type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => clk is AB | null) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }] | [config: ...]'.\n  Type '[{ clock: EventCallable<AB | null>; filter: (clk: AB | null) => boolean; fn: (val: ABN) => { a: any; b: string; }; }]' is not assignable to type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }]'.\n    Type '{ clock: EventCallable<AB | null>; filter: (clk: AB | null) => boolean; fn: (val: ABN) => { a: any; b: string; }; }' is not assignable to type '{ clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }'.\n      Types of property 'fn' are incompatible.\n        Type '(val: ABN) => { a: any; b: string; }' is not assignable to type '(clk: AB | null) => any'.\n          Types of parameters 'val' and 'clk' are incompatible.\n            Type 'AB | null' is not assignable to type 'ABN'.\n              Type 'null' is not assignable to type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2960,"col":51},"message":"'clk' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2960,"col":101},"message":"Property 'c' does not exist on type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2962,"col":16},"message":"Argument of type '[{ clock: EventCallable<AB | null>; filter: (clk: AB) => boolean; fn: (val: ABN) => { a: any; b: string; }; }]' is not assignable to parameter of type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => clk is AB | null) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }] | [config: ...]'.\n  Type '[{ clock: EventCallable<AB | null>; filter: (clk: AB) => boolean; fn: (val: ABN) => { a: any; b: string; }; }]' is not assignable to type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }]'.\n    Type '{ clock: EventCallable<AB | null>; filter: (clk: AB) => boolean; fn: (val: ABN) => { a: any; b: string; }; }' is not assignable to type '{ clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }'.\n      Type '{ clock: EventCallable<AB | null>; filter: (clk: AB) => boolean; fn: (val: ABN) => { a: any; b: string; }; }' is not assignable to type '{ clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }'.\n        Types of property 'filter' are incompatible.\n          Type '(clk: AB) => boolean' is not assignable to type '(clk: AB | null) => boolean'.\n            Types of parameters 'clk' and 'clk' are incompatible.\n              Type 'AB | null' is not assignable to type 'AB'.\n                Type 'null' is not assignable to type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2962,"col":101},"message":"Property 'c' does not exist on type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2964,"col":16},"message":"Argument of type '[{ clock: EventCallable<AB | null>; filter: () => number; fn: (val: ABN) => { a: any; b: string; }; }]' is not assignable to parameter of type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => clk is AB | null) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }] | [config: ...]'.\n  Type '[{ clock: EventCallable<AB | null>; filter: () => number; fn: (val: ABN) => { a: any; b: string; }; }]' is not assignable to type '[config: { clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }]'.\n    Type '{ clock: EventCallable<AB | null>; filter: () => number; fn: (val: ABN) => { a: any; b: string; }; }' is not assignable to type '{ clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }'.\n      Type '{ clock: EventCallable<AB | null>; filter: () => number; fn: (val: ABN) => { a: any; b: string; }; }' is not assignable to type '{ clock: EventCallable<AB | null>; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }'.\n        The types returned by 'filter(...)' are incompatible between these types.\n          Type 'number' is not assignable to type 'boolean'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2964,"col":101},"message":"Property 'c' does not exist on type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2966,"col":92},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2966,"col":96},"message":"Property 'c' does not exist on type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2966,"col":101},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2968,"col":76},"message":"Type '(val: ABN) => { a: any; b: string; }' is not assignable to type '((clk: AB | null) => any) & ((val: ABN) => { a: any; b: string; })'.\n  Type '(val: ABN) => { a: any; b: string; }' is not assignable to type '(clk: AB | null) => any'.\n    Types of parameters 'val' and 'clk' are incompatible.\n      Type 'AB | null' is not assignable to type 'ABN'.\n        Type 'null' is not assignable to type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2968,"col":101},"message":"Property 'c' does not exist on type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2970,"col":96},"message":"Property 'c' does not exist on type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2972,"col":76},"message":"Type '(val: ABN) => { a: any; b: string; }' is not assignable to type '((clk: AB) => any) & ((val: ABN) => { a: any; b: string; })'.\n  Type '(val: ABN) => { a: any; b: string; }' is not assignable to type '(clk: AB) => any'.\n    Types of parameters 'val' and 'clk' are incompatible.\n      Type 'AB' is not assignable to type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":2972,"col":101},"message":"Property 'c' does not exist on type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3116,"col":56},"message":"'clk' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3118,"col":16},"message":"Argument of type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: (clk: AB) => boolean; }]' is not assignable to parameter of type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter: (clk: AB | null) => clk is AB | null; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }] | [config: ...]'.\n  Type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: (clk: AB) => boolean; }]' is not assignable to type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter: (clk: AB | null) => boolean; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }]'.\n    Type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: (clk: AB) => boolean; }' is not assignable to type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter: (clk: AB | null) => boolean; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }'.\n      Type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: (clk: AB) => boolean; }' is not assignable to type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter: (clk: AB | null) => boolean; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }'.\n        Types of property 'filter' are incompatible.\n          Type '(clk: AB) => boolean' is not assignable to type '(clk: AB | null) => boolean'.\n            Types of parameters 'clk' and 'clk' are incompatible.\n              Type 'AB | null' is not assignable to type 'AB'.\n                Type 'null' is not assignable to type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3120,"col":16},"message":"Argument of type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: () => number; }]' is not assignable to parameter of type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter: (clk: AB | null) => clk is AB | null; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }] | [config: ...]'.\n  Type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: () => number; }]' is not assignable to type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter: (clk: AB | null) => boolean; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }]'.\n    Type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: () => number; }' is not assignable to type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter: (clk: AB | null) => boolean; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }'.\n      Type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: () => number; }' is not assignable to type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter: (clk: AB | null) => boolean; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }'.\n        The types returned by 'filter(...)' are incompatible between these types.\n          Type 'number' is not assignable to type 'boolean'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3167,"col":56},"message":"'clk' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3169,"col":16},"message":"Argument of type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: (clk: AB) => boolean; fn: (val: AB | null) => { a: number; b: string; }; }]' is not assignable to parameter of type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => clk is AB | null) | undefined; ... 4 more ...; name?: string | undefined; }] | [config: ...]'.\n  Type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: (clk: AB) => boolean; fn: (val: AB | null) => { a: number; b: string; }; }]' is not assignable to type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }]'.\n    Type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: (clk: AB) => boolean; fn: (val: AB | null) => { a: number; b: string; }; }' is not assignable to type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }'.\n      Types of property 'filter' are incompatible.\n        Type '(clk: AB) => boolean' is not assignable to type '(clk: AB | null) => boolean'.\n          Types of parameters 'clk' and 'clk' are incompatible.\n            Type 'AB | null' is not assignable to type 'AB'.\n              Type 'null' is not assignable to type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3171,"col":16},"message":"Argument of type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: () => number; fn: (val: AB | null) => { a: number; b: string; }; }]' is not assignable to parameter of type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => clk is AB | null) | undefined; ... 4 more ...; name?: string | undefined; }] | [config: ...]'.\n  Type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: () => number; fn: (val: AB | null) => { a: number; b: string; }; }]' is not assignable to type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }]'.\n    Type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: () => number; fn: (val: AB | null) => { a: number; b: string; }; }' is not assignable to type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }'.\n      The types returned by 'filter(...)' are incompatible between these types.\n        Type 'number' is not assignable to type 'boolean'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3173,"col":56},"message":"'clk' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3175,"col":16},"message":"Argument of type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: (clk: AB) => boolean; fn: (val: AB | null) => { a: number; b: string; }; }]' is not assignable to parameter of type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => clk is AB | null) | undefined; ... 4 more ...; name?: string | undefined; } & { ...; }] | [config: ...]'.\n  Type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: (clk: AB) => boolean; fn: (val: AB | null) => { a: number; b: string; }; }]' is not assignable to type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((val: AB | null) => { ...; }) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }]'.\n    Type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: (clk: AB) => boolean; fn: (val: AB | null) => { a: number; b: string; }; }' is not assignable to type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((val: AB | null) => { ...; }) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }'.\n      Type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: (clk: AB) => boolean; fn: (val: AB | null) => { a: number; b: string; }; }' is not assignable to type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((val: AB | null) => { ...; }) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }'.\n        Types of property 'filter' are incompatible.\n          Type '(clk: AB) => boolean' is not assignable to type '(clk: AB | null) => boolean'.\n            Types of parameters 'clk' and 'clk' are incompatible.\n              Type 'AB | null' is not assignable to type 'AB'.\n                Type 'null' is not assignable to type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3177,"col":16},"message":"Argument of type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: () => number; fn: (val: AB | null) => { a: number; b: string; }; }]' is not assignable to parameter of type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => clk is AB | null) | undefined; ... 4 more ...; name?: string | undefined; } & { ...; }] | [config: ...]'.\n  Type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: () => number; fn: (val: AB | null) => { a: number; b: string; }; }]' is not assignable to type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((val: AB | null) => { ...; }) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }]'.\n    Type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: () => number; fn: (val: AB | null) => { a: number; b: string; }; }' is not assignable to type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((val: AB | null) => { ...; }) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }'.\n      Type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: () => number; fn: (val: AB | null) => { a: number; b: string; }; }' is not assignable to type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((val: AB | null) => { ...; }) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }'.\n        The types returned by 'filter(...)' are incompatible between these types.\n          Type 'number' is not assignable to type 'boolean'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3179,"col":97},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3179,"col":101},"message":"Property 'c' does not exist on type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3179,"col":106},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3181,"col":97},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3181,"col":101},"message":"Property 'c' does not exist on type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3181,"col":106},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3183,"col":56},"message":"'clk' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3183,"col":97},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3183,"col":101},"message":"Property 'c' does not exist on type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3183,"col":106},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3185,"col":16},"message":"Argument of type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: (clk: AB) => boolean; fn: (val: AB | null) => { a: any; b: string; }; }]' is not assignable to parameter of type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => clk is AB | null) | undefined; ... 4 more ...; name?: string | undefined; }] | [config: ...]'.\n  Type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: (clk: AB) => boolean; fn: (val: AB | null) => { a: any; b: string; }; }]' is not assignable to type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }]'.\n    Type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: (clk: AB) => boolean; fn: (val: AB | null) => { a: any; b: string; }; }' is not assignable to type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }'.\n      Types of property 'filter' are incompatible.\n        Type '(clk: AB) => boolean' is not assignable to type '(clk: AB | null) => boolean'.\n          Types of parameters 'clk' and 'clk' are incompatible.\n            Type 'AB | null' is not assignable to type 'AB'.\n              Type 'null' is not assignable to type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3185,"col":97},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3185,"col":101},"message":"Property 'c' does not exist on type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3185,"col":106},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3187,"col":16},"message":"Argument of type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: () => number; fn: (val: AB | null) => { a: any; b: string; }; }]' is not assignable to parameter of type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => clk is AB | null) | undefined; ... 4 more ...; name?: string | undefined; }] | [config: ...]'.\n  Type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: () => number; fn: (val: AB | null) => { a: any; b: string; }; }]' is not assignable to type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }]'.\n    Type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: () => number; fn: (val: AB | null) => { a: any; b: string; }; }' is not assignable to type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }'.\n      The types returned by 'filter(...)' are incompatible between these types.\n        Type 'number' is not assignable to type 'boolean'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3187,"col":97},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3187,"col":101},"message":"Property 'c' does not exist on type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3187,"col":106},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3189,"col":16},"message":"Argument of type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: (clk: AB | null) => boolean; fn: (val: ABN) => { a: any; b: string; }; }]' is not assignable to parameter of type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => clk is AB | null) | undefined; ... 4 more ...; name?: string | undefined; }] | [config: ...]'.\n  Type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: (clk: AB | null) => boolean; fn: (val: ABN) => { a: any; b: string; }; }]' is not assignable to type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }]'.\n    Type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: (clk: AB | null) => boolean; fn: (val: ABN) => { a: any; b: string; }; }' is not assignable to type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }'.\n      Types of property 'fn' are incompatible.\n        Type '(val: ABN) => { a: any; b: string; }' is not assignable to type '(clk: AB | null) => any'.\n          Types of parameters 'val' and 'clk' are incompatible.\n            Type 'AB | null' is not assignable to type 'ABN'.\n              Type 'null' is not assignable to type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3189,"col":106},"message":"Property 'c' does not exist on type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3191,"col":81},"message":"Type '(val: ABN) => { a: any; b: string; }' is not assignable to type '((clk: AB | null) => any) & ((val: ABN) => { a: any; b: string; })'.\n  Type '(val: ABN) => { a: any; b: string; }' is not assignable to type '(clk: AB | null) => any'.\n    Types of parameters 'val' and 'clk' are incompatible.\n      Type 'AB | null' is not assignable to type 'ABN'.\n        Type 'null' is not assignable to type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3191,"col":106},"message":"Property 'c' does not exist on type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3193,"col":16},"message":"Argument of type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: (clk: AB | null) => boolean; fn: (val: ABN) => { a: any; b: string; }; }]' is not assignable to parameter of type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => clk is AB | null) | undefined; ... 4 more ...; name?: string | undefined; }] | [config: ...]'.\n  Type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: (clk: AB | null) => boolean; fn: (val: ABN) => { a: any; b: string; }; }]' is not assignable to type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }]'.\n    Type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: (clk: AB | null) => boolean; fn: (val: ABN) => { a: any; b: string; }; }' is not assignable to type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }'.\n      Types of property 'fn' are incompatible.\n        Type '(val: ABN) => { a: any; b: string; }' is not assignable to type '(clk: AB | null) => any'.\n          Types of parameters 'val' and 'clk' are incompatible.\n            Type 'AB | null' is not assignable to type 'ABN'.\n              Type 'null' is not assignable to type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3193,"col":56},"message":"'clk' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3193,"col":106},"message":"Property 'c' does not exist on type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3195,"col":16},"message":"Argument of type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: (clk: AB) => boolean; fn: (val: ABN) => { a: any; b: string; }; }]' is not assignable to parameter of type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => clk is AB | null) | undefined; ... 4 more ...; name?: string | undefined; } & { ...; }] | [config: ...]'.\n  Type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: (clk: AB) => boolean; fn: (val: ABN) => { a: any; b: string; }; }]' is not assignable to type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }]'.\n    Type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: (clk: AB) => boolean; fn: (val: ABN) => { a: any; b: string; }; }' is not assignable to type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }'.\n      Type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: (clk: AB) => boolean; fn: (val: ABN) => { a: any; b: string; }; }' is not assignable to type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }'.\n        Types of property 'filter' are incompatible.\n          Type '(clk: AB) => boolean' is not assignable to type '(clk: AB | null) => boolean'.\n            Types of parameters 'clk' and 'clk' are incompatible.\n              Type 'AB | null' is not assignable to type 'AB'.\n                Type 'null' is not assignable to type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3195,"col":106},"message":"Property 'c' does not exist on type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3197,"col":16},"message":"Argument of type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: () => number; fn: (val: ABN) => { a: any; b: string; }; }]' is not assignable to parameter of type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => clk is AB | null) | undefined; ... 4 more ...; name?: string | undefined; } & { ...; }] | [config: ...]'.\n  Type '[{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: () => number; fn: (val: ABN) => { a: any; b: string; }; }]' is not assignable to type '[config: { clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }]'.\n    Type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: () => number; fn: (val: ABN) => { a: any; b: string; }; }' is not assignable to type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }'.\n      Type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; filter: () => number; fn: (val: ABN) => { a: any; b: string; }; }' is not assignable to type '{ clock: (EventCallable<AB> | EventCallable<AB | null>)[]; source?: undefined; filter?: ((clk: AB | null) => boolean) | undefined; fn?: ((clk: AB | null) => any) | undefined; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }'.\n        The types returned by 'filter(...)' are incompatible between these types.\n          Type 'number' is not assignable to type 'boolean'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3197,"col":106},"message":"Property 'c' does not exist on type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3199,"col":97},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3199,"col":101},"message":"Property 'c' does not exist on type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3199,"col":106},"message":"'val' is possibly 'null'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3201,"col":81},"message":"Type '(val: ABN) => { a: any; b: string; }' is not assignable to type '((clk: AB | null) => any) & ((val: ABN) => { a: any; b: string; })'.\n  Type '(val: ABN) => { a: any; b: string; }' is not assignable to type '(clk: AB | null) => any'.\n    Types of parameters 'val' and 'clk' are incompatible.\n      Type 'AB | null' is not assignable to type 'ABN'.\n        Type 'null' is not assignable to type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3201,"col":106},"message":"Property 'c' does not exist on type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3203,"col":101},"message":"Property 'c' does not exist on type 'AB'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3205,"col":81},"message":"Type '(val: ABN) => { a: any; b: string; }' is not assignable to type '((clk: AB) => any) & ((val: ABN) => { a: any; b: string; })'.\n  Type '(val: ABN) => { a: any; b: string; }' is not assignable to type '(clk: AB) => any'.\n    Types of parameters 'val' and 'clk' are incompatible.\n      Type 'AB' is not assignable to type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":3205,"col":106},"message":"Property 'c' does not exist on type 'ABN'.","file":"effector/generated/sampleFilter.test.ts"},{"pos":{"line":918,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.\n  Target requires 2 element(s) but source may have fewer.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":919,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":920,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":921,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":922,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":923,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":924,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":925,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":926,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":927,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":928,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":929,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":930,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":931,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":932,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":933,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":934,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":935,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":936,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":937,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":938,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":939,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":940,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":941,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":942,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":943,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":944,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":945,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":946,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":947,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":948,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":949,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":950,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":994,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":995,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":996,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":997,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":998,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":999,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1000,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1001,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1002,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1003,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1004,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1005,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1006,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1007,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1008,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1009,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1010,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1011,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1012,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1013,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1014,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1015,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1016,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1017,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1018,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1019,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1020,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1021,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1022,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1023,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1024,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1025,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1026,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1027,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1028,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1029,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1030,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1031,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1032,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1033,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1034,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1035,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1036,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1037,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1091,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1092,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1093,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1094,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1095,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1096,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1097,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1098,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1099,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1100,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1101,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1102,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1103,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1104,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1105,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1106,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1107,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1108,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1109,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1110,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1111,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1112,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1113,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1114,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1115,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1116,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1117,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1118,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1119,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1120,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1121,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1122,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1123,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1124,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1125,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1126,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1127,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1128,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1129,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1130,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1131,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1132,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1133,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1134,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1188,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1189,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1190,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1191,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1192,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1193,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1194,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1195,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1196,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1197,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1198,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1199,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1200,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1201,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1202,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1203,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1204,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1205,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1206,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1207,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1208,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1209,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1210,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1211,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1212,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1213,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1214,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1215,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1216,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1217,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1218,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1219,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1220,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1221,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1222,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1223,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1224,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1225,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1226,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1227,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1228,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1229,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1230,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1231,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1287,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1288,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1289,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1290,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1291,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1292,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1293,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1294,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1295,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1296,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1297,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1318,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1319,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1320,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1321,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1322,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1323,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1324,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1325,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1326,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1327,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1328,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1329,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1330,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1331,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1332,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1333,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1334,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1335,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1336,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1337,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1338,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1339,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1371,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1372,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1373,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1374,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1375,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1376,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1377,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1378,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1379,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1380,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1381,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1382,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1383,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1384,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1385,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1386,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1387,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1388,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1389,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1390,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1391,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1392,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1424,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1425,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1426,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1427,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1428,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1429,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1430,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1431,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1432,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1433,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1434,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1435,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1436,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1437,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1438,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1439,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1440,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1441,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1442,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1443,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1444,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":1445,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/generated/sampleReturn.test.ts"},{"pos":{"line":99,"col":11},"message":"Type 'Target' is not assignable to type 'Unit<string | null>'.\n  Type 'Tuple<any>' is not assignable to type 'Unit<string | null>'.","file":"effector/guard.test.ts"},{"pos":{"line":104,"col":11},"message":"Type 'Target' is not assignable to type 'Unit<string | null>'.\n  Type 'Tuple<any>' is not assignable to type 'Unit<string | null>'.","file":"effector/guard.test.ts"},{"pos":{"line":109,"col":11},"message":"Type 'Target' is not assignable to type 'Unit<string>'.\n  Type 'Tuple<any>' is not assignable to type 'Unit<string>'.","file":"effector/guard.test.ts"},{"pos":{"line":150,"col":11},"message":"Type 'Target' is not assignable to type 'Unit<string>'.\n  Type 'Tuple<any>' is not assignable to type 'Unit<string>'.","file":"effector/guard.test.ts"},{"pos":{"line":195,"col":23},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'StoreWritable<string>' is not assignable to type 'Store<boolean> | ((source: number) => boolean)'.\n      Type 'StoreWritable<string>' is not assignable to type 'Store<boolean>'.\n        Types of property 'map' are incompatible.\n          Type '<T>(fn: (state: string) => T, config?: { skipVoid?: boolean | undefined; } | undefined) => Store<T>' is not assignable to type '<T>(fn: (state: boolean) => T, config?: { skipVoid?: boolean | undefined; } | undefined) => Store<T>'.\n            Types of parameters 'fn' and 'fn' are incompatible.\n              Types of parameters 'state' and 'state' are incompatible.\n                Type 'string' is not assignable to type 'boolean'.","file":"effector/guard.test.ts"},{"pos":{"line":216,"col":13},"message":"Type 'Target' is not assignable to type 'Event<string>'.\n  Type 'UnitTargetable<any>' is missing the following properties from type 'Event<string>': map, filter, filterMap, watch, and 5 more.","file":"effector/guard.test.ts"},{"pos":{"line":216,"col":53},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'StoreWritable<string>' is not assignable to type 'Store<boolean> | ((source: number) => boolean)'.","file":"effector/guard.test.ts"},{"pos":{"line":252,"col":11},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'StoreWritable<string>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard.test.ts"},{"pos":{"line":280,"col":13},"message":"Type 'Event<number>' is not assignable to type 'Event<string>'.\n  Type 'number' is not assignable to type 'string'.","file":"effector/guard.test.ts"},{"pos":{"line":311,"col":11},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'StoreWritable<string>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard.test.ts"},{"pos":{"line":340,"col":13},"message":"Type 'Event<User>' is not assignable to type 'Event<string>'.\n  Type 'User' is not assignable to type 'string'.","file":"effector/guard.test.ts"},{"pos":{"line":373,"col":11},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'StoreWritable<string>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard.test.ts"},{"pos":{"line":426,"col":9},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'StoreWritable<string>' is not assignable to type 'Store<boolean> | ((source: number) => boolean)'.\n      Type 'StoreWritable<string>' is not assignable to type 'Store<boolean>'.","file":"effector/guard.test.ts"},{"pos":{"line":445,"col":9},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'StoreWritable<string>' is not assignable to type 'Store<boolean> | ((source: number) => boolean)'.","file":"effector/guard.test.ts"},{"pos":{"line":482,"col":11},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'StoreWritable<string>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard.test.ts"},{"pos":{"line":513,"col":13},"message":"Type 'Event<number>' is not assignable to type 'Event<string>'.","file":"effector/guard.test.ts"},{"pos":{"line":548,"col":11},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'StoreWritable<string>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard.test.ts"},{"pos":{"line":613,"col":13},"message":"Type 'Event<User>' is not assignable to type 'Event<string>'.\n  Type 'User' is not assignable to type 'string'.","file":"effector/guard.test.ts"},{"pos":{"line":651,"col":11},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'StoreWritable<string>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard.test.ts"},{"pos":{"line":174,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<number>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":176,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<number>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":178,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<number>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":180,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<string>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":182,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<number>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":184,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<number>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":186,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<number>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":188,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<number>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":190,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<number>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":192,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<number>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":194,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<string>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":196,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<number>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":198,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<number>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":200,"col":71},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<string>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":202,"col":71},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<string>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":204,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<number>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":206,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<string>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":208,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<string | boolean>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":210,"col":71},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<string | boolean>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":212,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<string>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":214,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<string>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":216,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<string>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":218,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<string | boolean>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":220,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<string | boolean>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":222,"col":71},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<string | boolean>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":224,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<string | boolean>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":226,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<string | boolean>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":228,"col":73},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<string | boolean>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":230,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<string | boolean>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":232,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<string | boolean>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":234,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<string>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":236,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<string>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":238,"col":73},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<string | boolean>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":240,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<string | boolean>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":379,"col":68},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":381,"col":74},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<AS>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":383,"col":68},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<AS>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":383,"col":72},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<AS>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":385,"col":68},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<AS>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":387,"col":74},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":389,"col":68},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":391,"col":71},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<AS>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":393,"col":68},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<AS>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":395,"col":79},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":397,"col":79},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<AS>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":397,"col":83},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<AS>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":399,"col":82},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<AS>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":401,"col":79},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<AS>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":403,"col":85},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":405,"col":79},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":407,"col":79},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<AS>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":409,"col":85},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<AS>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":411,"col":68},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[string]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":413,"col":74},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[string]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":415,"col":78},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":417,"col":74},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":419,"col":78},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[string]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":421,"col":68},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<[string]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":421,"col":78},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<[string]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":423,"col":68},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":425,"col":68},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[string]>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":425,"col":74},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[string]>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":427,"col":79},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[string]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":429,"col":85},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[string]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":431,"col":85},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":433,"col":89},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[string]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":435,"col":79},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<[string]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":435,"col":89},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<[string]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":437,"col":79},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[string]>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":437,"col":85},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[string]>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":439,"col":89},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":441,"col":79},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":594,"col":61},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<AS>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":596,"col":61},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":598,"col":61},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<AB>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":600,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<AS>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":602,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":604,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<AB>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":606,"col":61},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<AS>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<AB>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":606,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<AS>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<AB>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":608,"col":61},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<AS>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":608,"col":65},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<AS>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":610,"col":61},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<AB>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":610,"col":65},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<AB>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":612,"col":61},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<AB>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<AS>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":612,"col":64},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<AB>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<AS>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":614,"col":72},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<AS>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":616,"col":78},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":618,"col":72},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<AB>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":618,"col":76},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<AB>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":620,"col":72},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<AS>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":620,"col":76},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<AS>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":622,"col":72},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<ABN>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":624,"col":72},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<AB>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<AS>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":624,"col":75},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<AB>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<AS>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":626,"col":78},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<AS>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":628,"col":78},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<AB>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":630,"col":72},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<AB>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":632,"col":72},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<AS>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<AB>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":632,"col":78},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<AS>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<AB>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":634,"col":61},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[string]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":636,"col":61},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, string]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":638,"col":61},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":640,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[string]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":642,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, string]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":644,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":646,"col":61},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[string]>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":646,"col":67},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[string]>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":648,"col":61},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, string]>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<[string]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":648,"col":71},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, string]>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<[string]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":650,"col":61},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, string]>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":650,"col":71},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, string]>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":652,"col":61},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<[string]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":652,"col":71},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<[string]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":654,"col":72},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[string]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":656,"col":72},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, string]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":658,"col":72},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":660,"col":78},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[string]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":662,"col":78},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, string]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":664,"col":78},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":666,"col":72},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[string]>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":666,"col":78},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[string]>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":668,"col":72},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, string]>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<[string]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":668,"col":82},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, string]>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<[string]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":670,"col":72},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, string]>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":670,"col":82},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, string]>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":672,"col":72},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<[string]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":672,"col":82},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[number, number]>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<[string]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardArrayTarget.test.ts"},{"pos":{"line":33,"col":5},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'StoreWritable<string>' is not assignable to type 'Store<boolean> | ((source: number) => boolean)'.","file":"effector/guard/guardOther.test.ts"},{"pos":{"line":39,"col":5},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'StoreWritable<string>' is not assignable to type 'Store<boolean> | ((source: number, clock: number) => boolean)'.\n      Type 'StoreWritable<string>' is not assignable to type 'Store<boolean>'.","file":"effector/guard/guardOther.test.ts"},{"pos":{"line":44,"col":5},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'StoreWritable<string>' is not assignable to type 'Store<boolean> | ((clock: number) => boolean)'.\n      Type 'StoreWritable<string>' is not assignable to type 'Store<boolean>'.","file":"effector/guard/guardOther.test.ts"},{"pos":{"line":87,"col":23},"message":"A type predicate's type must be assignable to its parameter's type.\n  Type '{ field: string | number; data: number; }' is not assignable to type '{ field: string | number | boolean; data: { a: number; }; }'.\n    Types of property 'data' are incompatible.\n      Type 'number' is not assignable to type '{ a: number; }'.","file":"effector/guard/guardOther.test.ts"},{"pos":{"line":92,"col":7},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ field: string | number; data: string; }>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<{ field: number; data: number; }>' is not assignable to type '\"incompatible unit in target\"'.\n        Type 'EventCallable<{ field: any; data: any; extra: boolean; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardOther.test.ts"},{"pos":{"line":95,"col":7},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ field: string | number; data: string; }>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<{ field: number; data: number; }>' is not assignable to type '\"incompatible unit in target\"'.\n        Type 'EventCallable<{ field: any; data: any; extra: boolean; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardOther.test.ts"},{"pos":{"line":98,"col":7},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ field: string | number; data: string; }>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<{ field: number; data: number; }>' is not assignable to type '\"incompatible unit in target\"'.\n        Type 'EventCallable<{ field: any; data: any; extra: boolean; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardOther.test.ts"},{"pos":{"line":151,"col":23},"message":"A type predicate's type must be assignable to its parameter's type.\n  Type '{ field: number; data: number; }' is not assignable to type '{ field: string | number | boolean; data: { a: number; }; }'.\n    Types of property 'data' are incompatible.\n      Type 'number' is not assignable to type '{ a: number; }'.","file":"effector/guard/guardOther.test.ts"},{"pos":{"line":156,"col":7},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ field: string | number; data: string; }>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<{ field: string; data: number; }>' is not assignable to type '\"incompatible unit in target\"'.\n        Type 'EventCallable<{ field: any; data: any; extra: boolean; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardOther.test.ts"},{"pos":{"line":159,"col":7},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ field: string | number; data: string; }>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<{ field: string; data: number; }>' is not assignable to type '\"incompatible unit in target\"'.\n        Type 'EventCallable<{ field: any; data: any; extra: boolean; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardOther.test.ts"},{"pos":{"line":162,"col":7},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ field: string | number; data: string; }>' is not assignable to type '\"incompatible unit in target\"'.\n      Type 'EventCallable<{ field: string; data: number; }>' is not assignable to type '\"incompatible unit in target\"'.\n        Type 'EventCallable<{ field: any; data: any; extra: boolean; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardOther.test.ts"},{"pos":{"line":199,"col":26},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<number>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardOther.test.ts"},{"pos":{"line":26,"col":5},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: 1; } | { a: 2; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardWideNarrow.test.ts"},{"pos":{"line":30,"col":9},"message":"Type 'Event<{ a: 1; } | { a: 2; } | { a: 3; }>' is missing the following properties from type 'EventCallable<{ a: 1; } | { a: 2; }>': prepend, targetable","file":"effector/guard/guardWideNarrow.test.ts"},{"pos":{"line":39,"col":14},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: 1; } | { a: 2; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardWideNarrow.test.ts"},{"pos":{"line":43,"col":9},"message":"Type 'Event<{ a: 1; } | { a: 2; } | { a: 3; }>' is not assignable to type '[EventCallable<{ a: 1; } | { a: 2; }>]'.","file":"effector/guard/guardWideNarrow.test.ts"},{"pos":{"line":95,"col":5},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<string>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardWideNarrow.test.ts"},{"pos":{"line":99,"col":9},"message":"Type 'Event<unknown>' is missing the following properties from type 'EventCallable<string>': prepend, targetable","file":"effector/guard/guardWideNarrow.test.ts"},{"pos":{"line":108,"col":14},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<string>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardWideNarrow.test.ts"},{"pos":{"line":112,"col":9},"message":"Type 'Event<unknown>' is not assignable to type '[EventCallable<string>]'.","file":"effector/guard/guardWideNarrow.test.ts"},{"pos":{"line":164,"col":5},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: 1; b: 2; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardWideNarrow.test.ts"},{"pos":{"line":168,"col":9},"message":"Type 'Event<{ a: 1; b?: 2 | undefined; }>' is missing the following properties from type 'EventCallable<{ a: 1; b: 2; }>': prepend, targetable","file":"effector/guard/guardWideNarrow.test.ts"},{"pos":{"line":177,"col":14},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: 1; b: 2; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardWideNarrow.test.ts"},{"pos":{"line":181,"col":9},"message":"Type 'Event<{ a: 1; b?: 2 | undefined; }>' is not assignable to type '[EventCallable<{ a: 1; b: 2; }>]'.","file":"effector/guard/guardWideNarrow.test.ts"},{"pos":{"line":233,"col":5},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: 1; b: 2; c: 3; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardWideNarrow.test.ts"},{"pos":{"line":237,"col":9},"message":"Type 'Event<{ a: 1; b: 2; }>' is missing the following properties from type 'EventCallable<{ a: 1; b: 2; c: 3; }>': prepend, targetable","file":"effector/guard/guardWideNarrow.test.ts"},{"pos":{"line":246,"col":14},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ a: 1; b: 2; c: 3; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardWideNarrow.test.ts"},{"pos":{"line":250,"col":9},"message":"Type 'Event<{ a: 1; b: 2; }>' is not assignable to type '[EventCallable<{ a: 1; b: 2; c: 3; }>]'.","file":"effector/guard/guardWideNarrow.test.ts"},{"pos":{"line":277,"col":5},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<{ foo: string; bar: string; }>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardWideNarrow.test.ts"},{"pos":{"line":322,"col":5},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[1, 2, 3]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardWideNarrow.test.ts"},{"pos":{"line":329,"col":14},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<[1, 2, 3]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardWideNarrow.test.ts"},{"pos":{"line":353,"col":5},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<(string | number)[]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardWideNarrow.test.ts"},{"pos":{"line":357,"col":9},"message":"Type 'Event<(string | number | boolean)[]>' is missing the following properties from type 'EventCallable<(string | number)[]>': prepend, targetable","file":"effector/guard/guardWideNarrow.test.ts"},{"pos":{"line":366,"col":14},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Type 'EventCallable<(string | number)[]>' is not assignable to type '\"incompatible unit in target\"'.","file":"effector/guard/guardWideNarrow.test.ts"},{"pos":{"line":370,"col":9},"message":"Type 'Event<(string | number | boolean)[]>' is not assignable to type '[EventCallable<(string | number)[]>]'.","file":"effector/guard/guardWideNarrow.test.ts"},{"pos":{"line":81,"col":15},"message":"Type 'Event<string[]>' is not assignable to type 'Event<number>'.\n  Type 'string[]' is not assignable to type 'number'.","file":"effector/index.test.ts"},{"pos":{"line":83,"col":15},"message":"Type 'Event<string[]>' is not assignable to type 'null'.","file":"effector/index.test.ts"},{"pos":{"line":99,"col":15},"message":"Type 'Event<string[]>' is not assignable to type 'Event<number>'.","file":"effector/index.test.ts"},{"pos":{"line":113,"col":15},"message":"Type 'Event<string[]>' is not assignable to type 'null'.","file":"effector/index.test.ts"},{"pos":{"line":127,"col":28},"message":"Type 'null' is not assignable to type 'boolean'.","file":"effector/index.test.ts"},{"pos":{"line":129,"col":7},"message":"Type '(list: null) => true' is not assignable to type '(payload: string[]) => boolean'.\n  Types of parameters 'list' and 'payload' are incompatible.\n    Type 'string[]' is not assignable to type 'null'.","file":"effector/index.test.ts"},{"pos":{"line":131,"col":7},"message":"Type '(list: number[]) => true' is not assignable to type '(payload: string[]) => boolean'.\n  Types of parameters 'list' and 'payload' are incompatible.\n    Type 'string[]' is not assignable to type 'number[]'.\n      Type 'string' is not assignable to type 'number'.","file":"effector/index.test.ts"},{"pos":{"line":155,"col":14},"message":"Property 'targetable' does not exist on type 'Unit<any>'.","file":"effector/index.test.ts"},{"pos":{"line":206,"col":19},"message":"Type 'UnitTargetable<number>' is not assignable to type 'UnitTargetable<string>'.\n  Type 'number' is not assignable to type 'string'.","file":"effector/index.test.ts"},{"pos":{"line":259,"col":17},"message":"Type 'Event<number> | EventCallable<number>' is not assignable to type 'Event<string>'.\n  Type 'Event<number>' is not assignable to type 'Event<string>'.","file":"effector/index.test.ts"},{"pos":{"line":264,"col":13},"message":"No overload matches this call.\n  Overload 1 of 2, '(payload: number): number', gave the following error.\n    Argument of type 'string' is not assignable to parameter of type 'number'.\n  Overload 2 of 2, '(this: \"Error: Expected 1 argument, but got 0\", payload?: number | undefined): void', gave the following error.\n    The 'this' context of type 'void' is not assignable to method's 'this' of type '\"Error: Expected 1 argument, but got 0\"'.","file":"effector/index.test.ts"},{"pos":{"line":289,"col":17},"message":"Type 'Event<number> | EventCallable<number>' is not assignable to type 'Event<string>'.\n  Type 'Event<number>' is not assignable to type 'Event<string>'.","file":"effector/index.test.ts"},{"pos":{"line":294,"col":13},"message":"No overload matches this call.\n  Overload 1 of 2, '(payload: number): number', gave the following error.\n    Argument of type 'string' is not assignable to parameter of type 'number'.\n  Overload 2 of 2, '(this: \"Error: Expected 1 argument, but got 0\", payload?: number | undefined): void', gave the following error.\n    The 'this' context of type 'void' is not assignable to method's 'this' of type '\"Error: Expected 1 argument, but got 0\"'.","file":"effector/index.test.ts"},{"pos":{"line":373,"col":19},"message":"Type 'StoreWritable<number>' is not assignable to type 'Store<string>'.\n  Types of property 'map' are incompatible.\n    Type '<T>(fn: (state: number) => T, config?: { skipVoid?: boolean | undefined; } | undefined) => Store<T>' is not assignable to type '<T>(fn: (state: string) => T, config?: { skipVoid?: boolean | undefined; } | undefined) => Store<T>'.\n      Types of parameters 'fn' and 'fn' are incompatible.\n        Types of parameters 'state' and 'state' are incompatible.\n          Type 'number' is not assignable to type 'string'.","file":"effector/index.test.ts"},{"pos":{"line":399,"col":19},"message":"Type 'StoreWritable<number>' is not assignable to type 'Store<string>'.","file":"effector/index.test.ts"},{"pos":{"line":27,"col":15},"message":"Argument of type 'string' is not assignable to parameter of type 'number'.","file":"effector/launch.test.ts"},{"pos":{"line":57,"col":24},"message":"No overload matches this call.\n  Overload 1 of 3, '(config: { target: Node | Unit<number>; params: number; defer?: boolean | undefined; page?: any; scope?: Scope | undefined; meta?: Record<string, any> | undefined; }): void', gave the following error.\n    Type 'string' is not assignable to type 'number'.","file":"effector/launch.test.ts"},{"pos":{"line":106,"col":17},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Argument of type 'string' is not assignable to parameter of type 'number'.","file":"effector/restore.test.ts"},{"pos":{"line":119,"col":13},"message":"No overload matches this call.\n  The last overload gave the following error.\n    Argument of type 'Effect<any, number, Error>' is not assignable to parameter of type 'Event<string>'.\n      Types of property 'kind' are incompatible.\n        Type '\"effect\"' is not assignable to type '\"event\"'.","file":"effector/restore.test.ts"},{"pos":{"line":140,"col":7},"message":"Type 'StoreWritable<number>' is not assignable to type 'never'.","file":"effector/restore.test.ts"},{"pos":{"line":158,"col":7},"message":"Type 'StoreWritable<number>' is not assignable to type 'never'.","file":"effector/restore.test.ts"},{"pos":{"line":109,"col":13},"message":"Argument of type '{ source: EventCallable<number>; clock: EventCallable<any>; target: EventCallable<string>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string; }[]; }'.","file":"effector/sample/arrayTarget.test.ts"},{"pos":{"line":210,"col":13},"message":"Argument of type '{ source: EventCallable<number>; clock: EventCallable<any>; target: (EventCallable<void> | EventCallable<string>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | void; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | void; }[]; }'.","file":"effector/sample/arrayTarget.test.ts"},{"pos":{"line":226,"col":13},"message":"Argument of type '{ source: EventCallable<number>; clock: EventCallable<any>; target: (EventCallable<void> | EventCallable<string>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | void; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | void; }[]; }'.","file":"effector/sample/arrayTarget.test.ts"},{"pos":{"line":356,"col":13},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; clock: EventCallable<any>; target: EventCallable<{ a: string; }>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: { a: string; }; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: { a: string; }; }[]; }'.","file":"effector/sample/arrayTarget.test.ts"},{"pos":{"line":386,"col":13},"message":"Argument of type '{ source: { a: StoreWritable<number>; }; clock: EventCallable<any>; target: EventCallable<{ a: number; b: string; }>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: { a: number; b: string; }; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: { a: number; b: string; }; }[]; }'.","file":"effector/sample/arrayTarget.test.ts"},{"pos":{"line":458,"col":13},"message":"Argument of type '{ source: StoreWritable<number>[]; clock: EventCallable<any>; target: EventCallable<[number]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number]; }[]; }'.","file":"effector/sample/arrayTarget.test.ts"},{"pos":{"line":474,"col":7},"message":"Argument of type '{ source: StoreWritable<number>[]; clock: EventCallable<any>; target: EventCallable<[number, number]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number]; }[]; }'.","file":"effector/sample/arrayTarget.test.ts"},{"pos":{"line":494,"col":13},"message":"Argument of type '{ source: StoreWritable<number>[]; clock: EventCallable<any>; target: EventCallable<[string]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [string]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [string]; }[]; }'.","file":"effector/sample/arrayTarget.test.ts"},{"pos":{"line":510,"col":13},"message":"Argument of type '{ source: StoreWritable<number>[]; clock: EventCallable<any>; target: (EventCallable<[number]> | EventCallable<[string]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [string] | [number]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [string] | [number]; }[]; }'.","file":"effector/sample/arrayTarget.test.ts"},{"pos":{"line":265,"col":7},"message":"Type '({ a }: { a: number; }, clock: any) => { a: number; clock: any; }' is not assignable to type '((src: { a: string; }, clk: any) => any) & (({ a }: { a: number; }, clock: any) => { a: number; clock: any; })'.\n  Type '({ a }: { a: number; }, clock: any) => { a: number; clock: any; }' is not assignable to type '(src: { a: string; }, clk: any) => any'.\n    Types of parameters '__0' and 'src' are incompatible.\n      Type '{ a: string; }' is not assignable to type '{ a: number; }'.\n        Types of property 'a' are incompatible.\n          Type 'string' is not assignable to type 'number'.","file":"effector/sample/clockArray.test.ts"},{"pos":{"line":291,"col":7},"message":"Type '({ a, b }: any, clock: string) => { a: any; b: any; clock: string; }' is not assignable to type '((src: { a: string; b: string; }, clk: string | void) => any) & (({ a, b }: any, clock: string) => { a: any; b: any; clock: string; })'.\n  Type '({ a, b }: any, clock: string) => { a: any; b: any; clock: string; }' is not assignable to type '(src: { a: string; b: string; }, clk: string | void) => any'.\n    Types of parameters 'clock' and 'clk' are incompatible.\n      Type 'string | void' is not assignable to type 'string'.\n        Type 'void' is not assignable to type 'string'.","file":"effector/sample/clockArray.test.ts"},{"pos":{"line":413,"col":7},"message":"Type '({ a }: { a: number; }, clock: any) => { a: number; clock: any; }' is not assignable to type '((src: { a: string; }, clk: any) => any) & (({ a }: { a: number; }, clock: any) => { a: number; clock: any; })'.\n  Type '({ a }: { a: number; }, clock: any) => { a: number; clock: any; }' is not assignable to type '(src: { a: string; }, clk: any) => any'.\n    Types of parameters '__0' and 'src' are incompatible.\n      Type '{ a: string; }' is not assignable to type '{ a: number; }'.\n        Types of property 'a' are incompatible.\n          Type 'string' is not assignable to type 'number'.","file":"effector/sample/clockArray.test.ts"},{"pos":{"line":437,"col":7},"message":"Type '({ a, b }: any, clock: string) => { a: any; b: any; clock: string; }' is not assignable to type '((src: { a: string; b: string; }, clk: string | void) => any) & (({ a, b }: any, clock: string) => { a: any; b: any; clock: string; })'.\n  Type '({ a, b }: any, clock: string) => { a: any; b: any; clock: string; }' is not assignable to type '(src: { a: string; b: string; }, clk: string | void) => any'.\n    Types of parameters 'clock' and 'clk' are incompatible.\n      Type 'string | void' is not assignable to type 'string'.\n        Type 'void' is not assignable to type 'string'.","file":"effector/sample/clockArray.test.ts"},{"pos":{"line":110,"col":5},"message":"Argument of type '{ source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: EventCallable<[number, string]>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }; }'.","file":"effector/sample/implicitCombine.test.ts"},{"pos":{"line":35,"col":12},"message":"Expected 19 type arguments, but got 3.","file":"effector/sample/sample.test.ts"},{"pos":{"line":39,"col":11},"message":"Parameter 'str' implicitly has an 'any' type.","file":"effector/sample/sample.test.ts"},{"pos":{"line":53,"col":12},"message":"Expected 19 type arguments, but got 2.","file":"effector/sample/sample.test.ts"},{"pos":{"line":56,"col":11},"message":"Parameter 'str' implicitly has an 'any' type.","file":"effector/sample/sample.test.ts"},{"pos":{"line":71,"col":12},"message":"Expected 19 type arguments, but got 1.","file":"effector/sample/sample.test.ts"},{"pos":{"line":86,"col":12},"message":"Expected 19 type arguments, but got 1.","file":"effector/sample/sample.test.ts"},{"pos":{"line":100,"col":11},"message":"Type 'string' is not assignable to type 'Event<number>'.","file":"effector/sample/sample.test.ts"},{"pos":{"line":100,"col":42},"message":"Expected 19 type arguments, but got 3.","file":"effector/sample/sample.test.ts"},{"pos":{"line":104,"col":12},"message":"Parameter 'str' implicitly has an 'any' type.","file":"effector/sample/sample.test.ts"},{"pos":{"line":104,"col":17},"message":"Parameter 'num' implicitly has an 'any' type.","file":"effector/sample/sample.test.ts"},{"pos":{"line":119,"col":12},"message":"Expected 19 type arguments, but got 1.","file":"effector/sample/sample.test.ts"},{"pos":{"line":133,"col":12},"message":"Expected 19 type arguments, but got 1.","file":"effector/sample/sample.test.ts"},{"pos":{"line":229,"col":16},"message":"Argument of type '[{ source: StoreWritable<A>; clock: EventCallable<B>; target: EventCallable<B>; }]' is not assignable to parameter of type 'TargetOrError<A, \"src\", EventCallable<B>, { clock: EventCallable<B>; source: StoreWritable<A>; filter?: undefined; target: EventCallable<B>; greedy?: boolean | undefined; batch?: boolean | undefined; } & { ...; }>'.","file":"effector/sample/sample.test.ts"},{"pos":{"line":237,"col":16},"message":"Argument of type '[{ source: StoreWritable<A>; clock: EventCallable<B>; fn: (source: A, clock: B) => A; target: EventCallable<B>; }]' is not assignable to parameter of type 'TargetOrError<A, \"fnRet\", EventCallable<B>, { clock: EventCallable<B>; source: StoreWritable<A>; filter?: undefined; fn: (source: A, clock: B) => A; target: EventCallable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; } & { ...; }>'.","file":"effector/sample/sample.test.ts"},{"pos":{"line":246,"col":16},"message":"Argument of type '[{ source: StoreWritable<A>; clock: EventCallable<B>; fn: (source: A, clock: B) => B; target: StoreWritable<A>; }]' is not assignable to parameter of type 'TargetOrError<B, \"fnRet\", StoreWritable<A>, { clock: EventCallable<B>; source: StoreWritable<A>; filter?: undefined; fn: (source: A, clock: B) => B; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; } & { ...; }>'.","file":"effector/sample/sample.test.ts"},{"pos":{"line":255,"col":31},"message":"Argument of type '[{ clock: EventCallable<B>; source: StoreWritable<A>; filter: BooleanConstructor; target: EventCallable<B>; }]' is not assignable to parameter of type 'TargetOrError<NonFalsy<A>, \"src\", EventCallable<B>, { clock: EventCallable<B>; source: StoreWritable<A>; filter: BooleanConstructor; target: EventCallable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; } & { ...; }>'.","file":"effector/sample/sample.test.ts"},{"pos":{"line":264,"col":31},"message":"Argument of type '[{ clock: EventCallable<B>; source: StoreWritable<A>; filter: BooleanConstructor; fn: (source: NonFalsy<A>, clock: B) => B; target: StoreWritable<...>; }]' is not assignable to parameter of type 'TargetOrError<B, \"fnRet\", StoreWritable<A>, { clock: EventCallable<B>; source: StoreWritable<A>; filter?: BooleanConstructor | undefined; fn?: ((source: NonFalsy<...>, clock: B) => B) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; } & { ...; }>'.","file":"effector/sample/sample.test.ts"},{"pos":{"line":274,"col":31},"message":"Argument of type '[{ clock: EventCallable<B>; source: StoreWritable<A>; filter: (source: A, clock: B) => true; fn: (source: A, clock: B) => B; target: StoreWritable<...>; }]' is not assignable to parameter of type 'TargetOrError<B, \"fnRet\", StoreWritable<A>, { clock: EventCallable<B>; source: StoreWritable<A>; filter?: ((source: A, clock: B) => true) | undefined; fn?: ((source: A, clock: B) => B) | undefined; target: StoreWritable<...>; greedy?: boolean | undefined; batch?: boolean | undefined; } & { ...; }>'.","file":"effector/sample/sample.test.ts"},{"pos":{"line":303,"col":9},"message":"Type 'Event<number>' is not assignable to type 'Event<string>'.","file":"effector/sample/sample.test.ts"},{"pos":{"line":317,"col":9},"message":"Type 'Event<{ a: string; b: boolean; }>' is not assignable to type 'Event<string>'.\n  Type '{ a: string; b: boolean; }' is not assignable to type 'string'.","file":"effector/sample/sample.test.ts"},{"pos":{"line":333,"col":9},"message":"Type 'Event<number>' is not assignable to type 'Event<string>'.","file":"effector/sample/sample.test.ts"},{"pos":{"line":347,"col":9},"message":"Type 'Event<{ a: string; b: boolean; }>' is not assignable to type 'Event<string>'.\n  Type '{ a: string; b: boolean; }' is not assignable to type 'string'.","file":"effector/sample/sample.test.ts"},{"pos":{"line":363,"col":9},"message":"Type 'Event<string>' is not assignable to type 'Event<number>'.","file":"effector/sample/sample.test.ts"},{"pos":{"line":377,"col":9},"message":"Type 'Event<{ a: string; b: boolean; }>' is not assignable to type 'Event<number>'.\n  Type '{ a: string; b: boolean; }' is not assignable to type 'number'.","file":"effector/sample/sample.test.ts"},{"pos":{"line":393,"col":9},"message":"Type 'Store<boolean>' is not assignable to type 'Store<string>'.\n  Type 'boolean' is not assignable to type 'string'.","file":"effector/sample/sample.test.ts"},{"pos":{"line":408,"col":9},"message":"Type 'Store<{ a: string; b: boolean; }>' is not assignable to type 'Store<string>'.\n  Type '{ a: string; b: boolean; }' is not assignable to type 'string'.","file":"effector/sample/sample.test.ts"},{"pos":{"line":429,"col":11},"message":"Type 'Store<string>' is not assignable to type 'Store<number>'.","file":"effector/sample/sample.test.ts"},{"pos":{"line":451,"col":13},"message":"Type 'Event<string>' is not assignable to type 'Event<number>'.","file":"effector/sample/sample.test.ts"},{"pos":{"line":689,"col":7},"message":"Argument of type '{ clock: StoreWritable<string>; fn: (foo: string) => string; target: StoreWritable<number>; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: number; }; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: string; targetType: number; }; }'.","file":"effector/sample/sample.test.ts"},{"pos":{"line":707,"col":7},"message":"Argument of type '{ clock: StoreWritable<number>[]; fn: (foo: number) => boolean; target: StoreWritable<number>; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: boolean; targetType: number; }; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: boolean; targetType: number; }; }'.","file":"effector/sample/sample.test.ts"},{"pos":{"line":725,"col":7},"message":"Argument of type '{ clock: StoreWritable<string>; target: StoreWritable<number>; }' is not assignable to parameter of type '{ error: \"clock should extend target type\"; targets: { clockType: string; targetType: number; }; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"clock should extend target type\"; targets: { clockType: string; targetType: number; }; }'.","file":"effector/sample/sample.test.ts"},{"pos":{"line":745,"col":7},"message":"Argument of type '{ clock: (StoreWritable<number> | StoreWritable<string> | StoreWritable<boolean>)[]; target: StoreWritable<number>; }' is not assignable to parameter of type '{ error: \"clock should extend target type\"; targets: { clockType: string | number | boolean; targetType: number; }; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"clock should extend target type\"; targets: { clockType: string | number | boolean; targetType: number; }; }'.","file":"effector/sample/sample.test.ts"},{"pos":{"line":800,"col":5},"message":"Argument of type '{ source: EventCallable<unknown>; target: EventCallable<number>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: unknown; targetType: number; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: unknown; targetType: number; }; }'.","file":"effector/sample/sample.test.ts"},{"pos":{"line":822,"col":9},"message":"Argument of type '{ clock: EventCallable<void>; target: Event<boolean>; }' is not assignable to parameter of type '{ error: \"derived units are not allowed in target\"; got: Event<boolean>; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"derived units are not allowed in target\"; got: Event<boolean>; }'.","file":"effector/sample/sample.test.ts"},{"pos":{"line":827,"col":9},"message":"Argument of type '{ clock: EventCallable<void>; target: Store<boolean>; }' is not assignable to parameter of type '{ error: \"derived units are not allowed in target\"; got: Store<boolean>; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"derived units are not allowed in target\"; got: Store<boolean>; }'.","file":"effector/sample/sample.test.ts"},{"pos":{"line":832,"col":9},"message":"Argument of type '{ clock: EventCallable<void>; fn: () => boolean; target: (Store<boolean> | Event<boolean>)[]; }' is not assignable to parameter of type '{ error: \"derived units are not allowed in target\"; got: (Store<boolean> | Event<boolean>)[]; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"derived units are not allowed in target\"; got: (Store<boolean> | Event<boolean>)[]; }'.","file":"effector/sample/sample.test.ts"},{"pos":{"line":102,"col":11},"message":"Argument of type '{ source: StoreWritable<{ a: string; }>; clock: EventCallable<void>; target: EventCallable<{ a: string; b: string; }>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: string; }; targetType: { a: string; b: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: string; }; targetType: { a: string; b: string; }; }; }'.","file":"effector/sample/targetForwarding.test.ts"},{"pos":{"line":116,"col":11},"message":"Argument of type '{ source: StoreWritable<{ a: string; }>; target: EventCallable<{ a: string; b: string; }>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: string; }; targetType: { a: string; b: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: string; }; targetType: { a: string; b: string; }; }; }'.","file":"effector/sample/targetForwarding.test.ts"},{"pos":{"line":132,"col":11},"message":"Argument of type '{ source: StoreWritable<null>; clock: EventCallable<void>; fn: () => { a: string; }; target: EventCallable<{ a: string; b: string; }>; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string; }; targetType: { a: string; b: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string; }; targetType: { a: string; b: string; }; }; }'.","file":"effector/sample/targetForwarding.test.ts"},{"pos":{"line":147,"col":11},"message":"Argument of type '{ source: StoreWritable<null>; fn: () => { a: string; }; target: EventCallable<{ a: string; b: string; }>; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string; }; targetType: { a: string; b: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: { a: string; }; targetType: { a: string; b: string; }; }; }'.","file":"effector/sample/targetForwarding.test.ts"},{"pos":{"line":165,"col":11},"message":"Argument of type '{ source: StoreWritable<{ foo: string; bar: string | null; }>; clock: StoreWritable<string | null>; target: Effect<{ foo: string; bar: string; }, void, Error>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { foo: string; bar: string | null; }; targetType: { foo: string; bar: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { foo: string; bar: string | null; }; targetType: { foo: string; bar: string; }; }; }'.","file":"effector/sample/targetForwarding.test.ts"},{"pos":{"line":182,"col":11},"message":"Argument of type '{ source: StoreWritable<{ foo: string; bar: string | null; }>; target: Effect<{ foo: string; bar: string; }, void, Error>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { foo: string; bar: string | null; }; targetType: { foo: string; bar: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { foo: string; bar: string | null; }; targetType: { foo: string; bar: string; }; }; }'.","file":"effector/sample/targetForwarding.test.ts"},{"pos":{"line":199,"col":13},"message":"Argument of type '{ source: StoreWritable<{}>; clock: EventCallable<void>; target: EventCallable<{ a: string; b: string; }>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: {}; targetType: { a: string; b: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: {}; targetType: { a: string; b: string; }; }; }'.","file":"effector/sample/targetForwarding.test.ts"},{"pos":{"line":212,"col":13},"message":"Argument of type '{ source: StoreWritable<{}>; target: EventCallable<{ a: string; b: string; }>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: {}; targetType: { a: string; b: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: {}; targetType: { a: string; b: string; }; }; }'.","file":"effector/sample/targetForwarding.test.ts"},{"pos":{"line":228,"col":13},"message":"Argument of type '{ source: StoreWritable<null>; clock: EventCallable<void>; fn: () => {}; target: EventCallable<{ a: string; b: string; }>; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: {}; targetType: { a: string; b: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: {}; targetType: { a: string; b: string; }; }; }'.","file":"effector/sample/targetForwarding.test.ts"},{"pos":{"line":243,"col":13},"message":"Argument of type '{ source: StoreWritable<null>; fn: () => {}; target: EventCallable<{ a: string; b: string; }>; }' is not assignable to parameter of type '{ error: \"fn result should extend target type\"; targets: { fnResult: {}; targetType: { a: string; b: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"fn result should extend target type\"; targets: { fnResult: {}; targetType: { a: string; b: string; }; }; }'.","file":"effector/sample/targetForwarding.test.ts"},{"pos":{"line":51,"col":9},"message":"Argument of type '{ source: EventCallable<number>; filter: StoreWritable<string>; }' is not assignable to parameter of type '{ error: \"filter unit should has boolean type\"; got: string; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"filter unit should has boolean type\"; got: string; }'.","file":"effector/sampleFilter.test.ts"},{"pos":{"line":68,"col":9},"message":"Argument of type '{ source: EventCallable<number>; filter: StoreWritable<string>; }' is not assignable to parameter of type '{ error: \"filter unit should has boolean type\"; got: string; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"filter unit should has boolean type\"; got: string; }'.","file":"effector/sampleFilter.test.ts"},{"pos":{"line":103,"col":11},"message":"Argument of type '{ source: EventCallable<number>; filter: StoreWritable<boolean>; target: StoreWritable<string>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string; }; }'.","file":"effector/sampleFilter.test.ts"},{"pos":{"line":134,"col":13},"message":"Type 'Event<number>' is not assignable to type 'Event<string>'.","file":"effector/sampleFilter.test.ts"},{"pos":{"line":167,"col":11},"message":"Argument of type '{ source: EventCallable<number>; filter: (x: number) => boolean; target: StoreWritable<string>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string; }; }'.","file":"effector/sampleFilter.test.ts"},{"pos":{"line":234,"col":13},"message":"Type 'Event<number>' is not assignable to type 'Event<string>'.","file":"effector/sampleFilter.test.ts"},{"pos":{"line":308,"col":11},"message":"Argument of type '{ clock: EventCallable<string>; source: EventCallable<number>; filter: (src: number, clk: string) => boolean; target: StoreWritable<string>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string; }; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string; }; }'.","file":"effector/sampleFilter.test.ts"},{"pos":{"line":379,"col":13},"message":"Type 'Event<User>' is not assignable to type 'Event<string>'.\n  Type 'User' is not assignable to type 'string'.","file":"effector/sampleFilter.test.ts"},{"pos":{"line":434,"col":11},"message":"Argument of type '{ source: EventCallable<User>; filter: BooleanConstructor; target: StoreWritable<string>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: User; targetType: string; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: User; targetType: string; }; }'.","file":"effector/sampleFilter.test.ts"},{"pos":{"line":482,"col":13},"message":"Type 'Event<User>' is not assignable to type 'Event<string>'.\n  Type 'User' is not assignable to type 'string'.","file":"effector/sampleFilter.test.ts"},{"pos":{"line":518,"col":11},"message":"Argument of type '{ clock: EventCallable<User>; filter: BooleanConstructor; target: StoreWritable<string>; }' is not assignable to parameter of type '{ error: \"clock should extend target type\"; targets: { clockType: User; targetType: string; }; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"clock should extend target type\"; targets: { clockType: User; targetType: string; }; }'.","file":"effector/sampleFilter.test.ts"},{"pos":{"line":553,"col":14},"message":"Argument of type '[{ source: EventCallable<any>; filter: () => number; }]' is not assignable to parameter of type '[config: { source: EventCallable<any>; clock?: undefined; filter: (src: any) => src is any; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }] | [config: ...]'.\n  Type '[{ source: EventCallable<any>; filter: () => number; }]' is not assignable to type '[config: { source: EventCallable<any>; clock?: undefined; filter: (src: any) => boolean; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }]'.\n    Type '{ source: EventCallable<any>; filter: () => number; }' is not assignable to type '{ source: EventCallable<any>; clock?: undefined; filter: (src: any) => boolean; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }'.\n      Type '{ source: EventCallable<any>; filter: () => number; }' is not assignable to type '{ source: EventCallable<any>; clock?: undefined; filter: (src: any) => boolean; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }'.\n        The types returned by 'filter(...)' are incompatible between these types.\n          Type 'number' is not assignable to type 'boolean'.","file":"effector/sampleFilter.test.ts"},{"pos":{"line":567,"col":14},"message":"Argument of type '[{ clock: EventCallable<any>; filter: () => number; }]' is not assignable to parameter of type '[config: { clock: EventCallable<any>; source?: undefined; filter: (clk: any) => clk is any; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }] | [config: ...]'.\n  Type '[{ clock: EventCallable<any>; filter: () => number; }]' is not assignable to type '[config: { clock: EventCallable<any>; source?: undefined; filter: (clk: any) => boolean; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }]'.\n    Type '{ clock: EventCallable<any>; filter: () => number; }' is not assignable to type '{ clock: EventCallable<any>; source?: undefined; filter: (clk: any) => boolean; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }'.\n      Type '{ clock: EventCallable<any>; filter: () => number; }' is not assignable to type '{ clock: EventCallable<any>; source?: undefined; filter: (clk: any) => boolean; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }'.\n        The types returned by 'filter(...)' are incompatible between these types.\n          Type 'number' is not assignable to type 'boolean'.","file":"effector/sampleFilter.test.ts"},{"pos":{"line":581,"col":14},"message":"Argument of type '[{ source: EventCallable<any>; clock: EventCallable<any>; filter: () => number; }]' is not assignable to parameter of type '[config: { clock: EventCallable<any>; source: EventCallable<any>; filter: (src: any, clk: any) => src is any; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }] | [config: ...]'.\n  Type '[{ source: EventCallable<any>; clock: EventCallable<any>; filter: () => number; }]' is not assignable to type '[config: { clock: EventCallable<any>; source: EventCallable<any>; filter: (src: any, clk: any) => boolean; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }]'.\n    Type '{ source: EventCallable<any>; clock: EventCallable<any>; filter: () => number; }' is not assignable to type '{ clock: EventCallable<any>; source: EventCallable<any>; filter: (src: any, clk: any) => boolean; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; } & { ...; }'.\n      Type '{ source: EventCallable<any>; clock: EventCallable<any>; filter: () => number; }' is not assignable to type '{ clock: EventCallable<any>; source: EventCallable<any>; filter: (src: any, clk: any) => boolean; target?: undefined; greedy?: boolean | undefined; batch?: boolean | undefined; name?: string | undefined; }'.\n        The types returned by 'filter(...)' are incompatible between these types.\n          Type 'number' is not assignable to type 'boolean'.","file":"effector/sampleFilter.test.ts"},{"pos":{"line":750,"col":12},"message":"Argument of type '[{ source: EventCallable<void>; filter: null; target: EventCallable<void>; }]' is not assignable to parameter of type '[config: never] | [config: never]'.\n  Type '[{ source: EventCallable<void>; filter: null; target: EventCallable<void>; }]' is not assignable to type '[config: never]'.\n    Type '{ source: EventCallable<void>; filter: null; target: EventCallable<void>; }' is not assignable to type 'never'.\n      The intersection '{ source: EventCallable<void>; clock?: undefined; filter: (src: void) => boolean; target: EventCallable<void>; greedy?: boolean | undefined; batch?: boolean | undefined; } & { ...; }' was reduced to 'never' because property 'filter' has conflicting types in some constituents.","file":"effector/sampleFilter.test.ts"},{"pos":{"line":164,"col":17},"message":"Argument of type '{ filter: () => boolean; source: EventCallable<string>; clock: EventCallable<number>; target: EventCallable<number>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: string; targetType: number; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: string; targetType: number; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":166,"col":17},"message":"Argument of type '{ filter: () => boolean; source: EventCallable<string>; clock: EventCallable<string>; target: EventCallable<number>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: string; targetType: number; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: string; targetType: number; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":168,"col":17},"message":"Argument of type '{ filter: () => boolean; source: EventCallable<number>; clock: EventCallable<number>; target: EventCallable<string>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":170,"col":17},"message":"Argument of type '{ filter: () => boolean; source: EventCallable<string>; clock: EventCallable<number>; target: (EventCallable<void> | EventCallable<number>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: string; targetType: number | void; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: string; targetType: number | void; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":180,"col":17},"message":"Argument of type '{ filter: () => boolean; source: EventCallable<string>; clock: EventCallable<string>; target: (EventCallable<void> | EventCallable<number>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: string; targetType: number | void; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: string; targetType: number | void; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":182,"col":17},"message":"Argument of type '{ filter: () => boolean; source: EventCallable<number>; clock: EventCallable<string>; target: EventCallable<string>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":194,"col":17},"message":"Argument of type '{ filter: () => boolean; source: EventCallable<number>; clock: EventCallable<number>; target: (EventCallable<void> | EventCallable<string>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | void; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | void; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":196,"col":17},"message":"Argument of type '{ filter: () => boolean; source: EventCallable<number>; clock: EventCallable<number>; target: (EventCallable<void> | EventCallable<string | boolean>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | boolean | void; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | boolean | void; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":204,"col":17},"message":"Argument of type '{ filter: () => boolean; source: EventCallable<number>; clock: EventCallable<string>; target: (EventCallable<void> | EventCallable<string>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | void; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | void; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":206,"col":17},"message":"Argument of type '{ filter: () => boolean; source: EventCallable<number>; clock: EventCallable<number>; target: EventCallable<string | boolean>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | boolean; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | boolean; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":208,"col":17},"message":"Argument of type '{ filter: () => boolean; source: EventCallable<number>; clock: EventCallable<string>; target: EventCallable<string | boolean>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | boolean; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | boolean; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":214,"col":17},"message":"Argument of type '{ filter: () => boolean; source: EventCallable<number>; clock: EventCallable<string>; target: (EventCallable<void> | EventCallable<string | boolean>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | boolean | void; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | boolean | void; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":216,"col":17},"message":"Argument of type '{ filter: () => boolean; source: EventCallable<number>; clock: EventCallable<number>; target: (EventCallable<void> | EventCallable<string | boolean>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | boolean | void; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | boolean | void; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":226,"col":17},"message":"Argument of type '{ filter: () => boolean; source: EventCallable<number>; clock: EventCallable<string>; target: (EventCallable<void> | EventCallable<string | boolean>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | boolean | void; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number; targetType: string | boolean | void; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":276,"col":17},"message":"Argument of type '{ filter: () => boolean; source: (StoreWritable<number> | StoreWritable<string>)[]; target: EventCallable<[number, string]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":277,"col":17},"message":"Argument of type '{ filter: () => boolean; source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: EventCallable<[number, string]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":278,"col":17},"message":"Argument of type '{ filter: () => boolean; source: (StoreWritable<number> | StoreWritable<string>)[]; target: EventCallable<[number]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":279,"col":17},"message":"Argument of type '{ filter: () => boolean; source: (StoreWritable<number> | StoreWritable<string>)[]; target: (EventCallable<[number]> | EventCallable<[number, string]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string] | [number]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string] | [number]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":280,"col":17},"message":"Argument of type '{ filter: () => boolean; source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: EventCallable<[number]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":281,"col":17},"message":"Argument of type '{ filter: () => boolean; source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: (EventCallable<[number]> | EventCallable<...>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string] | [number]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, string] | [number]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":304,"col":17},"message":"Argument of type '{ filter: () => boolean; source: { a: StoreWritable<number>; b: StoreWritable<string>; }; target: EventCallable<ABN>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: ABN; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":308,"col":17},"message":"Argument of type '{ filter: () => boolean; source: { a: StoreWritable<number>; b: StoreWritable<string>; }; target: (EventCallable<AS> | EventCallable<ABN>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: AS | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: AS | ABN; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":310,"col":17},"message":"Argument of type '{ filter: () => boolean; source: { a: StoreWritable<number>; b: StoreWritable<string>; }; target: EventCallable<AS>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: AS; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: AS; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":320,"col":17},"message":"Argument of type '{ filter: () => boolean; source: { a: StoreWritable<number>; b: StoreWritable<string>; }; clock: EventCallable<number>; target: EventCallable<ABN>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: ABN; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":322,"col":17},"message":"Argument of type '{ filter: () => boolean; source: { a: StoreWritable<number>; b: StoreWritable<string>; }; clock: EventCallable<number>; target: (EventCallable<AS> | EventCallable<...>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: AS | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: AS | ABN; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":326,"col":17},"message":"Argument of type '{ filter: () => boolean; source: { a: StoreWritable<number>; b: StoreWritable<string>; }; clock: EventCallable<number>; target: EventCallable<AS>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: AS; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; b: string; }; targetType: AS; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":336,"col":17},"message":"Argument of type '{ filter: () => boolean; source: (StoreWritable<number> | StoreWritable<string>)[]; target: EventCallable<[string]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [string]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [string]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":338,"col":17},"message":"Argument of type '{ filter: () => boolean; source: (StoreWritable<number> | StoreWritable<string>)[]; target: (EventCallable<[number]> | EventCallable<[string]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [string] | [number]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [string] | [number]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":340,"col":17},"message":"Argument of type '{ filter: () => boolean; source: (StoreWritable<number> | StoreWritable<string>)[]; target: (EventCallable<[number, string]> | EventCallable<[number, number]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number] | [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number] | [number, string]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":342,"col":17},"message":"Argument of type '{ filter: () => boolean; source: (StoreWritable<number> | StoreWritable<string>)[]; target: (EventCallable<[number]> | EventCallable<[number, number]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number] | [number]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number] | [number]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":344,"col":17},"message":"Argument of type '{ filter: () => boolean; source: (StoreWritable<number> | StoreWritable<string>)[]; target: (EventCallable<[string]> | EventCallable<[number, string]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [string] | [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [string] | [number, string]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":346,"col":17},"message":"Argument of type '{ filter: () => boolean; source: (StoreWritable<number> | StoreWritable<string>)[]; target: (EventCallable<[string]> | EventCallable<[number, number]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number] | [string]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number] | [string]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":348,"col":17},"message":"Argument of type '{ filter: () => boolean; source: (StoreWritable<number> | StoreWritable<string>)[]; target: EventCallable<[number, number]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":350,"col":17},"message":"Argument of type '{ filter: () => boolean; source: (StoreWritable<number> | StoreWritable<string>)[]; target: (EventCallable<[string]> | EventCallable<[number, number]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number] | [string]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number] | [string]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":352,"col":17},"message":"Argument of type '{ filter: () => boolean; source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: EventCallable<[string]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [string]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [string]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":354,"col":17},"message":"Argument of type '{ filter: () => boolean; source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: (EventCallable<[number]> | EventCallable<...>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [string] | [number]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [string] | [number]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":356,"col":17},"message":"Argument of type '{ filter: () => boolean; source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: (EventCallable<[number]> | EventCallable<...>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number] | [number]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number] | [number]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":358,"col":17},"message":"Argument of type '{ filter: () => boolean; source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: (EventCallable<[string]> | EventCallable<...>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [string] | [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [string] | [number, string]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":360,"col":17},"message":"Argument of type '{ filter: () => boolean; source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: (EventCallable<[string]> | EventCallable<...>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number] | [string]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number] | [string]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":362,"col":17},"message":"Argument of type '{ filter: () => boolean; source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: (EventCallable<[string]> | EventCallable<...>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number] | [string]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number] | [string]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":364,"col":17},"message":"Argument of type '{ filter: () => boolean; source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: (EventCallable<[number, string]> | EventCallable<...>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number] | [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number] | [number, string]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":366,"col":17},"message":"Argument of type '{ filter: () => boolean; source: (StoreWritable<number> | StoreWritable<string>)[]; clock: EventCallable<number>; target: EventCallable<[number, number]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: (string | number)[]; targetType: [number, number]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":424,"col":17},"message":"Argument of type '{ filter: () => boolean; source: StoreWritable<number>[]; target: EventCallable<[number]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":425,"col":17},"message":"Argument of type '{ filter: () => boolean; source: StoreWritable<number>[]; clock: EventCallable<number>; target: EventCallable<[number]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":440,"col":17},"message":"Argument of type '{ filter: () => boolean; source: { a: StoreWritable<number>; }; target: EventCallable<AS>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AS; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AS; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":442,"col":17},"message":"Argument of type '{ filter: () => boolean; source: { a: StoreWritable<number>; }; target: EventCallable<ABN>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: ABN; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":444,"col":17},"message":"Argument of type '{ filter: () => boolean; source: { a: StoreWritable<number>; }; target: EventCallable<AB>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AB; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AB; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":452,"col":17},"message":"Argument of type '{ filter: () => boolean; source: { a: StoreWritable<number>; }; target: (EventCallable<AS> | EventCallable<AB>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AS | AB; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AS | AB; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":454,"col":17},"message":"Argument of type '{ filter: () => boolean; source: { a: StoreWritable<number>; }; target: (EventCallable<AS> | EventCallable<ABN>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AS | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AS | ABN; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":456,"col":17},"message":"Argument of type '{ filter: () => boolean; source: { a: StoreWritable<number>; }; target: (EventCallable<AB> | EventCallable<ABN>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AB | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AB | ABN; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":458,"col":17},"message":"Argument of type '{ filter: () => boolean; source: { a: StoreWritable<number>; }; target: (EventCallable<AS> | EventCallable<AB>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AS | AB; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AS | AB; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":460,"col":17},"message":"Argument of type '{ filter: () => boolean; source: { a: StoreWritable<number>; }; clock: EventCallable<number>; target: EventCallable<AS>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AS; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AS; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":464,"col":17},"message":"Argument of type '{ filter: () => boolean; source: { a: StoreWritable<number>; }; clock: EventCallable<number>; target: (EventCallable<AB> | EventCallable<ABN>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AB | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AB | ABN; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":466,"col":17},"message":"Argument of type '{ filter: () => boolean; source: { a: StoreWritable<number>; }; clock: EventCallable<number>; target: (EventCallable<AS> | EventCallable<ABN>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AS | ABN; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AS | ABN; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":468,"col":17},"message":"Argument of type '{ filter: () => boolean; source: { a: StoreWritable<number>; }; clock: EventCallable<number>; target: EventCallable<ABN>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: ABN; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: ABN; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":470,"col":17},"message":"Argument of type '{ filter: () => boolean; source: { a: StoreWritable<number>; }; clock: EventCallable<number>; target: (EventCallable<AS> | EventCallable<AB>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AS | AB; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AS | AB; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":476,"col":17},"message":"Argument of type '{ filter: () => boolean; source: { a: StoreWritable<number>; }; clock: EventCallable<number>; target: EventCallable<AB>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AB; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AB; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":478,"col":17},"message":"Argument of type '{ filter: () => boolean; source: { a: StoreWritable<number>; }; clock: EventCallable<number>; target: (EventCallable<AS> | EventCallable<AB>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AS | AB; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { a: number; }; targetType: AS | AB; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":480,"col":17},"message":"Argument of type '{ filter: () => boolean; source: StoreWritable<number>[]; target: EventCallable<[string]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [string]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [string]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":482,"col":17},"message":"Argument of type '{ filter: () => boolean; source: StoreWritable<number>[]; target: EventCallable<[number, string]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, string]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":484,"col":17},"message":"Argument of type '{ filter: () => boolean; source: StoreWritable<number>[]; target: EventCallable<[number, number]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":486,"col":17},"message":"Argument of type '{ filter: () => boolean; source: StoreWritable<number>[]; target: (EventCallable<[number]> | EventCallable<[string]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [string] | [number]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [string] | [number]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":488,"col":17},"message":"Argument of type '{ filter: () => boolean; source: StoreWritable<number>[]; target: (EventCallable<[number]> | EventCallable<[number, string]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, string] | [number]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, string] | [number]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":490,"col":17},"message":"Argument of type '{ filter: () => boolean; source: StoreWritable<number>[]; target: (EventCallable<[number]> | EventCallable<[number, number]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number] | [number]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number] | [number]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":492,"col":17},"message":"Argument of type '{ filter: () => boolean; source: StoreWritable<number>[]; target: (EventCallable<[string]> | EventCallable<[number, number]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number] | [string]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number] | [string]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":494,"col":17},"message":"Argument of type '{ filter: () => boolean; source: StoreWritable<number>[]; target: (EventCallable<[string]> | EventCallable<[number, string]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [string] | [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [string] | [number, string]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":496,"col":17},"message":"Argument of type '{ filter: () => boolean; source: StoreWritable<number>[]; target: (EventCallable<[number, string]> | EventCallable<[number, number]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number] | [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number] | [number, string]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":498,"col":17},"message":"Argument of type '{ filter: () => boolean; source: StoreWritable<number>[]; target: (EventCallable<[string]> | EventCallable<[number, number]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number] | [string]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number] | [string]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":500,"col":17},"message":"Argument of type '{ filter: () => boolean; source: StoreWritable<number>[]; clock: EventCallable<number>; target: EventCallable<[string]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [string]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [string]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":502,"col":17},"message":"Argument of type '{ filter: () => boolean; source: StoreWritable<number>[]; clock: EventCallable<number>; target: EventCallable<[number, string]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, string]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":504,"col":17},"message":"Argument of type '{ filter: () => boolean; source: StoreWritable<number>[]; clock: EventCallable<number>; target: EventCallable<[number, number]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":506,"col":17},"message":"Argument of type '{ filter: () => boolean; source: StoreWritable<number>[]; clock: EventCallable<number>; target: (EventCallable<[number]> | EventCallable<[string]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [string] | [number]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [string] | [number]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":508,"col":17},"message":"Argument of type '{ filter: () => boolean; source: StoreWritable<number>[]; clock: EventCallable<number>; target: (EventCallable<[number]> | EventCallable<[number, string]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, string] | [number]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, string] | [number]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":510,"col":17},"message":"Argument of type '{ filter: () => boolean; source: StoreWritable<number>[]; clock: EventCallable<number>; target: (EventCallable<[number]> | EventCallable<[number, number]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number] | [number]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number] | [number]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":512,"col":17},"message":"Argument of type '{ filter: () => boolean; source: StoreWritable<number>[]; clock: EventCallable<number>; target: (EventCallable<[string]> | EventCallable<[number, number]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number] | [string]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number] | [string]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":514,"col":17},"message":"Argument of type '{ filter: () => boolean; source: StoreWritable<number>[]; clock: EventCallable<number>; target: (EventCallable<[string]> | EventCallable<[number, string]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [string] | [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [string] | [number, string]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":516,"col":17},"message":"Argument of type '{ filter: () => boolean; source: StoreWritable<number>[]; clock: EventCallable<number>; target: (EventCallable<[number, string]> | EventCallable<[...]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number] | [number, string]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number] | [number, string]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":518,"col":17},"message":"Argument of type '{ filter: () => boolean; source: StoreWritable<number>[]; clock: EventCallable<number>; target: (EventCallable<[string]> | EventCallable<[number, number]>)[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number] | [string]; }[]; }'.\n  Object literal may only specify known properties, and 'filter' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: number[]; targetType: [number, number] | [string]; }[]; }'.","file":"effector/sampleFilter/sampleFilterArrayTarget.test.ts"},{"pos":{"line":19,"col":5},"message":"Argument of type '{ source: EventCallable<number>; filter: StoreWritable<string>; }' is not assignable to parameter of type '{ error: \"filter unit should has boolean type\"; got: string; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"filter unit should has boolean type\"; got: string; }'.","file":"effector/sampleFilter/sampleFilterOther.test.ts"},{"pos":{"line":24,"col":5},"message":"Argument of type '{ source: EventCallable<number>; clock: EventCallable<number>; filter: StoreWritable<string>; }' is not assignable to parameter of type '{ error: \"filter unit should has boolean type\"; got: string; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"filter unit should has boolean type\"; got: string; }'.","file":"effector/sampleFilter/sampleFilterOther.test.ts"},{"pos":{"line":30,"col":5},"message":"Argument of type '{ clock: EventCallable<number>; filter: StoreWritable<string>; }' is not assignable to parameter of type '{ error: \"filter unit should has boolean type\"; got: string; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"filter unit should has boolean type\"; got: string; }'.","file":"effector/sampleFilter/sampleFilterOther.test.ts"},{"pos":{"line":69,"col":23},"message":"A type predicate's type must be assignable to its parameter's type.\n  Type '{ field: string | number; data: number; }' is not assignable to type '{ field: string | number | boolean; data: { a: number; }; }'.\n    Types of property 'data' are incompatible.\n      Type 'number' is not assignable to type '{ a: number; }'.","file":"effector/sampleFilter/sampleFilterOther.test.ts"},{"pos":{"line":115,"col":23},"message":"A type predicate's type must be assignable to its parameter's type.\n  Type '{ field: number; data: number; }' is not assignable to type '{ field: string | number | boolean; data: { a: number; }; }'.\n    Types of property 'data' are incompatible.\n      Type 'number' is not assignable to type '{ a: number; }'.","file":"effector/sampleFilter/sampleFilterOther.test.ts"},{"pos":{"line":356,"col":15},"message":"Property 'a' does not exist on type 'AN | null'.","file":"effector/sampleFilter/sampleFilterOther.test.ts"},{"pos":{"line":412,"col":15},"message":"Property 'a' does not exist on type 'AN | null'.","file":"effector/sampleFilter/sampleFilterOther.test.ts"},{"pos":{"line":139,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.\n  Target requires 2 element(s) but source may have fewer.","file":"effector/sampleFilter/sampleFilterReturn.test.ts"},{"pos":{"line":140,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/sampleFilter/sampleFilterReturn.test.ts"},{"pos":{"line":141,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/sampleFilter/sampleFilterReturn.test.ts"},{"pos":{"line":155,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/sampleFilter/sampleFilterReturn.test.ts"},{"pos":{"line":156,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/sampleFilter/sampleFilterReturn.test.ts"},{"pos":{"line":157,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/sampleFilter/sampleFilterReturn.test.ts"},{"pos":{"line":170,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/sampleFilter/sampleFilterReturn.test.ts"},{"pos":{"line":171,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/sampleFilter/sampleFilterReturn.test.ts"},{"pos":{"line":172,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/sampleFilter/sampleFilterReturn.test.ts"},{"pos":{"line":185,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/sampleFilter/sampleFilterReturn.test.ts"},{"pos":{"line":186,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/sampleFilter/sampleFilterReturn.test.ts"},{"pos":{"line":187,"col":14},"message":"Type '(EventCallable<AN> | StoreWritable<{ a: number; }>)[]' is not assignable to type '[Event<AN>, Store<AN>]'.","file":"effector/sampleFilter/sampleFilterReturn.test.ts"},{"pos":{"line":12,"col":5},"message":"Argument of type '{ clock: EventCallable<{ a: 1; } | { a: 2; } | { a: 3; }>; filter: StoreWritable<boolean>; target: EventCallable<{ a: 1; } | { a: 2; }>; }' is not assignable to parameter of type '{ error: \"clock should extend target type\"; targets: { clockType: { a: 1; } | { a: 2; } | { a: 3; }; targetType: { a: 1; } | { a: 2; }; }; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"clock should extend target type\"; targets: { clockType: { a: 1; } | { a: 2; } | { a: 3; }; targetType: { a: 1; } | { a: 2; }; }; }'.","file":"effector/sampleFilter/sampleFilterWideNarrow.test.ts"},{"pos":{"line":18,"col":9},"message":"Type 'Event<{ a: 1; } | { a: 2; } | { a: 3; }>' is missing the following properties from type 'EventCallable<{ a: 1; } | { a: 2; }>': prepend, targetable","file":"effector/sampleFilter/sampleFilterWideNarrow.test.ts"},{"pos":{"line":25,"col":5},"message":"Argument of type '{ clock: EventCallable<{ a: 1; } | { a: 2; } | { a: 3; }>; filter: StoreWritable<boolean>; target: EventCallable<{ a: 1; } | { a: 2; }>[]; }' is not assignable to parameter of type '{ error: \"clock should extend target type\"; targets: { clockType: { a: 1; } | { a: 2; } | { a: 3; }; targetType: { a: 1; } | { a: 2; }; }[]; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"clock should extend target type\"; targets: { clockType: { a: 1; } | { a: 2; } | { a: 3; }; targetType: { a: 1; } | { a: 2; }; }[]; }'.","file":"effector/sampleFilter/sampleFilterWideNarrow.test.ts"},{"pos":{"line":31,"col":9},"message":"Type 'Event<{ a: 1; } | { a: 2; } | { a: 3; }>' is not assignable to type '[EventCallable<{ a: 1; } | { a: 2; }>]'.","file":"effector/sampleFilter/sampleFilterWideNarrow.test.ts"},{"pos":{"line":79,"col":5},"message":"Argument of type '{ clock: EventCallable<unknown>; filter: StoreWritable<boolean>; target: EventCallable<string>; }' is not assignable to parameter of type '{ error: \"clock should extend target type\"; targets: { clockType: unknown; targetType: string; }; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"clock should extend target type\"; targets: { clockType: unknown; targetType: string; }; }'.","file":"effector/sampleFilter/sampleFilterWideNarrow.test.ts"},{"pos":{"line":85,"col":9},"message":"Type 'Event<unknown>' is not assignable to type 'EventCallable<string>'.","file":"effector/sampleFilter/sampleFilterWideNarrow.test.ts"},{"pos":{"line":92,"col":5},"message":"Argument of type '{ clock: EventCallable<unknown>; filter: StoreWritable<boolean>; target: EventCallable<string>[]; }' is not assignable to parameter of type '{ error: \"clock should extend target type\"; targets: { clockType: unknown; targetType: string; }[]; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"clock should extend target type\"; targets: { clockType: unknown; targetType: string; }[]; }'.","file":"effector/sampleFilter/sampleFilterWideNarrow.test.ts"},{"pos":{"line":98,"col":9},"message":"Type 'Event<unknown>' is not assignable to type '[EventCallable<string>]'.","file":"effector/sampleFilter/sampleFilterWideNarrow.test.ts"},{"pos":{"line":146,"col":5},"message":"Argument of type '{ clock: EventCallable<{ a: 1; b?: 2 | undefined; }>; filter: StoreWritable<boolean>; target: EventCallable<{ a: 1; b: 2; }>; }' is not assignable to parameter of type '{ error: \"clock should extend target type\"; targets: { clockType: { a: 1; b?: 2 | undefined; }; targetType: { a: 1; b: 2; }; }; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"clock should extend target type\"; targets: { clockType: { a: 1; b?: 2 | undefined; }; targetType: { a: 1; b: 2; }; }; }'.","file":"effector/sampleFilter/sampleFilterWideNarrow.test.ts"},{"pos":{"line":152,"col":9},"message":"Type 'Event<{ a: 1; b?: 2 | undefined; }>' is missing the following properties from type 'EventCallable<{ a: 1; b: 2; }>': prepend, targetable","file":"effector/sampleFilter/sampleFilterWideNarrow.test.ts"},{"pos":{"line":159,"col":5},"message":"Argument of type '{ clock: EventCallable<{ a: 1; b?: 2 | undefined; }>; filter: StoreWritable<boolean>; target: EventCallable<{ a: 1; b: 2; }>[]; }' is not assignable to parameter of type '{ error: \"clock should extend target type\"; targets: { clockType: { a: 1; b?: 2 | undefined; }; targetType: { a: 1; b: 2; }; }[]; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"clock should extend target type\"; targets: { clockType: { a: 1; b?: 2 | undefined; }; targetType: { a: 1; b: 2; }; }[]; }'.","file":"effector/sampleFilter/sampleFilterWideNarrow.test.ts"},{"pos":{"line":165,"col":9},"message":"Type 'Event<{ a: 1; b?: 2 | undefined; }>' is not assignable to type '[EventCallable<{ a: 1; b: 2; }>]'.","file":"effector/sampleFilter/sampleFilterWideNarrow.test.ts"},{"pos":{"line":213,"col":5},"message":"Argument of type '{ clock: EventCallable<{ a: 1; b: 2; }>; filter: StoreWritable<boolean>; target: EventCallable<{ a: 1; b: 2; c: 3; }>; }' is not assignable to parameter of type '{ error: \"clock should extend target type\"; targets: { clockType: { a: 1; b: 2; }; targetType: { a: 1; b: 2; c: 3; }; }; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"clock should extend target type\"; targets: { clockType: { a: 1; b: 2; }; targetType: { a: 1; b: 2; c: 3; }; }; }'.","file":"effector/sampleFilter/sampleFilterWideNarrow.test.ts"},{"pos":{"line":219,"col":9},"message":"Type 'Event<{ a: 1; b: 2; }>' is missing the following properties from type 'EventCallable<{ a: 1; b: 2; c: 3; }>': prepend, targetable","file":"effector/sampleFilter/sampleFilterWideNarrow.test.ts"},{"pos":{"line":226,"col":5},"message":"Argument of type '{ clock: EventCallable<{ a: 1; b: 2; }>; filter: StoreWritable<boolean>; target: EventCallable<{ a: 1; b: 2; c: 3; }>[]; }' is not assignable to parameter of type '{ error: \"clock should extend target type\"; targets: { clockType: { a: 1; b: 2; }; targetType: { a: 1; b: 2; c: 3; }; }[]; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"clock should extend target type\"; targets: { clockType: { a: 1; b: 2; }; targetType: { a: 1; b: 2; c: 3; }; }[]; }'.","file":"effector/sampleFilter/sampleFilterWideNarrow.test.ts"},{"pos":{"line":232,"col":9},"message":"Type 'Event<{ a: 1; b: 2; }>' is not assignable to type '[EventCallable<{ a: 1; b: 2; c: 3; }>]'.","file":"effector/sampleFilter/sampleFilterWideNarrow.test.ts"},{"pos":{"line":255,"col":5},"message":"Argument of type '{ source: { foo: StoreWritable<string>; }; filter: () => boolean; target: EventCallable<{ foo: string; bar: string; }>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: { foo: string; }; targetType: { foo: string; bar: string; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: { foo: string; }; targetType: { foo: string; bar: string; }; }; }'.","file":"effector/sampleFilter/sampleFilterWideNarrow.test.ts"},{"pos":{"line":299,"col":5},"message":"Argument of type '{ source: EventCallable<[1, 2]>; filter: StoreWritable<boolean>; target: EventCallable<[1, 2, 3]>; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: [1, 2]; targetType: [1, 2, 3]; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: [1, 2]; targetType: [1, 2, 3]; }; }'.","file":"effector/sampleFilter/sampleFilterWideNarrow.test.ts"},{"pos":{"line":306,"col":5},"message":"Argument of type '{ source: EventCallable<[1, 2]>; filter: StoreWritable<boolean>; target: EventCallable<[1, 2, 3]>[]; }' is not assignable to parameter of type '{ error: \"source should extend target type\"; targets: { sourceType: [1, 2]; targetType: [1, 2, 3]; }[]; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source should extend target type\"; targets: { sourceType: [1, 2]; targetType: [1, 2, 3]; }[]; }'.","file":"effector/sampleFilter/sampleFilterWideNarrow.test.ts"},{"pos":{"line":328,"col":5},"message":"Argument of type '{ clock: EventCallable<(string | number | boolean)[]>; filter: StoreWritable<boolean>; target: EventCallable<(string | number)[]>; }' is not assignable to parameter of type '{ error: \"clock should extend target type\"; targets: { clockType: (string | number | boolean)[]; targetType: (string | number)[]; }; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"clock should extend target type\"; targets: { clockType: (string | number | boolean)[]; targetType: (string | number)[]; }; }'.","file":"effector/sampleFilter/sampleFilterWideNarrow.test.ts"},{"pos":{"line":334,"col":9},"message":"Type 'Event<(string | number | boolean)[]>' is not assignable to type 'EventCallable<(string | number)[]>'.","file":"effector/sampleFilter/sampleFilterWideNarrow.test.ts"},{"pos":{"line":341,"col":5},"message":"Argument of type '{ clock: EventCallable<(string | number | boolean)[]>; filter: StoreWritable<boolean>; target: EventCallable<(string | number)[]>[]; }' is not assignable to parameter of type '{ error: \"clock should extend target type\"; targets: { clockType: (string | number | boolean)[]; targetType: (string | number)[]; }[]; }'.\n  Object literal may only specify known properties, and 'clock' does not exist in type '{ error: \"clock should extend target type\"; targets: { clockType: (string | number | boolean)[]; targetType: (string | number)[]; }[]; }'.","file":"effector/sampleFilter/sampleFilterWideNarrow.test.ts"},{"pos":{"line":347,"col":9},"message":"Type 'Event<(string | number | boolean)[]>' is not assignable to type '[EventCallable<(string | number)[]>]'.","file":"effector/sampleFilter/sampleFilterWideNarrow.test.ts"},{"pos":{"line":96,"col":5},"message":"Argument of type '{ source: EventCallable<number>; match: StoreWritable<\"a\" | \"c\">; cases: { a: EventCallable<number>; b: EventCallable<number>; __: EventCallable<...>; }; }' is not assignable to parameter of type '{ error: \"match unit should contain case names\"; need: \"a\" | \"b\"; got: \"a\" | \"c\"; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"match unit should contain case names\"; need: \"a\" | \"b\"; got: \"a\" | \"c\"; }'.","file":"effector/split.test.ts"},{"pos":{"line":140,"col":5},"message":"Argument of type '{ source: EventCallable<number>; match: (x: number) => \"a\" | \"c\"; cases: { a: EventCallable<number>; b: EventCallable<number>; __: EventCallable<number>; }; }' is not assignable to parameter of type '{ error: \"match function should return case names\"; need: \"a\" | \"b\"; got: \"a\" | \"c\"; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"match function should return case names\"; need: \"a\" | \"b\"; got: \"a\" | \"c\"; }'.","file":"effector/split.test.ts"},{"pos":{"line":238,"col":7},"message":"Argument of type '{ source: EventCallable<number>; match: StoreWritable<\"a\" | \"b\">; cases: { a: (EventCallable<void> | EventCallable<string>)[]; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: number; caseType: string | void; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: number; caseType: string | void; }'.","file":"effector/split.test.ts"},{"pos":{"line":382,"col":7},"message":"Argument of type '{ source: EventCallable<A | B>; match: { a: (src: A | B) => src is B; c: StoreWritable<boolean>; }; cases: { a: (EventCallable<A> | EventCallable<...>)[]; c: EventCallable<...>; __: EventCallable<...>; }; }' is not assignable to parameter of type '{ error: \"case should extends type inferred by matcher function\"; incorrectCases: { a: { caseType: A | { value: 0; }; inferredType: B; }; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"case should extends type inferred by matcher function\"; incorrectCases: { a: { caseType: A | { value: 0; }; inferredType: B; }; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":495,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: StoreWritable<\"a\">; cases: { a: EventCallable<{ foo: 1; }>[]; b: EventCallable<{ foo: 1; }>[]; }; }' is not assignable to parameter of type '{ error: \"match unit should contain case names\"; need: \"a\" | \"b\"; got: \"a\"; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"match unit should contain case names\"; need: \"a\" | \"b\"; got: \"a\"; }'.","file":"effector/split.test.ts"},{"pos":{"line":558,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: StoreWritable<\"a\" | \"b\">; cases: { a: EventCallable<{ foo: 1; }>[]; b: EventCallable<{ foo: 1; }>; c: EventCallable<...>; }; }' is not assignable to parameter of type '{ error: \"match unit should contain case names\"; need: \"a\" | \"b\" | \"c\"; got: \"a\" | \"b\"; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"match unit should contain case names\"; need: \"a\" | \"b\" | \"c\"; got: \"a\" | \"b\"; }'.","file":"effector/split.test.ts"},{"pos":{"line":619,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; bar: number; }>; match: StoreWritable<\"a\">; cases: { a: EventCallable<{ foo: 1; }>[]; b: EventCallable<{ foo: 1; }>[]; }; }' is not assignable to parameter of type '{ error: \"match unit should contain case names\"; need: \"a\" | \"b\"; got: \"a\"; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"match unit should contain case names\"; need: \"a\" | \"b\"; got: \"a\"; }'.","file":"effector/split.test.ts"},{"pos":{"line":682,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; bar: number; }>; match: StoreWritable<\"a\" | \"b\">; cases: { a: EventCallable<{ foo: 1; }>[]; b: EventCallable<{ foo: 1; }>; c: EventCallable<...>; }; }' is not assignable to parameter of type '{ error: \"match unit should contain case names\"; need: \"a\" | \"b\" | \"c\"; got: \"a\" | \"b\"; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"match unit should contain case names\"; need: \"a\" | \"b\" | \"c\"; got: \"a\" | \"b\"; }'.","file":"effector/split.test.ts"},{"pos":{"line":707,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: StoreWritable<\"a\" | \"b\">; cases: { a: EventCallable<{ foo: 1; bar: number; }>[]; b: EventCallable<{ foo: 1; bar: string; }>[]; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 1; bar: number; } | { foo: 1; bar: string; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 1; bar: number; } | { foo: 1; bar: string; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":727,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: StoreWritable<\"a\" | \"b\">; cases: { a: EventCallable<{ foo: 1; bar: number; }>[]; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 1; bar: number; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 1; bar: number; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":747,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: StoreWritable<\"a\">; cases: { a: EventCallable<{ foo: 1; bar: number; }>[]; b: EventCallable<{ foo: 1; bar: string; }>[]; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 1; bar: number; } | { foo: 1; bar: string; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 1; bar: number; } | { foo: 1; bar: string; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":771,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: StoreWritable<\"a\" | \"b\">; cases: { a: EventCallable<{ foo: 1; bar: number; }>[]; b: EventCallable<{ foo: 1; bar: string; }>; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 1; bar: number; } | { foo: 1; bar: string; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 1; bar: number; } | { foo: 1; bar: string; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":792,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: StoreWritable<\"a\" | \"b\" | \"c\">; cases: { a: EventCallable<{ foo: 1; bar: number; }>[]; b: EventCallable<{ foo: 1; bar: string; }>; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 1; bar: number; } | { foo: 1; bar: string; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 1; bar: number; } | { foo: 1; bar: string; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":814,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: StoreWritable<\"a\" | \"b\">; cases: { a: EventCallable<{ foo: 1; bar: number; }>[]; b: EventCallable<{ foo: 1; bar: string; }>; c: EventCallable<...>; }; }' is not assignable to parameter of type '{ error: \"match unit should contain case names\"; need: \"a\" | \"b\" | \"c\"; got: \"a\" | \"b\"; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"match unit should contain case names\"; need: \"a\" | \"b\" | \"c\"; got: \"a\" | \"b\"; }'.","file":"effector/split.test.ts"},{"pos":{"line":839,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: StoreWritable<\"a\" | \"b\">; cases: { a: EventCallable<{ foo: 2; }>[]; b: EventCallable<{ foo: 2; }>[]; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; } | { foo: 2; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; } | { foo: 2; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":859,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: StoreWritable<\"a\" | \"b\">; cases: { a: EventCallable<{ foo: 2; }>[]; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":879,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: StoreWritable<\"a\">; cases: { a: EventCallable<{ foo: 2; }>[]; b: EventCallable<{ foo: 2; }>[]; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; } | { foo: 2; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; } | { foo: 2; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":903,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: StoreWritable<\"a\" | \"b\">; cases: { a: EventCallable<{ foo: 2; }>[]; b: EventCallable<{ foo: 2; }>; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; } | { foo: 2; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; } | { foo: 2; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":924,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: StoreWritable<\"a\" | \"b\" | \"c\">; cases: { a: EventCallable<{ foo: 2; }>[]; b: EventCallable<{ foo: 2; }>; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; } | { foo: 2; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; } | { foo: 2; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":946,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: StoreWritable<\"a\" | \"b\">; cases: { a: EventCallable<{ foo: 2; }>[]; b: EventCallable<{ foo: 2; }>; c: EventCallable<...>; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; } | { foo: 2; } | { foo: 2; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; } | { foo: 2; } | { foo: 2; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":1005,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: (src: { foo: 1; }) => \"a\"; cases: { a: EventCallable<{ foo: 1; }>[]; b: EventCallable<{ foo: 1; }>[]; }; }' is not assignable to parameter of type '{ error: \"match function should return case names\"; need: \"a\" | \"b\"; got: \"a\"; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"match function should return case names\"; need: \"a\" | \"b\"; got: \"a\"; }'.","file":"effector/split.test.ts"},{"pos":{"line":1065,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: (src: { foo: 1; }) => \"a\" | \"b\"; cases: { a: EventCallable<{ foo: 1; }>[]; b: EventCallable<{ foo: 1; }>; c: EventCallable<...>; }; }' is not assignable to parameter of type '{ error: \"match function should return case names\"; need: \"a\" | \"b\" | \"c\"; got: \"a\" | \"b\"; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"match function should return case names\"; need: \"a\" | \"b\" | \"c\"; got: \"a\" | \"b\"; }'.","file":"effector/split.test.ts"},{"pos":{"line":1123,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; bar: number; }>; match: (src: { foo: 1; bar: number; }) => \"a\"; cases: { a: EventCallable<{ foo: 1; }>[]; b: EventCallable<{ foo: 1; }>[]; }; }' is not assignable to parameter of type '{ error: \"match function should return case names\"; need: \"a\" | \"b\"; got: \"a\"; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"match function should return case names\"; need: \"a\" | \"b\"; got: \"a\"; }'.","file":"effector/split.test.ts"},{"pos":{"line":1183,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; bar: number; }>; match: (src: { foo: 1; bar: number; }) => \"a\" | \"b\"; cases: { a: EventCallable<{ foo: 1; }>[]; b: EventCallable<{ foo: 1; }>; c: EventCallable<...>; }; }' is not assignable to parameter of type '{ error: \"match function should return case names\"; need: \"a\" | \"b\" | \"c\"; got: \"a\" | \"b\"; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"match function should return case names\"; need: \"a\" | \"b\" | \"c\"; got: \"a\" | \"b\"; }'.","file":"effector/split.test.ts"},{"pos":{"line":1207,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: (src: any) => \"a\" | \"b\"; cases: { a: EventCallable<{ foo: 1; bar: number; }>[]; b: EventCallable<{ foo: 1; bar: string; }>[]; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 1; bar: number; } | { foo: 1; bar: string; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 1; bar: number; } | { foo: 1; bar: string; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":1209,"col":17},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":1228,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: (src: any) => \"a\" | \"b\"; cases: { a: EventCallable<{ foo: 1; bar: number; }>[]; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 1; bar: number; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 1; bar: number; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":1230,"col":17},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":1249,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: (src: any) => \"a\"; cases: { a: EventCallable<{ foo: 1; bar: number; }>[]; b: EventCallable<{ foo: 1; bar: string; }>[]; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 1; bar: number; } | { foo: 1; bar: string; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 1; bar: number; } | { foo: 1; bar: string; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":1251,"col":17},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":1278,"col":9},"message":"Argument of type '{ source: Event<{ a: number | null; b: number | null; }>; match: { write: (src: any) => boolean; }; cases: { write: EventCallable<{ a: number; b: number; }>; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { a: number | null; b: number | null; }; caseType: { a: number; b: number; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { a: number | null; b: number | null; }; caseType: { a: number; b: number; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":1281,"col":18},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":1303,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: (src: any) => \"a\" | \"b\"; cases: { a: EventCallable<{ foo: 1; bar: number; }>[]; b: EventCallable<{ foo: 1; bar: string; }>; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 1; bar: number; } | { foo: 1; bar: string; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 1; bar: number; } | { foo: 1; bar: string; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":1305,"col":17},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":1325,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: (src: any) => \"a\" | \"b\" | \"c\"; cases: { a: EventCallable<{ foo: 1; bar: number; }>[]; b: EventCallable<{ foo: 1; bar: string; }>; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 1; bar: number; } | { foo: 1; bar: string; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 1; bar: number; } | { foo: 1; bar: string; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":1327,"col":17},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":1348,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: (src: { foo: 1; }) => \"a\" | \"b\"; cases: { a: EventCallable<{ foo: 1; bar: number; }>[]; b: EventCallable<{ foo: 1; bar: string; }>; c: EventCallable<...>; }; }' is not assignable to parameter of type '{ error: \"match function should return case names\"; need: \"a\" | \"b\" | \"c\"; got: \"a\" | \"b\"; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"match function should return case names\"; need: \"a\" | \"b\" | \"c\"; got: \"a\" | \"b\"; }'.","file":"effector/split.test.ts"},{"pos":{"line":1372,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: (src: any) => \"a\" | \"b\"; cases: { a: EventCallable<{ foo: 2; }>[]; b: EventCallable<{ foo: 2; }>[]; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; } | { foo: 2; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; } | { foo: 2; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":1374,"col":17},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":1393,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: (src: any) => \"a\" | \"b\"; cases: { a: EventCallable<{ foo: 2; }>[]; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":1395,"col":17},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":1414,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: (src: any) => \"a\"; cases: { a: EventCallable<{ foo: 2; }>[]; b: EventCallable<{ foo: 2; }>[]; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; } | { foo: 2; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; } | { foo: 2; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":1416,"col":17},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":1439,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: (src: any) => \"a\" | \"b\"; cases: { a: EventCallable<{ foo: 2; }>[]; b: EventCallable<{ foo: 2; }>; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; } | { foo: 2; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; } | { foo: 2; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":1441,"col":17},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":1461,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: (src: any) => \"a\" | \"b\" | \"c\"; cases: { a: EventCallable<{ foo: 2; }>[]; b: EventCallable<{ foo: 2; }>; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; } | { foo: 2; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; } | { foo: 2; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":1463,"col":17},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":1484,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: (src: any) => \"a\" | \"b\"; cases: { a: EventCallable<{ foo: 2; }>[]; b: EventCallable<{ foo: 2; }>; c: EventCallable<{ foo: 2; }>; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; } | { foo: 2; } | { foo: 2; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; } | { foo: 2; } | { foo: 2; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":1486,"col":17},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":1551,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: { a: (src: { foo: 1; }) => true; }; cases: { a: EventCallable<{ foo: 1; }>[]; b: EventCallable<{ foo: 1; }>[]; }; }' is not assignable to parameter of type '{ error: \"match object should contain case names\"; need: \"a\" | \"b\"; got: \"a\"; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"match object should contain case names\"; need: \"a\" | \"b\"; got: \"a\"; }'.","file":"effector/split.test.ts"},{"pos":{"line":1620,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: { a: (src: { foo: 1; }) => true; b: (src: { foo: 1; }) => true; }; cases: { a: EventCallable<{ foo: 1; }>[]; b: EventCallable<{ foo: 1; }>; c: EventCallable<...>; }; }' is not assignable to parameter of type '{ error: \"match object should contain case names\"; need: \"a\" | \"b\" | \"c\"; got: \"a\" | \"b\"; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"match object should contain case names\"; need: \"a\" | \"b\" | \"c\"; got: \"a\" | \"b\"; }'.","file":"effector/split.test.ts"},{"pos":{"line":1687,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; bar: number; }>; match: { a: (src: { foo: 1; bar: number; }) => true; }; cases: { a: EventCallable<{ foo: 1; }>[]; b: EventCallable<{ foo: 1; }>[]; }; }' is not assignable to parameter of type '{ error: \"match object should contain case names\"; need: \"a\" | \"b\"; got: \"a\"; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"match object should contain case names\"; need: \"a\" | \"b\"; got: \"a\"; }'.","file":"effector/split.test.ts"},{"pos":{"line":1756,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; bar: number; }>; match: { a: (src: { foo: 1; bar: number; }) => true; b: (src: { foo: 1; bar: number; }) => true; }; cases: { a: EventCallable<{ foo: 1; }>[]; b: EventCallable<...>; c: EventCallable<...>; }; }' is not assignable to parameter of type '{ error: \"match object should contain case names\"; need: \"a\" | \"b\" | \"c\"; got: \"a\" | \"b\"; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"match object should contain case names\"; need: \"a\" | \"b\" | \"c\"; got: \"a\" | \"b\"; }'.","file":"effector/split.test.ts"},{"pos":{"line":1783,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: { a: (src: any) => boolean; b: (src: any) => boolean; }; cases: { a: EventCallable<{ foo: 1; bar: number; }>[]; b: EventCallable<{ foo: 1; bar: string; }>[]; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 1; bar: number; } | { foo: 1; bar: string; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 1; bar: number; } | { foo: 1; bar: string; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":1786,"col":14},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":1788,"col":14},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":1809,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: { a: (src: any) => boolean; b: (src: any) => boolean; }; cases: { a: EventCallable<{ foo: 1; bar: number; }>[]; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 1; bar: number; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 1; bar: number; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":1812,"col":14},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":1814,"col":14},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":1835,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: { a: (src: any) => boolean; }; cases: { a: EventCallable<{ foo: 1; bar: number; }>[]; b: EventCallable<{ foo: 1; bar: string; }>[]; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 1; bar: number; } | { foo: 1; bar: string; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 1; bar: number; } | { foo: 1; bar: string; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":1838,"col":14},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":1862,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: { a: (src: any) => boolean; b: (src: any) => boolean; }; cases: { a: EventCallable<{ foo: 1; bar: number; }>[]; b: EventCallable<{ foo: 1; bar: string; }>; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 1; bar: number; } | { foo: 1; bar: string; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 1; bar: number; } | { foo: 1; bar: string; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":1865,"col":14},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":1867,"col":14},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":1889,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: { a: (src: any) => boolean; b: (src: any) => boolean; c: (src: any) => boolean; }; cases: { a: EventCallable<{ foo: 1; bar: number; }>[]; b: EventCallable<...>; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 1; bar: number; } | { foo: 1; bar: string; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 1; bar: number; } | { foo: 1; bar: string; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":1892,"col":14},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":1894,"col":14},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":1896,"col":14},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":1920,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: { a: (src: { foo: 1; }) => true; b: (src: { foo: 1; }) => true; }; cases: { a: EventCallable<{ foo: 1; bar: number; }>[]; b: EventCallable<{ foo: 1; bar: string; }>; c: EventCallable<...>; }; }' is not assignable to parameter of type '{ error: \"match object should contain case names\"; need: \"a\" | \"b\" | \"c\"; got: \"a\" | \"b\"; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"match object should contain case names\"; need: \"a\" | \"b\" | \"c\"; got: \"a\" | \"b\"; }'.","file":"effector/split.test.ts"},{"pos":{"line":1947,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: { a: (src: any) => boolean; b: (src: any) => boolean; }; cases: { a: EventCallable<{ foo: 2; }>[]; b: EventCallable<{ foo: 2; }>[]; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; } | { foo: 2; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; } | { foo: 2; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":1950,"col":14},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":1952,"col":14},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":1973,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: { a: (src: any) => boolean; b: (src: any) => boolean; }; cases: { a: EventCallable<{ foo: 2; }>[]; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":1976,"col":14},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":1978,"col":14},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":1999,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: { a: (src: any) => boolean; }; cases: { a: EventCallable<{ foo: 2; }>[]; b: EventCallable<{ foo: 2; }>[]; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; } | { foo: 2; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; } | { foo: 2; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":2002,"col":14},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":2026,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: { a: (src: any) => boolean; b: (src: any) => boolean; }; cases: { a: EventCallable<{ foo: 2; }>[]; b: EventCallable<{ foo: 2; }>; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; } | { foo: 2; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; } | { foo: 2; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":2029,"col":14},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":2031,"col":14},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":2053,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: { a: (src: any) => boolean; b: (src: any) => boolean; c: (src: any) => boolean; }; cases: { a: EventCallable<{ foo: 2; }>[]; b: EventCallable<...>; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; } | { foo: 2; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; } | { foo: 2; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":2056,"col":14},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":2058,"col":14},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":2060,"col":14},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":2084,"col":9},"message":"Argument of type '{ source: EventCallable<{ foo: 1; }>; match: { a: (src: any) => boolean; b: (src: any) => boolean; }; cases: { a: EventCallable<{ foo: 2; }>[]; b: EventCallable<{ foo: 2; }>; c: EventCallable<...>; }; }' is not assignable to parameter of type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; } | { foo: 2; } | { foo: 2; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"source type should extends cases\"; sourceType: { foo: 1; }; caseType: { foo: 2; } | { foo: 2; } | { foo: 2; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":2087,"col":14},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":2089,"col":14},"message":"Parameter 'src' implicitly has an 'any' type.","file":"effector/split.test.ts"},{"pos":{"line":2115,"col":7},"message":"Argument of type '{ source: EventCallable<number>; match: StoreWritable<\"a\" | \"c\">; cases: { a: EventCallable<number>[]; b: EventCallable<number>[]; __: EventCallable<...>[]; }; }' is not assignable to parameter of type '{ error: \"match unit should contain case names\"; need: \"a\" | \"b\"; got: \"a\" | \"c\"; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"match unit should contain case names\"; need: \"a\" | \"b\"; got: \"a\" | \"c\"; }'.","file":"effector/split.test.ts"},{"pos":{"line":2137,"col":7},"message":"Argument of type '{ source: EventCallable<number>; match: (src: number) => \"a\" | \"c\"; cases: { a: EventCallable<number>[]; b: EventCallable<number>[]; __: EventCallable<number>[]; }; }' is not assignable to parameter of type '{ error: \"match function should return case names\"; need: \"a\" | \"b\"; got: \"a\" | \"c\"; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"match function should return case names\"; need: \"a\" | \"b\"; got: \"a\" | \"c\"; }'.","file":"effector/split.test.ts"},{"pos":{"line":2159,"col":7},"message":"Argument of type '{ source: EventCallable<number>; match: { a: (src: number) => true; c: (src: number) => true; }; cases: { a: EventCallable<number>[]; b: EventCallable<number>[]; __: EventCallable<...>[]; }; }' is not assignable to parameter of type '{ error: \"match object should contain case names\"; need: \"a\" | \"b\"; got: \"a\" | \"c\"; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"match object should contain case names\"; need: \"a\" | \"b\"; got: \"a\" | \"c\"; }'.","file":"effector/split.test.ts"},{"pos":{"line":2182,"col":5},"message":"Argument of type '{ source: StoreWritable<number>; match: {}; cases: { __: Effect<number, void, Error>; }; }' is not assignable to parameter of type '{ error: \"config should be object with fields \\\"source\\\", \\\"match\\\" and \\\"cases\\\"\"; got: { source: StoreWritable<number>; match: {}; cases: unknown; clock: unknown; }; }'.\n  Object literal may only specify known properties, and 'source' does not exist in type '{ error: \"config should be object with fields \\\"source\\\", \\\"match\\\" and \\\"cases\\\"\"; got: { source: StoreWritable<number>; match: {}; cases: unknown; clock: unknown; }; }'.","file":"effector/split.test.ts"},{"pos":{"line":21,"col":9},"message":"Type 'StoreWritable<number>' is not assignable to type 'StoreWritable<string>'.\n  The types of '____._' are incompatible between these types.\n    Type 'number' is not assignable to type 'string'.","file":"effector/store.test.ts"},{"pos":{"line":90,"col":9},"message":"Type 'Store<string>' is not assignable to type 'Store<number>'.","file":"effector/store.test.ts"},{"pos":{"line":176,"col":14},"message":"Property 'on' does not exist on type 'Store<string>'.","file":"effector/store.test.ts"},{"pos":{"line":176,"col":25},"message":"Parameter 'state' implicitly has an 'any' type.","file":"effector/store.test.ts"},{"pos":{"line":176,"col":32},"message":"Parameter 'payload' implicitly has an 'any' type.","file":"effector/store.test.ts"},{"pos":{"line":245,"col":12},"message":"Property 'off' does not exist on type 'Store<string>'.","file":"effector/store.test.ts"},{"pos":{"line":299,"col":9},"message":"Type 'StoreWritable<{ page: number; limit: number; id: number; }>' is not assignable to type 'StoreWritable<{ [key: string]: any; page: number; limit: number; }>'.\n  Types of property '____' are incompatible.\n    Type 'StoreValueType<{ page: number; limit: number; id: number; }>' is not assignable to type 'StoreValueType<{ [key: string]: any; page: number; limit: number; }>'.\n      Types of parameters 'type' and 'type' are incompatible.\n        Type '{ [key: string]: any; page: number; limit: number; }' is not assignable to type '{ page: number; limit: number; id: number; }'.","file":"effector/store.test.ts"},{"pos":{"line":29,"col":11},"message":"No overload matches this call.\n  Overload 1 of 2, '(tag: DOMTag, spec: { attr?: PropertyMap | undefined; data?: PropertyMap | undefined; text?: DOMProperty | AttributeStoreInput | (DOMProperty | AttributeStoreInput)[] | undefined; ... 5 more ...; fn?: (() => void) | undefined; }): void', gave the following error.\n    Type 'Store<{ value: string; } | null>' is not assignable to type 'DOMProperty | AttributeStoreInput | (DOMProperty | AttributeStoreInput)[] | undefined'.\n      Type 'Store<{ value: string; } | null>' is not assignable to type 'AttributeStoreInput'.\n        Types of property 'map' are incompatible.\n          Type '<T>(fn: (state: { value: string; } | null) => T, config?: { skipVoid?: boolean | undefined; } | undefined) => Store<T>' is not assignable to type '<T>(fn: (state: string | number | boolean | null) => T, config?: { skipVoid?: boolean | undefined; } | undefined) => Store<T>'.\n            Types of parameters 'fn' and 'fn' are incompatible.\n              Types of parameters 'state' and 'state' are incompatible.\n                Type '{ value: string; } | null' is not assignable to type 'string | number | boolean | null'.\n                  Type '{ value: string; }' is not assignable to type 'string | number | boolean | null'.\n  Overload 2 of 2, '(tag: DOMTag, cb: () => void): void', gave the following error.\n    Argument of type '{ text: Store<{ value: string; } | null>; }' is not assignable to parameter of type '() => void'.\n      Object literal may only specify known properties, and 'text' does not exist in type '() => void'.","file":"forest/index.test.ts"},{"pos":{"line":90,"col":11},"message":"No overload matches this call.\n  Overload 1 of 2, '(tag: DOMTag, spec: { attr?: PropertyMap | undefined; data?: PropertyMap | undefined; text?: DOMProperty | AttributeStoreInput | (DOMProperty | AttributeStoreInput)[] | undefined; ... 5 more ...; fn?: (() => void) | undefined; }): void', gave the following error.\n    Argument of type '\"damn\"' is not assignable to parameter of type 'DOMTag'.\n  Overload 2 of 2, '(tag: DOMTag, cb: () => void): void', gave the following error.\n    Argument of type '\"damn\"' is not assignable to parameter of type 'DOMTag'.","file":"forest/index.test.ts"},{"pos":{"line":143,"col":13},"message":"Type 'Store<string>' is not assignable to type 'Store<number>'.","file":"forest/index.test.ts"},{"pos":{"line":146,"col":13},"message":"Type 'Store<number>' is not assignable to type 'Store<string>'.\n  Type 'number' is not assignable to type 'string'.","file":"forest/index.test.ts"}],"fileNames":["effector/attach.test.ts","effector/clearNode.test.ts","effector/combine.test.ts","effector/createApi.test.ts","effector/domain.test.ts","effector/effect.test.ts","effector/event.test.ts","effector/fork.test.ts","effector/forward.test.ts","effector/guard.test.ts","effector/index.test.ts","effector/launch.test.ts","effector/restore.test.ts","effector/sampleFilter.test.ts","effector/scopeBind.test.ts","effector/split.test.ts","effector/store.test.ts","effector/generated/guard.test.ts","effector/generated/sampleArrayTarget.test.ts","effector/generated/sampleClockArray.test.ts","effector/generated/sampleFilter.test.ts","effector/generated/sampleReturn.test.ts","effector/guard/guardArrayTarget.test.ts","effector/guard/guardClockArray.test.ts","effector/guard/guardOther.test.ts","effector/guard/guardReturn.test.ts","effector/guard/guardWideNarrow.test.ts","effector/sample/arrayTarget.test.ts","effector/sample/clockArray.test.ts","effector/sample/implicitCombine.test.ts","effector/sample/sample.test.ts","effector/sample/targetForwarding.test.ts","effector/sampleFilter/sampleFilterArrayTarget.test.ts","effector/sampleFilter/sampleFilterClockArray.test.ts","effector/sampleFilter/sampleFilterOther.test.ts","effector/sampleFilter/sampleFilterReturn.test.ts","effector/sampleFilter/sampleFilterWideNarrow.test.ts","effector-react/effectorReact.test.tsx","effector-react/useList.test.tsx","effector-react/useStoreMap.test.tsx","effector-vue/effectorVue.test.ts","forest/index.test.ts"]}